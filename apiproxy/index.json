[
{
	"uri": "https://developers.devision.io/apiproxy/engine/adriver/",
	"title": "Adriver",
	"tags": [],
	"description": "",
	"content": "Общее Этот engine предоставляет доступ к статистике сервиса Adriver Документация\npayload \u0026ldquo;method\u0026rdquo; - запрос который будет использоваться. По факту представляет собой часть строки в урле которая идет после адреса и до \u0026ldquo;?\u0026rdquo; включительно. \u0026ldquo;method_params\u0026rdquo; - Параметры которые передаются, в урле всё что после \u0026ldquo;?\u0026rdquo;. Тип данных словарь.\nПримеры Пример 1 Получение статистики за период c авторизацией\nimport json import requests import xml.etree.ElementTree as ET from metasdk import MetaApp API_HOST = \u0026#34;http://localhost:9998\u0026#34; META = MetaApp() log = META.log USER = \u0026#34;MazdaDealersMS\u0026#34; PASSWORD = \u0026#34;test\u0026#34; nsmap = { \u0026#34;at\u0026#34;: \u0026#34;http://www.w3.org/2005/Atom\u0026#34;, \u0026#34;adr\u0026#34;: \u0026#34;http://adriver.ru/ns/restapi/atom\u0026#34; } to_proxy = json.dumps({ \u0026#34;engine\u0026#34;: \u0026#34;adriver\u0026#34;, \u0026#34;payload\u0026#34;: { \u0026#34;user\u0026#34;: USER, \u0026#34;password\u0026#34;: PASSWORD, \u0026#34;method\u0026#34;: \u0026#34;/login\u0026#34;, \u0026#34;method_params\u0026#34;: {} } }) res = requests.post(API_HOST + \u0026#34;/native_call\u0026#34;, to_proxy) print(res.json()) res = res.json()[\u0026#34;result\u0026#34;] xml_root = ET.fromstring(res) adriver_user_id = xml_root.find(\u0026#34;adr:userId\u0026#34;, namespaces=nsmap).text adriver_token = xml_root.find(\u0026#34;adr:token\u0026#34;, namespaces=nsmap).text print(adriver_user_id) print(adriver_token) to_proxy = json.dumps({ \u0026#34;engine\u0026#34;: \u0026#34;adriver\u0026#34;, \u0026#34;payload\u0026#34;: { \u0026#34;user_id\u0026#34;: adriver_user_id, \u0026#34;auth_token\u0026#34;: adriver_token, \u0026#34;method\u0026#34;: \u0026#34;/monitoring/traffic_period\u0026#34;, \u0026#34;method_params\u0026#34;: {\u0026#34;start_date\u0026#34;: \u0026#34;2019-01-14\u0026#34;, \u0026#34;stop_date\u0026#34;: \u0026#34;2019-01-14\u0026#34;, \u0026#34;granularity\u0026#34;: \u0026#34;daily\u0026#34;} } }) res = requests.post(API_HOST + \u0026#34;/native_call\u0026#34;, to_proxy) print(res.json()) "
},
{
	"uri": "https://developers.devision.io/apiproxy/engine/amocrm/",
	"title": "AmoCRM",
	"tags": [],
	"description": "",
	"content": "Общее Engine для работы с api amocrm.ru v4 Документация\nPayload http_method: str - обязательно, http метод запроса. Как правило, для получения данных из апи это \u0026ldquo;GET\u0026rdquo;, а для загрузки в апи - \u0026ldquo;POST\u0026rdquo;, подробнее см. описание метода в документации url_path: str - url-путь к запрашиваемой сущности, например \u0026ldquo;leads\u0026rdquo;, \u0026ldquo;users\u0026rdquo; и т.д. Согласно документации, подставляется в конец url () version: str - необязательно, версия апи (по умолчанию - \u0026ldquo;v4\u0026rdquo;) ex_access_id: str - обязательно, id из таблицы meta.ex_access (таблица с параметрами авторизации во внешних системах) data: dict - необязательно, данные для post-запросов, см. документацию по методам method_params: dict - необязательно, параметры для get-запросов, см. документацию по методам paging - необязательно, параметры для пагинации\nПример получения лидов import requests import json payload = {\u0026#34;version\u0026#34;: \u0026#34;v4\u0026#34;, \u0026#34;ex_access_id\u0026#34;: \u0026#34;7822ac4e-66ee-11eb-ae93-0242ac130002\u0026#34;, \u0026#34;http_method\u0026#34;: \u0026#34;GET\u0026#34;, \u0026#34;url_path\u0026#34;: \u0026#34;leads\u0026#34;} rsp = requests.post(\u0026#34;http://127.0.0.1:9998/native_call\u0026#34;, json.dumps({\u0026#34;engine\u0026#34;: \u0026#34;amocrm\u0026#34;, \u0026#34;payload\u0026#34;: payload})) print(f\u0026#34;{rsp.status_code}{rsp.json()}\u0026#34;) Пример загрузки лида import requests import json data = [{\u0026#34;closed_at\u0026#34;: 1, \u0026#34;updated_at\u0026#34;: 1, \u0026#34;price\u0026#34;: 1, \u0026#34;name\u0026#34;: \u0026#34;name_1\u0026#34;, \u0026#34;created_at\u0026#34;: 1}] payload = {\u0026#34;version\u0026#34;: \u0026#34;v4\u0026#34;, \u0026#34;ex_access_id\u0026#34;: \u0026#34;7822ac4e-66ee-11eb-ae93-0242ac130002\u0026#34;, \u0026#34;http_method\u0026#34;: \u0026#34;POST\u0026#34;, \u0026#34;url_path\u0026#34;: \u0026#34;leads\u0026#34;, \u0026#34;data\u0026#34;: data} rsp = requests.post(\u0026#34;http://127.0.0.1:9998/native_call\u0026#34;, json.dumps({\u0026#34;engine\u0026#34;: \u0026#34;amocrm\u0026#34;, \u0026#34;payload\u0026#34;: payload})) print(f\u0026#34;{rsp.status_code}{rsp.json()}\u0026#34;) "
},
{
	"uri": "https://developers.devision.io/apiproxy/engine/calltouch/",
	"title": "Calltouch",
	"tags": [],
	"description": "",
	"content": "Общее Этот engine предоставляет доступ к статистике сервиса calltouch Документация\nПараметры site_id и token можно получить в разделе Настройки =\u0026gt; API личного кабинета Calltouch.\npayload \u0026ldquo;method\u0026rdquo; - запрос который будет использоваться. По факту представляет собой часть строки в урле которая идет после \u0026ldquo;RestAPI/\u0026rdquo; и до \u0026ldquo;?\u0026rdquo; включительно. Может быть несколько видов: {site_id}/orders-diary/orders? requests/{Номер заявки. Необязательный параметр}? requests/{site_id}/register/? {site_id}/addtags/? {site_id}/deletetags/? orders/register/? {site_id}/calls-diary/calls? \u0026ldquo;method_params\u0026rdquo; - Параметры которые передаются, в урле всё что после \u0026ldquo;?\u0026rdquo;. Тип данных словарь.\nПримеры Пример 1 Получение статистики за месяц.\nimport requests import json site_id = \u0026#39;xxxxx\u0026#39; token = \u0026#39;xxxxx\u0026#39; page = \u0026#39;2\u0026#39; limit = \u0026#39;20\u0026#39; date_to = datetime.today() date_from = date_to - timedelta(days=30) method = \u0026#39;{}/calls-diary/calls?\u0026#39;.format(site_id) method_params = {\u0026#39;clientApiId\u0026#39;: token, \u0026#39;dateFrom\u0026#39;: date_from.strftime(\u0026#34;%d/%m/%Y\u0026#34;), \u0026#39;dateTo\u0026#39;: date_to.strftime(\u0026#34;%d/%m/%Y\u0026#34;), \u0026#39;page\u0026#39;: page, \u0026#39;limit\u0026#39;: limit} to_proxy = json.dumps({ \u0026#34;engine\u0026#34;: \u0026#34;calltouch\u0026#34;, \u0026#34;payload\u0026#34;: { \u0026#34;method\u0026#34;: method, \u0026#34;method_params\u0026#34;: method_params, } }) res = requests.post(API_HOST + \u0026#34;/native_call\u0026#34;, to_proxy) print(res.content) "
},
{
	"uri": "https://developers.devision.io/apiproxy/engine/chat2desk/",
	"title": "Chat2Desk",
	"tags": [],
	"description": "",
	"content": "Общее Этот engine предоставляет доступ к API Chat2Desk.\n[Документация Chat2Desk] https://web.chat2desk.com/wiki/api\npayload  META: ссылка на объект класса MetaApp method: метод запроса (get, post и т.д.) access_token: токен доступа к API version: номер версии API (v1 и т.д.) url_path: весь url между version и знаком \u0026ldquo;?\u0026rdquo; method_params: параметры в url (после знака \u0026ldquo;?\u0026quot;) body: тело запроса для post headers: заголовки запроса paging: параметры для поддержки пагинации  Примеры Пример 1 Получить список клиентов\nimport json import requests API_HOST = \u0026#34;http://localhost:9998\u0026#34; access_token = \u0026#39;API KEY\u0026#39; to_proxy = json.dumps({ \u0026#34;engine\u0026#34;: \u0026#34;chat2desk\u0026#34;, \u0026#34;payload\u0026#34;: { \u0026#34;access_token\u0026#34;: access_token, \u0026#34;version\u0026#34;: \u0026#34;v1\u0026#34;, \u0026#34;url_path\u0026#34;: \u0026#34;clients\u0026#34;, \u0026#34;method\u0026#34;: \u0026#34;get\u0026#34;, \u0026#34;method_params\u0026#34;: { } } }) res = requests.post(API_HOST + \u0026#34;/native_call\u0026#34;, to_proxy) print(res.json()) "
},
{
	"uri": "https://developers.devision.io/apiproxy/engine/comagic/",
	"title": "Comagic",
	"tags": [],
	"description": "",
	"content": "Общее Этот engine предоставляет доступ к статистике сервиса Comagic Документация\npayload \u0026ldquo;method\u0026rdquo; - Метод из документации АПИ\n\u0026ldquo;method_params\u0026rdquo; - Параметры которые в метод.\n\u0026ldquo;session_id\u0026rdquo; - ID сессии, генерируется на нашей стороне, должно быть числом. Решил сделать передаваемым параметром, чтобы можно было работать с пагинацией ответа.\nПримеры Пример 1 Получение статистики за месяц.\nimport json import random import requests API_HOST = \u0026#34;http://localhost:9998\u0026#34; headers = {\u0026#34;Content-Type\u0026#34;: \u0026#34;application/json; charset=UTF-8\u0026#34;} method_params = {\u0026#34;login\u0026#34;: \u0026#34;apiproxi\u0026#34;, \u0026#34;password\u0026#34;: \u0026#34;xxxx\u0026#34;} body = { \u0026#34;engine\u0026#34;: \u0026#34;comagic\u0026#34;, \u0026#34;payload\u0026#34;: { \u0026#34;method\u0026#34;: \u0026#39;login.user\u0026#39;, \u0026#34;method_params\u0026#34;: method_params, \u0026#34;session_id\u0026#34;: random.randrange(1000000) } } body = json.dumps(body) res = requests.post(API_HOST + \u0026#34;/native_call\u0026#34;, headers=headers, data=body) print(res.content) "
},
{
	"uri": "https://developers.devision.io/apiproxy/engine/facebook/",
	"title": "Facebook",
	"tags": [],
	"description": "",
	"content": "Общее Этот engine предоставляет доступ к API facebook.\n[Дока Facebook] https://developers.facebook.com/docs/apis-and-sdks?locale=ru_RU Тест запросов: https://developers.facebook.com/tools/explorer/\npayload  method - метод запроса (get, post) access_token: токен доступа с наличием доступа к API Facebook version: номер версии API (v1 и т.д.) url_path: весь url между version и знаком \u0026ldquo;?\u0026rdquo; method_params: параметры в url (после знака \u0026ldquo;?\u0026quot;) body: тело запроса для post  Примеры Пример 1 Получить список страниц доступных под логином пользователя\nimport json import requests API_HOST = \u0026#34;http://0.0.0.0:9998\u0026#34; access_token = \u0026#39;USER TOKEN\u0026#39; res = requests.post(API_HOST + \u0026#34;/native_call\u0026#34;, json.dumps({ \u0026#34;engine\u0026#34;: \u0026#34;facebook\u0026#34;, \u0026#34;payload\u0026#34;: { \u0026#34;access_token\u0026#34;: access_token, \u0026#34;version\u0026#34;: \u0026#34;v3.3\u0026#34;, \u0026#34;url_path\u0026#34;: \u0026#34;me/accounts\u0026#34;, \u0026#34;method\u0026#34;: \u0026#34;get\u0026#34; }})) print(res.json()) "
},
{
	"uri": "https://developers.devision.io/apiproxy/engine/facebook_ads/",
	"title": "Facebook Ads",
	"tags": [],
	"description": "",
	"content": "Общее Этот engine предоставляет доступ к справочникам facebook.\nДока Facebook\npayload  access_token - токен facebook service - серсис апи. Например AdAccount method - метод апи. Например get_insights method_params - параметры метода апи\nВнутри method_params следует так же определить переменные требующиеся для корректной работы: field_service - по какому сервису нам требуется возвращать поля. Например Ad fields - какие поля требуется вернуть в выборке. {service}_id - основной идентификатор по сервису, для каждого генерируется свой в зависимости от используемого ранее сервиса, как в примере 2  Примеры Пример 1 Получить список рекламный аккаунтов\nimport requests import json access_token = \u0026#34;YOUR_TOKEN\u0026#34; to_proxy = json.dumps({ \u0026#34;engine\u0026#34;: \u0026#34;facebook_ads\u0026#34;, \u0026#34;payload\u0026#34;: { \u0026#34;service\u0026#34;: \u0026#34;user\u0026#34;, \u0026#34;access_token\u0026#34;: \u0026#34;access_token\u0026#34;, \u0026#34;method\u0026#34;: \u0026#34;get_ad_accounts\u0026#34;, \u0026#34;method_params\u0026#34;: {\u0026#34;a\u0026#34;:\u0026#34;a\u0026#34;}, } }) res = requests.post(\u0026#34;${HOST}/native_call\u0026#34;, to_proxy) print(u\u0026#34;res = %s\u0026#34; % str(res.text)) Пример 2 Получить статистику по аккаунтам\nimport requests import json access_token = \u0026#34;YOUR_TOKEN\u0026#34; to_proxy = json.dumps({ \u0026#34;engine\u0026#34;: \u0026#34;facebook_ads\u0026#34;, \u0026#34;payload\u0026#34;: { \u0026#34;service\u0026#34;: \u0026#34;adaccount\u0026#34;, \u0026#34;access_token\u0026#34;: \u0026#34;access_token\u0026#34;, \u0026#34;method\u0026#34;: \u0026#34;get_insights\u0026#34;, \u0026#34;method_params\u0026#34;: { \u0026#39;adaccount_id\u0026#39;: \u0026#34;login_id\u0026#34;, \u0026#39;time_increment\u0026#39;: 1, \u0026#39;time_range\u0026#39;: { \u0026#39;since\u0026#39;: \u0026#34;start_date\u0026#34;, \u0026#39;until\u0026#39;: \u0026#34;end_date\u0026#34;, }, \u0026#39;fields\u0026#39;: [ \u0026#34;account_id\u0026#34;, \u0026#34;clicks\u0026#34;, \u0026#34;impressions\u0026#34;, \u0026#34;spend\u0026#34;, ], } } }) res = requests.post(\u0026#34;${HOST}/native_call\u0026#34;, to_proxy) print(u\u0026#34;res = %s\u0026#34; % str(res.json)) "
},
{
	"uri": "https://developers.devision.io/apiproxy/engine/google_adwords/",
	"title": "Google AdWords",
	"tags": [],
	"description": "",
	"content": "payload \u0026ldquo;version\u0026rdquo; - Версия API AdWords. Например v201806 \u0026ldquo;refresh_token\u0026rdquo; - refresh токен гугла \u0026ldquo;customer_id\u0026rdquo; - ID клиента Google Ads \u0026ldquo;service\u0026rdquo; - Имя службы. Например AdGroupService \u0026ldquo;method\u0026rdquo; - Имя метода службы: get, mutate и пр. Например mutate \u0026ldquo;method_params\u0026rdquo; - параметры метода апи \u0026ldquo;partial_failure\u0026rdquo; - По умолчанию False. Включает функцию частичного отказа операций. Например при добавлении 10 объявлений 2 из них могут не добавиться, но это не вызовет проблем с добавленим остальных 8-ми. Подробнее\nПример import requests import json to_proxy = json.dumps({ \u0026#34;engine\u0026#34;: \u0026#34;google_adwords\u0026#34;, \u0026#34;payload\u0026#34;: { \u0026#34;refresh_token\u0026#34;: \u0026#34;XXXXX\u0026#34;, \u0026#34;version\u0026#34;: \u0026#34;v201806\u0026#34;, \u0026#34;customer_id\u0026#34;: \u0026#34;XXXXXXX\u0026#34;, \u0026#34;service\u0026#34;: \u0026#34;AdService\u0026#34;, \u0026#34;method\u0026#34;: \u0026#34;mutate\u0026#34;, \u0026#34;method_params\u0026#34;: { \u0026#34;operations\u0026#34;: [ { \u0026#34;operator\u0026#34;: \u0026#34;SET\u0026#34;, \u0026#34;operand\u0026#34;: { \u0026#39;xsi_type\u0026#39; :\u0026#39;ExpandedTextAd\u0026#39;, \u0026#39;id\u0026#39; :286782508257, \u0026#34;headlinePart1\u0026#34; :\u0026#39;Купить Бадлон\u0026#39;, \u0026#34;headlinePart2\u0026#34; :\u0026#39;текст222233333444\u0026#39;, \u0026#34;description\u0026#34; :\u0026#39;MY DESC 123\u0026#39;, \u0026#34;finalUrls\u0026#34; :[\u0026#39;http://example.com\u0026#39;] } } ] } } }) res = requests.post(API_HOST + \u0026#34;/native_call\u0026#34;, to_proxy) auth_token = res.json().get(\u0026#39;result\u0026#39;) "
},
{
	"uri": "https://developers.devision.io/apiproxy/engine/google_analytics/",
	"title": "Google Analytics",
	"tags": [],
	"description": "",
	"content": "Общее Этот engine предоставляет доступ к отчетам Google Analytics(GA) и загрузке собственной статистики.\nДока Google\npayload  share_refresh_token - токен GA version - версия апи GA. Новое пишется с v4, для загрузки статичтики v3 method - метод апи. Например management.uploads.list method_params - параметры метода апи. Для загрузки статистики нужно передать media_id, это идентификатор файла загруженного в мету.  Примеры Пример 1 Получение отчетов\nimport json import pprint import requests from metasdk import MetaApp META = MetaApp() db_adp = META.db(\u0026#34;adplatform\u0026#34;) refresh_token = db_adp.one( \u0026#34;SELECT refreshtoken as refresh_token FROM external_connections WHERE company_id = 1 AND system_id = \u0026#39;googleAnalytics\u0026#39; and login=\u0026#39;analytics@realweb.ru\u0026#39; LIMIT 1\u0026#34;)[ \u0026#39;refresh_token\u0026#39;] ga_property_id = \u0026#39;91847147\u0026#39; body = { \u0026#34;engine\u0026#34;: \u0026#34;google_analytics\u0026#34;, \u0026#34;payload\u0026#34;: { \u0026#34;refresh_token\u0026#34;: refresh_token, \u0026#34;version\u0026#34;: \u0026#34;v4\u0026#34;, \u0026#34;method\u0026#34;: \u0026#34;reports.batchGet\u0026#34;, \u0026#34;method_params\u0026#34;: { \u0026#34;body\u0026#34;: { # \u0026#34;useResourceQuotas\u0026#34;: True, # Включение привелений GA360 \u0026#34;reportRequests\u0026#34;: [ { \u0026#34;viewId\u0026#34;: ga_property_id, \u0026#34;dateRanges\u0026#34;: [ { \u0026#34;startDate\u0026#34;: \u0026#34;2015-06-15\u0026#34;, \u0026#34;endDate\u0026#34;: \u0026#34;2015-06-30\u0026#34; }], \u0026#34;metrics\u0026#34;: [ { \u0026#34;expression\u0026#34;: \u0026#34;ga:sessions\u0026#34; }], \u0026#34;dimensions\u0026#34;: [ { \u0026#34;name\u0026#34;: \u0026#34;ga:browser\u0026#34; }] }] } } } } resp = requests.post(\u0026#34;http://apiproxy.apis.kb.1ad.ru/native_call\u0026#34;, json.dumps(body)) print(u\u0026#34;resp_data = %s\u0026#34; % str(resp.text)) pprint.pprint(resp.json()[\u0026#39;result\u0026#39;][\u0026#39;reports\u0026#39;]) "
},
{
	"uri": "https://developers.devision.io/apiproxy/engine/mailchimp/",
	"title": "Mailchimp",
	"tags": [],
	"description": "",
	"content": "Общее Этот engine предоставляет доступ к API Mailchimp.\n[Документация Mailchimp] https://mailchimp.com/developer/guides/get-started-with-mailchimp-api-3/ https://mailchimp.com/developer/reference/\npayload  META: ссылка на объект класса MetaApp method: метод запроса (get, post и т.д.) access_token: токен доступа к API api_endpoint: url enpoint\u0026rsquo;a (есть в данных при oAuth авторизации: acc[\u0026lsquo;token_info\u0026rsquo;][\u0026lsquo;extUserInfo\u0026rsquo;][\u0026lsquo;metadata\u0026rsquo;][\u0026lsquo;api_endpoint\u0026rsquo;], например: \u0026ldquo;https://us11.api.mailchimp.com\u0026rdquo; version: номер версии API (v3.0 и т.д.) url_path: весь url между version и знаком \u0026ldquo;?\u0026rdquo; method_params: параметры в url (после знака \u0026ldquo;?\u0026quot;) body: тело запроса для post  Примеры Пример 1 Получить список доступных списков рассылки (списки аудиторий) https://mailchimp.com/developer/reference/lists/\nimport json import requests API_HOST = \u0026#34;http://0.0.0.0:9998\u0026#34; access_token = \u0026#39;API KEY\u0026#39; # Например: api_endpoint = \u0026#34;https://us11.api.mailchimp.com\u0026#34; api_endpoint = \u0026#34;API ENDPOINT\u0026#34; res = requests.post(API_HOST + \u0026#34;/native_call\u0026#34;, json.dumps({ \u0026#34;engine\u0026#34;: \u0026#34;mailchimp\u0026#34;, \u0026#34;payload\u0026#34;: { \u0026#34;access_token\u0026#34;: access_token, \u0026#34;api_endpoint\u0026#34;: api_endpoint, \u0026#34;version\u0026#34;: \u0026#34;3.0\u0026#34;, \u0026#34;url_path\u0026#34;: \u0026#34;lists\u0026#34;, \u0026#34;method\u0026#34;: \u0026#34;get\u0026#34;, \u0026#34;method_params\u0026#34;: { \u0026#34;fields\u0026#34;: \u0026#34;lists.name,lists.id\u0026#34; } }})) print(res.json()) Пример 2 Получить список емейлов в из списка рассылок https://mailchimp.com/developer/reference/lists/list-members/\nimport json import requests API_HOST = \u0026#34;http://0.0.0.0:9998\u0026#34; access_token = \u0026#34;API KEY\u0026#34; # Например: api_endpoint = \u0026#34;https://us11.api.mailchimp.com\u0026#34; api_endpoint = \u0026#34;API ENDPOINT\u0026#34;#  # Идентификатор списка рассылки, например: \u0026#34;cbf04e0bbd\u0026#34; list_id = \u0026#34;LIST_ID\u0026#34; res = requests.post(API_HOST + \u0026#34;/native_call\u0026#34;, json.dumps({ \u0026#34;engine\u0026#34;: \u0026#34;mailchimp\u0026#34;, \u0026#34;payload\u0026#34;: { \u0026#34;access_token\u0026#34;: access_token, \u0026#34;api_endpoint\u0026#34;: api_endpoint, \u0026#34;version\u0026#34;: \u0026#34;3.0\u0026#34;, \u0026#34;url_path\u0026#34;: \u0026#34;lists/{list_id}/members\u0026#34;.format(list_id=list_id), \u0026#34;method\u0026#34;: \u0026#34;get\u0026#34;, \u0026#34;method_params\u0026#34;: { \u0026#34;fields\u0026#34;: \u0026#34;members.email_address,total_items\u0026#34;, \u0026#34;count\u0026#34;: 10 } }})) print(res.json()) "
},
{
	"uri": "https://developers.devision.io/apiproxy/engine/mytarget/",
	"title": "Mytarget",
	"tags": [],
	"description": "",
	"content": "Общее Этот engine предоставляет доступ к статистике сервиса Mytarget Документация API Как авторизоваться в API\npayload \u0026ldquo;version\u0026rdquo; - текущая версия API внешней системы. Например v2. \u0026ldquo;refresh_token\u0026rdquo; - рефреш токен клиента Mytarget.\n\u0026ldquo;method\u0026rdquo; - Часть урла из документации между \u0026lt;версия\u0026gt;/ и .json Например если в документации указан урл /api/v2/ok/lead_ads/forms.json то \u0026ldquo;method\u0026rdquo; = ok/lead_ads/forms\n\u0026ldquo;method_params\u0026rdquo; - Параметры для передачи в Mytarget. Если вы получаете ошибку валидации \u0026ldquo;bad json\u0026rdquo;, то параметры необходимо передать через json_params \u0026ldquo;json_params\u0026rdquo; - Дублирует method_params, но по другому передается в Mytarget.\nПримечания:\n Чтобы сделать post-запрос, в method_params установите ключ \u0026ldquo;request_method\u0026rdquo;: \u0026ldquo;post\u0026rdquo; Чтобы получить токены клиента агентсва необходимо указать метод \u0026ldquo;agency_client_credentials\u0026rdquo;, в method_params необоходимо передать имя клиента агентсва как \u0026ldquo;agency_client_name\u0026rdquo;  Примеры Пример Создание аккаунта клиента агентсва.\nfrom metasdk import MetaApp API_PROXY_HOST = \u0026#34;http://localhost:9998\u0026#34; META = MetaApp( api_proxy_url=API_PROXY_HOST ) method_params = {\u0026#34;request_method\u0026#34;: \u0026#34;post\u0026#34;} json_params = {\u0026#34;access_type\u0026#34;: \u0026#34;readonly\u0026#34;, \u0026#34;user\u0026#34;: { \u0026#34;additional_emails\u0026#34;: None, \u0026#34;additional_info\u0026#34;: {\u0026#34;name\u0026#34;: \u0026#34;name\u0026#34;, \u0026#34;phone\u0026#34;: \u0026#34;phone\u0026#34;, \u0026#34;address\u0026#34;: \u0026#34;address\u0026#34;, \u0026#34;client_name\u0026#34;: \u0026#34;client_name\u0026#34;, \u0026#34;client_info\u0026#34;: \u0026#34;client_info\u0026#34;} }} resp = META.ApiProxyService.call_proxy(engine=\u0026#34;mytarget\u0026#34;, payload={\u0026#34;refresh_token\u0026#34;: refresh_token, # Токен должен быть с правами на создание аккаунтов \u0026#34;method\u0026#34;: \u0026#39;agency/clients\u0026#39;, \u0026#34;version\u0026#34;: \u0026#34;v2\u0026#34;, \u0026#34;method_params\u0026#34;: method_params, \u0026#34;json_params\u0026#34;: json_params}, method=\u0026#34;native_call\u0026#34;, analyze_json_error_param=False, retry_request_substr_variants=[]).json() "
},
{
	"uri": "https://developers.devision.io/apiproxy/helpers/queue_manager/",
	"title": "Queue Manager",
	"tags": [],
	"description": "",
	"content": "Общее Простой менеджер очереди для редис который умеет ставить в очередь по уникальным параметрам запроса.\nПараметры  size - размер очереди unique_keys - список путей до уникальных ключей в параметрах (формата \u0026lsquo;method_params.account_id\u0026rsquo;) wait_time - максимальное время ожидание постановки задачи в очередь (по умолчанию 5 секунд)  Примеры Пример 1 Использование в коде\n@redis_queue(5, [\u0026#39;refresh_token\u0026#39;]) def google_analytics_nc(META: MetaApp, version, refresh_token, method, method_params, data_format=None, http_response=None): Пример 2 Использование в коде с другим временем ожидания\n@redis_queue(5, [\u0026#39;refresh_token\u0026#39;], 10) def google_analytics_nc(META: MetaApp, version, refresh_token, method, method_params, data_format=None, http_response=None): "
},
{
	"uri": "https://developers.devision.io/apiproxy/helpers/save_call/",
	"title": "Save Call",
	"tags": [],
	"description": "",
	"content": "Общее Этот скрипт содержит в себе декоратор для сохранения результата работы любой функции в базу. Оборачивает любую функцию, и принимает параметры \u0026ldquo;request_id\u0026rdquo;, \u0026ldquo;uniq\u0026rdquo;, \u0026ldquo;file_type\u0026rdquo;.\nПринцип работы: Генерирует unique_id по имени функции и переданным в нее параметрам. Делает SELECT из таблицы adplatform.api.request_log по request_id и проверяет наличие там unique_id. Если есть десерелизует уже записанный результат и возвращает его. Если нет, то выполняет функцию, серелизует результат её работы и записывает в базу вместе с параметрами с которыми она была вызвана.\nПараметры вызова \u0026ldquo;request_id\u0026rdquo; - Тип uuid. Уникальный id операции.\nЕсли не передан, декоратор просто вернет результат работы без записи в базу.\n\u0026ldquo;uniq\u0026rdquo; - Тип list. Определяет какие ключи словаря kwargs записывать как уникальный идентификатор вызова функции.\n\u0026ldquo;file_type\u0026rdquo; - Тип str. Определяет какой формат возвращает функция, приводит этот формат к JSON, для дальнейшей записи в базу. Если не передан, то конвертации не произойдет и будет попытка записать в базу \u0026ldquo;как есть\u0026rdquo;. ВНИМАНИЕ! В базу не может быть записан не JSON. Поддерживаемые форматы: \u0026lsquo;suds\u0026rsquo;, \u0026lsquo;zeep\u0026rsquo;, \u0026lsquo;text\u0026rsquo;, \u0026lsquo;fc_obj(facebook_object)\u0026rsquo;\nПримеры Пример 1 Получение статистики за месяц.\nimport requests from src.engine.save_call import save_call url = \u0026#39;http://book.pythontips.com/en/latest/lambdas.html\u0026#39; @save_call(request_id=\u0026#39;32d14289-5f83-4829-a87f-e83cc51a7020\u0026#39;, uniq=[\u0026#39;url\u0026#39;, ]) def save_requests_get(*args, **kwargs): res = requests.get(*args, **kwargs) return res.text s = save_requests_get(url=url) r = requests.get(url=url).text print(type(s)) print(type(r)) print(r == s) "
},
{
	"uri": "https://developers.devision.io/apiproxy/engine/yandex_direct/",
	"title": "Yandex Direct",
	"tags": [],
	"description": "",
	"content": "Общее Этот engine предоставляет доступ к справочникам Яндект Директа (ЯД). Для отчетов существует отдельный engine apiproxy так как и у ЯД это отдельная служба.\nДока Директа\npayload  access_token - токен ЯД version - версия апи ЯД. Новое пишется с v5 account_name - название аккаунта клиента ЯД. В некоторых методах, это необязательное поле. Например Clients.get service - серсис апи. Например Clients method - метод апи. Например get method_params - параметры метода апи  Примеры Пример 1 Получить список клиентов\nimport requests import json access_token = \u0026#34;YOUR_TOKEN\u0026#34; ret = requests.post(\u0026#34;${HOST}/native_call\u0026#34;, json.dumps({ \u0026#34;engine\u0026#34;: \u0026#34;yandex_direct\u0026#34;, \u0026#34;payload\u0026#34;: { \u0026#34;access_token\u0026#34;: access_token, \u0026#34;version\u0026#34;: \u0026#34;v5\u0026#34;, \u0026#34;account_name\u0026#34;: None, \u0026#34;service\u0026#34;: \u0026#34;Clients\u0026#34;, \u0026#34;method\u0026#34;: \u0026#34;get\u0026#34;, \u0026#34;method_params\u0026#34;: { \u0026#34;FieldNames\u0026#34;: [ \u0026#34;AccountQuality\u0026#34;, \u0026#34;Archived\u0026#34;, \u0026#34;ClientId\u0026#34;, \u0026#34;ClientInfo\u0026#34;, \u0026#34;CountryId\u0026#34;, \u0026#34;CreatedAt\u0026#34;, \u0026#34;Currency\u0026#34;, \u0026#34;Grants\u0026#34;, \u0026#34;Login\u0026#34;, \u0026#34;Notification\u0026#34;, \u0026#34;OverdraftSumAvailable\u0026#34;, \u0026#34;Phone\u0026#34;, \u0026#34;Representatives\u0026#34;, \u0026#34;Restrictions\u0026#34;, \u0026#34;Settings\u0026#34;, \u0026#34;Type\u0026#34;, \u0026#34;VatRate\u0026#34; ] } } })) print(u\u0026#34;ret = %s\u0026#34; % str(ret.text)) Пример 2 Получить рекламные кампании клиента\nimport requests import json access_token = \u0026#34;YOUR_TOKEN\u0026#34; ret = requests.post(\u0026#34;${HOST}/native_call\u0026#34;, json.dumps({ \u0026#34;engine\u0026#34;: \u0026#34;yandex_direct\u0026#34;, \u0026#34;payload\u0026#34;: { \u0026#34;access_token\u0026#34;: access_token, \u0026#34;version\u0026#34;: \u0026#34;v5\u0026#34;, \u0026#34;account_name\u0026#34;: \u0026#34;MY_CLIENT\u0026#34;, \u0026#34;service\u0026#34;: \u0026#34;Campaigns\u0026#34;, \u0026#34;method\u0026#34;: \u0026#34;get\u0026#34;, \u0026#34;method_params\u0026#34;: { \u0026#34;SelectionCriteria\u0026#34;: { \u0026#34;Types\u0026#34;: [\u0026#34;TEXT_CAMPAIGN\u0026#34;, \u0026#34;MOBILE_APP_CAMPAIGN\u0026#34;, \u0026#34;DYNAMIC_TEXT_CAMPAIGN\u0026#34;] }, \u0026#34;FieldNames\u0026#34;: [ \u0026#34;BlockedIps\u0026#34;, \u0026#34;ExcludedSites\u0026#34;, \u0026#34;Currency\u0026#34;, \u0026#34;DailyBudget\u0026#34;, \u0026#34;Notification\u0026#34;, \u0026#34;EndDate\u0026#34;, \u0026#34;Funds\u0026#34;, \u0026#34;ClientInfo\u0026#34;, \u0026#34;Id\u0026#34;, \u0026#34;Name\u0026#34;, \u0026#34;NegativeKeywords\u0026#34;, \u0026#34;RepresentedBy\u0026#34;, \u0026#34;StartDate\u0026#34;, \u0026#34;Statistics\u0026#34;, \u0026#34;State\u0026#34;, \u0026#34;Status\u0026#34;, \u0026#34;StatusPayment\u0026#34;, \u0026#34;StatusClarification\u0026#34;, \u0026#34;SourceId\u0026#34;, \u0026#34;TimeTargeting\u0026#34;, \u0026#34;TimeZone\u0026#34;, \u0026#34;Type\u0026#34; ] } } })) print(u\u0026#34;ret = %s\u0026#34; % str(ret.text)) "
},
{
	"uri": "https://developers.devision.io/apiproxy/engine/yandex_direct_report/",
	"title": "Yandex Direct Report",
	"tags": [],
	"description": "",
	"content": "Общее Этот engine предоставляет доступ к отчетам Яндект Директа (ЯД). Для справочников существует отдельный engine apiproxy так как и у ЯД это отдельная служба.\nДока Директа\npayload  access_token - токен ЯД version - версия апи ЯД. Новое пишется с v5 account_name - название аккаунта клиента ЯД. В некоторых методах, это необязательное поле. Например Clients.get method_params - параметры отчета апи request_headers - Смотреть тут return_as_is - False по умолчанию. Если True будет возвращены TSV данные  Примеры Пример 1 Получить отчет\nimport requests import json access_token = \u0026#34;YOUR_TOKEN\u0026#34; ret = requests.post(\u0026#34;${HOST}/native_call\u0026#34;, json.dumps(body = { \u0026#34;engine\u0026#34;: \u0026#34;yandex_direct_report\u0026#34;, \u0026#34;payload\u0026#34;: { \u0026#34;access_token\u0026#34;: access_token, \u0026#34;version\u0026#34;: \u0026#34;v5\u0026#34;, \u0026#34;account_name\u0026#34;: \u0026#34;myyandexdirectaccount\u0026#34;, \u0026#34;method_params\u0026#34;: { \u0026#34;DateRangeType\u0026#34;: \u0026#34;CUSTOM_DATE\u0026#34;, \u0026#34;SelectionCriteria\u0026#34;: { \u0026#34;DateFrom\u0026#34;: \u0026#34;2018-01-01\u0026#34;, \u0026#34;DateTo\u0026#34;: \u0026#34;2018-03-01\u0026#34;, }, \u0026#34;FieldNames\u0026#34;: [ \u0026#34;Date\u0026#34;, \u0026#34;CampaignId\u0026#34;, \u0026#34;CampaignName\u0026#34;, \u0026#34;CampaignType\u0026#34;, \u0026#34;AdId\u0026#34;, \u0026#34;AdFormat\u0026#34;, \u0026#34;AdGroupId\u0026#34;, \u0026#34;AdGroupName\u0026#34;, \u0026#34;AdNetworkType\u0026#34;, \u0026#34;Age\u0026#34;, \u0026#34;Device\u0026#34;, \u0026#34;Gender\u0026#34;, \u0026#34;LocationOfPresenceName\u0026#34;, \u0026#34;Placement\u0026#34;, \u0026#34;TargetingLocationName\u0026#34;, \u0026#34;Clicks\u0026#34;, \u0026#34;Impressions\u0026#34;, \u0026#34;Cost\u0026#34;, ], \u0026#34;OrderBy\u0026#34;: [{\u0026#34;Field\u0026#34;: \u0026#34;Date\u0026#34;}], \u0026#34;ReportType\u0026#34;: \u0026#34;AD_PERFORMANCE_REPORT\u0026#34;, \u0026#34;IncludeVAT\u0026#34;: \u0026#34;YES\u0026#34;, \u0026#34;IncludeDiscount\u0026#34;: \u0026#34;NO\u0026#34; } } })) print(u\u0026#34;ret = %s\u0026#34; % str(ret.text)) "
},
{
	"uri": "https://developers.devision.io/apiproxy/engine/yandex_market/",
	"title": "Yandex Market",
	"tags": [],
	"description": "",
	"content": "Общее Этот engine предоставляет доступ к справочникам Яндект Директа (ЯМ). Дока Маркета\npayload  access_token - токен ЯМ. version - версия апи ЯМ. Новое пишется с v2 method - метод апи. Например get method_params - параметры метода апи  Примеры Пример 1 Получить список кампаний\nimport requests import json rsp = requests.post(\u0026#34;http://localhost:9998/native_call\u0026#34;, json.dumps({ \u0026#34;engine\u0026#34;: \u0026#34;yandex_market_partner\u0026#34;, \u0026#34;payload\u0026#34;: { \u0026#34;version\u0026#34;: \u0026#34;2\u0026#34;, \u0026#34;access_token\u0026#34;: \u0026#34;AQAAAAAVDLtlAAHkQafBUG5pQU99s6_sWNG_nHg\u0026#34;, \u0026#34;method\u0026#34;: \u0026#34;campaigns\u0026#34;, \u0026#34;method_params\u0026#34;: {} } })) print(\u0026#34;{}{}\u0026#34;.format(rsp.status_code, rsp.text)) "
},
{
	"uri": "https://developers.devision.io/apiproxy/engine/yandex_metrika/",
	"title": "Yandex Metrika",
	"tags": [],
	"description": "",
	"content": "Общее Этот engine предоставляет доступ к данным из Яндекс Метрики. Дока Метрики\npayload  access_token: токен доступа с наличием доступа к API Метрики version: номер версии API (v1 и т.д.) service: наименование сервиса в API Метрики (статистика - \u0026lsquo;stat\u0026rsquo;, управление - \u0026lsquo;management\u0026rsquo;) url_path: весь url между version и method_params без знака ? method_params: параметры в url (после знака \u0026ldquo;?\u0026quot;) method: метод запроса (get, post) body: тело запроса для post  Примеры Пример 1 Получить статистику\nimport json import requests API_HOST = \u0026#34;http://localhost:9998\u0026#34; access_token = \u0026#39;YOUR TOKEN\u0026#39; res = requests.post(API_HOST + \u0026#34;/native_call\u0026#34;, json.dumps({ \u0026#34;engine\u0026#34;: \u0026#34;yandex_metrika\u0026#34;, \u0026#34;payload\u0026#34;: { \u0026#34;access_token\u0026#34;: access_token, \u0026#34;version\u0026#34;: \u0026#34;v1\u0026#34;, \u0026#34;service\u0026#34;: \u0026#34;stat\u0026#34;, \u0026#34;url_path\u0026#34;: \u0026#34;data\u0026#34;, \u0026#34;method\u0026#34;: \u0026#34;get\u0026#34;, \u0026#34;method_params\u0026#34;: { \u0026#34;direct_client_logins\u0026#34;: \u0026#34;jd-com-rw\u0026#34;, \u0026#34;ids\u0026#34;: 37688905, \u0026#34;metrics\u0026#34;: \u0026#34;ym:s:visits\u0026#34; } }})) print(res.json()) "
},
{
	"uri": "https://developers.devision.io/apiproxy/_header/",
	"title": "header",
	"tags": [],
	"description": "",
	"content": "Api Proxy\n"
},
{
	"uri": "https://developers.devision.io/apiproxy/",
	"title": "Api Proxy",
	"tags": [],
	"description": "Api Proxy - Изящная платформа для приложений корпоративного уровня",
	"content": "Api Proxy Дает http интрефейс для запросов в рекламные и нерекламные api\nМотривация Это удобно, если нужно:\n Что-то залогировать Что-то заблокировать Устроить очередь на запросы к аккаунтам (например не более 5-7 потоков к какому-то аккаунту директа) Настроить /etc/hosts или что-то из-этой серии  Первый вызов API Чтобы вызвать апи нужно сделать POST запрос с json телом. В теле запроса передаются параметры:\n engine (string): имя поставщика апи payload (object): данные запроса. Разные для разных engine  import requests import json ret = requests.post(\u0026#34;${HOST}/native_call\u0026#34;, json.dumps({ \u0026#34;engine\u0026#34;: \u0026#34;YOUR_ENGINE\u0026#34;, \u0026#34;payload\u0026#34;: { ... } }) , headers={ \u0026#34;X-App\u0026#34;: \u0026#34;MyApp\u0026#34;, # Имя вашего приложения (без версий и пр динамики) \u0026#34;X-Worker\u0026#34;: \u0026#34;MyWorker\u0026#34;, # Имя фонового процесса или Модуля интерфейса \u0026#34;X-ObjectLocator\u0026#34;: \u0026#34;obj:test\u0026#34; # Условное обозначение объекта в рамках которого был запрос, напиример algorithm_id:777 - будет означать алгоритм 777 }) print(u\u0026#34;ret = %s\u0026#34; % str(ret.text)) "
},
{
	"uri": "https://developers.devision.io/apiproxy/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://developers.devision.io/apiproxy/engine/",
	"title": "Engines",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://developers.devision.io/apiproxy/helpers/",
	"title": "Helpers",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://developers.devision.io/apiproxy/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]