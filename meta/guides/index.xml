<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Руководства on META | Devision Developers</title>
    <link>https://developers.devision.io/meta/guides/</link>
    <description>Recent content in Руководства on META | Devision Developers</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ru-ru</language>
    <lastBuildDate>Mon, 24 Apr 2017 18:36:24 +0200</lastBuildDate><atom:link href="https://developers.devision.io/meta/guides/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Жизненный цикл запроса</title>
      <link>https://developers.devision.io/meta/guides/request_life_cycle/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://developers.devision.io/meta/guides/request_life_cycle/</guid>
      <description>Введение Окружение запроса  env - объект-окружение запроса к серверу. vm - объект для удобной работы с ответом клиенту. На лего странцах отдельный vm на каждый script. pvm - только на LEGO-страницах. Отвечает за хранение данных на всех странце, содержит в себе vm script. DataResult - низкоуровневый класс, отвечающий за ответ с данными по EntityPage. Его нельзя получить так как он никуда не передается, существует вне script - над ним. Создается вручную при необходимости только в meta/js скриптах.</description>
    </item>
    
    <item>
      <title>Роли пользователей</title>
      <link>https://developers.devision.io/meta/guides/roles/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://developers.devision.io/meta/guides/roles/</guid>
      <description>Что такое и где используются? Сразу скажем, что это не совсем роли, это скорее что-то вроде списка тегов или аудиторий. Роли используются как обычно для фильтрации доступного функционала.
Они пересчитываются при авторизации и помещаются в env.roles
Чтобы обновить данные по текущему пользователю мы можете использовать код на meta/js:
CurrentUserService.reload(); Чтобы обновить данные по любому пользователю мы можете использовать код на meta/js:
PubSubService.pubReloadUser(userId); Какие бывают Системные роли  meta.role.all - все пользователи - с авторизацией и без meta.</description>
    </item>
    
    <item>
      <title>Типы и атрибуты скриптов</title>
      <link>https://developers.devision.io/meta/guides/script_types/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://developers.devision.io/meta/guides/script_types/</guid>
      <description>Мотивация Скрипты это блоки получения или изменения данных, имеют атрибуты:
 type - определяет тип получения данных: sql, js id - имя данных для меты, используется для последующих обращений к данным. Грубо говоря имя переменной elem-attrs - доп. атрибуты элемента конкретного типа  Атрибуты elem-attrs Конфигурируют элемент, указанный в атрибуте elem. Для каждого elem они могут быть разными - ищите нужную документацию в структуре всех классов.
Чаще всего вы будете использовать атрибуты, указывая их в виде json-обекта как в этом примере:</description>
    </item>
    
    <item>
      <title>Валидация</title>
      <link>https://developers.devision.io/meta/guides/validation/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://developers.devision.io/meta/guides/validation/</guid>
      <description>Простые валидаторы   min (number): для чисел - минимальное число, для строк - минимальная длина строки
  max (number): для чисел - максимальное число, для строк - максимальная длина строки
  required (boolean): для любых элементов, означает обязательность заполнения
  pattern (string): регулярное выражение для текстовых инпутов
  Пример:
{ id: &amp;#34;alias&amp;#34;, span: 6, label: &amp;#34;Альяс&amp;#34;, help: &amp;#34;Текстовая подпись&amp;#34;, name: &amp;#34;me-input&amp;#34;, attrs: { type: &amp;#34;text&amp;#34;, pattern: &amp;#34;[0-9a-z_]+&amp;#34;, min: 0, max: 100 }, } Серверные валидаторы Управляются через параметр refPvmValidator, который является полным аналогом refPvmData, только загружает результаты валидации</description>
    </item>
    
    <item>
      <title>Отслеживание изменений сущностей</title>
      <link>https://developers.devision.io/meta/guides/entity_listeners/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://developers.devision.io/meta/guides/entity_listeners/</guid>
      <description>Мотивация На случай, если при сохранении формы в модальном окне нужно обновить инпуты в родительской форме или обновить список объектов сущности, если вы изменили или добавили новую.
Случай 1 Бывают случаи, когда у вас есть форма создания/редактирования объекта и в ней есть инпут с выбором объекта другого типа. Например: вы добавляете товар и выбираете его категорию, а если категории нет, то вы хотите прямо здесь ее создать.
В этом случае у инпута выбора категории нужно добавить кнопку создания объекта через &amp;ldquo;addObjectButton&amp;rdquo; и добавить прослушку событий по объектам указаного типа через &amp;ldquo;listen&amp;rdquo; чтобы после создания объект появлвлся в выпадающем списке.</description>
    </item>
    
    <item>
      <title>Обработчики событий сущностей</title>
      <link>https://developers.devision.io/meta/guides/entity_handlers/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://developers.devision.io/meta/guides/entity_handlers/</guid>
      <description>Мотивация Часто хочется иметь middleware функцию проверки доступа к конкретному объекту на карточке объекта для того, чтобы не делать проверку доступа на каждой странице сущности.
Для одной entity может быть несколько страниц с Ролью &amp;ldquo;Обработчики событий сущностей&amp;rdquo;, но мета никак не проверяет, что на них есть только один скрипт с нужным вам state (например check_access)
Чтобы сделать обработчик вам нужно:
  Сделать страницы с ролью &amp;ldquo;Обработчики событий сущности&amp;rdquo;
  Сделать скрипт cо state и id равному типу обработчика.</description>
    </item>
    
    <item>
      <title>Типы данных</title>
      <link>https://developers.devision.io/meta/guides/data_types/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://developers.devision.io/meta/guides/data_types/</guid>
      <description>Основные    Тип Описание     UNKNOWN Неизвестный тип, часто бывает текстовым в действительности. Но иногда БД не может отдать тип и мы не рискуем предполагать. В этих случаях используйте type cast средствами БД   BOOLEAN Булев тип (true/false)   TEXT Текстовое поле без существенных ограничений длины.   INT 32х битное целое число. Диапазон от -2,147,483,648 до +2,147,483,647   LONG 64х битное целое число.</description>
    </item>
    
    <item>
      <title>Шаблонизация</title>
      <link>https://developers.devision.io/meta/guides/template_engines/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://developers.devision.io/meta/guides/template_engines/</guid>
      <description>Для шаблонизации используется freemarker.org. Отсутствие переменных при шаблонизации сейчас не является фатальной ошибкой, переменная в такой случае будет заменяться пустой строкой.
Backend шаблонизация Условия do-if Используется для условной фильтрации скриптов и элементов на бекенде. Скрипты не будет исполняться и будет предотвращать отрисовку связанных элементов. Элементы, при установки do-if на них не будут приходить на фронтенд
Пример: https://samples-demo.devision.io/page?p=4551&amp;amp;a=35
&amp;lt;script type=&amp;#34;meta/sql&amp;#34; db-alias=&amp;#34;meta&amp;#34; id=&amp;#34;all_activity&amp;#34; do-if=&amp;#34;env.sp.activity_mode==&amp;#39;all&amp;#39;&amp;#34;&amp;gt; select now() &amp;lt;/script&amp;gt; Функции Пример вызова:
 ${get_bean(String)} - Получение инстанса Java сервиса ${to_json(Object)} - Конвертация объекта в json ${to_date(String)} - Приведение к дате ${pg_quote_literal(String)} - Экранирование строки для PostgreSQL ${pg_quote_ident(String)} - Экранирование идентификатора (имя столбца, таблицы, схемы) для PostgreSQL  Полезно знать!</description>
    </item>
    
    <item>
      <title>Графики</title>
      <link>https://developers.devision.io/meta/guides/charts/</link>
      <pubDate>Mon, 24 Apr 2017 18:36:24 +0200</pubDate>
      
      <guid>https://developers.devision.io/meta/guides/charts/</guid>
      <description>Являются элементами me-chart. Работают на основе google charts. Примеры тут: http://samples-demo.devision.io/page?a=35&amp;amp;p=3623
Ограничения  Поддерживаются не все типы графиков гугла, новый тип нужно прописывать и настраивать в ядре платформы мета. Но есть вариант нативного вывода. Поддерживаются не все параметры графиков. Мета старается выводить графики &amp;ldquo;по-умолчанию&amp;rdquo; более менее приемлимо как может для общего случая.  Однако есть вариант попытаться вывести график полу-нативно:
Нативный вывод &amp;lt;meu-native-google-charts chart=&amp;#39;{ &amp;#34;type&amp;#34;: &amp;#34;OrgChart&amp;#34;, &amp;#34;data&amp;#34;: pvm.data.acl_role1.rows[0].data, &amp;#34;options&amp;#34;: {&amp;#34;width&amp;#34;: &amp;#34;100%&amp;#34;,	&amp;#34;pieHole&amp;#34;: &amp;#34;4/9&amp;#34;, &amp;#34;explorer&amp;#34;:{}, &amp;#34;sliceVisibilityThreshold&amp;#34;: &amp;#34;.</description>
    </item>
    
    <item>
      <title>Кеширование</title>
      <link>https://developers.devision.io/meta/guides/cache/</link>
      <pubDate>Mon, 24 Apr 2017 18:36:24 +0200</pubDate>
      
      <guid>https://developers.devision.io/meta/guides/cache/</guid>
      <description>Многие системы имеют встроенные механизмы кеширование и META не исключение.
В META есть два вида кеша - пользовательский и глобальный.
У скрипта есть два атрибута:
 &amp;ldquo;cache&amp;rdquo; - время жизни кеша в формате 10s - секунды, 10m - минуты, 10h часы. &amp;ldquo;cache-company&amp;rdquo; - добавляется к настройке &amp;ldquo;cache&amp;rdquo; и говорит о том, что кеш не зависит от пользователя, но зависит от env.companyId. Без &amp;ldquo;cache&amp;rdquo; не работает. Не может принимать значения true/false &amp;ldquo;cache-global&amp;rdquo; - добавляется к настройке &amp;ldquo;cache&amp;rdquo; и говорит о том, что кеш глобальный и не зависит от пользователя.</description>
    </item>
    
    <item>
      <title>Отладка и Логирование</title>
      <link>https://developers.devision.io/meta/guides/debug_and_logging/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://developers.devision.io/meta/guides/debug_and_logging/</guid>
      <description>Отладка асинхронных запросов Раздел касается низкоуровневой отладки любых http-запросов на бекенд:
 от refPvmData от refPvmValidators refPvmData + depends и т.д. По сути везде, где данные передаются на бекенд или принимаются с него  Для этого рекомендуется использовать отладчик браузера, например Chrome, смотреть вкладку с запросами по сети и фильтровать данные по нужной вам странице.
Более поробное описание процесса с примерами в этом видео:
  Логирование Логирование доступно в meta/js скриптах.</description>
    </item>
    
    <item>
      <title>Ссылки: Построение URL</title>
      <link>https://developers.devision.io/meta/guides/build_url/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://developers.devision.io/meta/guides/build_url/</guid>
      <description>При программировании в Мете во всех случаях стройте ссылки стандартными функциями, всегда стройте относительные ссылки (без имени домена).
Параметры URL  a - applicationId p - pageId e - entityId. ID типа сущности. o - objectId. PrimaryKey в таблице сущности env - environment params. JSON закодированный в base64 Тут все фильтры, сортировки и пр.  Стандартные механизмы В мете уже есть стандартные средства генерации url на карточку объекта или на обычную страницу.</description>
    </item>
    
    <item>
      <title>Тестирование</title>
      <link>https://developers.devision.io/meta/guides/testing/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://developers.devision.io/meta/guides/testing/</guid>
      <description>Для того, чтобы на локальной мете можно было войти из под какого-то юзера или запустить тестирование сделана возможность просто указать user_id из-под которого нужно далать авторизоваться&amp;amp;
http://localhost:9999/?local_auth_user_id=XXX где XXX - user_id Это работает только на тех сборках, где в глобальном конфиге указан isDevMode: true
isDevMode: true &amp;lt;------------- Это нелья устанавливать в Production окружении isFetchDbsFromApi: true name: dev ..... </description>
    </item>
    
    <item>
      <title>Интернационализация (i18n)</title>
      <link>https://developers.devision.io/meta/guides/i18n/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://developers.devision.io/meta/guides/i18n/</guid>
      <description>Для того, чтобы начать переводить нужно:
 добавить новые компоненты в таблицу meta.component, если текущих вам недостаточно. Не забудьте указать языки для перевода в поле i18n_langs разметить страницы копонентами в настройках старниц в app-content запустить i18n-app.py и собрать данные на перевод. если есть новые компоненты entity надо поместить в папку entity в компоненте  i18n-app.py отпарсит контент мета-страниц на наличие размерки перевода, а так же обойдет entity в app-content и соберет данные на перевод.</description>
    </item>
    
    <item>
      <title>Именование сущностей в БД</title>
      <link>https://developers.devision.io/meta/guides/db_naming/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://developers.devision.io/meta/guides/db_naming/</guid>
      <description>При разработке новой БД предлагается придерживаться следующих правил. При этом, если у вас есть готовая БД, то вы не должны хотеть полностью переделать ее соглашения, так как это бесполезная работа. Просто продолжайте использовать то, что у вас есть.
 Все таблицы должны иметь несоставной первичный ключ, который должен называться id Все таблицы, представления, функции, триггерные функции и типы должны иметь комментарий Поля таблиц и view должны иметь комментарий. Исключения: поля с внешними ключами, общепонятные поля (первичный ключ, views, clicks, name, title и т.</description>
    </item>
    
  </channel>
</rss>
