<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>META on META | Devision Developers</title>
    <link>https://developers.devision.io/meta/</link>
    <description>Recent content in META on META | Devision Developers</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ru-ru</language>
    <lastBuildDate>Mon, 24 Apr 2017 18:36:24 +0200</lastBuildDate><atom:link href="https://developers.devision.io/meta/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Жизненный цикл запроса</title>
      <link>https://developers.devision.io/meta/guides/request_life_cycle/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://developers.devision.io/meta/guides/request_life_cycle/</guid>
      <description>Введение Окружение запроса  env - объект-окружение запроса к серверу. vm - объект для удобной работы с ответом клиенту. На лего странцах отдельный vm на каждый script. pvm - только на LEGO-страницах. Отвечает за хранение данных на всех странце, содержит в себе vm script. DataResult - низкоуровневый класс, отвечающий за ответ с данными по EntityPage. Его нельзя получить так как он никуда не передается, существует вне script - над ним. Создается вручную при необходимости только в meta/js скриптах.</description>
    </item>
    
    <item>
      <title>Роли пользователей</title>
      <link>https://developers.devision.io/meta/guides/roles/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://developers.devision.io/meta/guides/roles/</guid>
      <description>Что такое и где используются? Сразу скажем, что это не совсем роли, это скорее что-то вроде списка тегов или аудиторий. Роли используются как обычно для фильтрации доступного функционала.
Они пересчитываются при авторизации и помещаются в env.roles
Чтобы обновить данные по текущему пользователю мы можете использовать код на meta/js:
CurrentUserService.reload(); Чтобы обновить данные по любому пользователю мы можете использовать код на meta/js:
PubSubService.pubReloadUser(userId); Какие бывают Системные роли  meta.role.all - все пользователи - с авторизацией и без meta.</description>
    </item>
    
    <item>
      <title>Типы и атрибуты скриптов</title>
      <link>https://developers.devision.io/meta/guides/script_types/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://developers.devision.io/meta/guides/script_types/</guid>
      <description>Мотивация Скрипты это блоки получения или изменения данных, имеют атрибуты:
 type - определяет тип получения данных: sql, js id - имя данных для меты, используется для последующих обращений к данным. Грубо говоря имя переменной elem-attrs - доп. атрибуты элемента конкретного типа  Атрибуты elem-attrs Конфигурируют элемент, указанный в атрибуте elem. Для каждого elem они могут быть разными - ищите нужную документацию в структуре всех классов.
Чаще всего вы будете использовать атрибуты, указывая их в виде json-обекта как в этом примере:</description>
    </item>
    
    <item>
      <title>Billing</title>
      <link>https://developers.devision.io/meta/integrations/billing/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://developers.devision.io/meta/integrations/billing/</guid>
      <description>Java API
Example
&amp;lt;elem states=&amp;#34;default&amp;#34;&amp;gt; &amp;lt;tpl&amp;gt; &amp;lt;p&amp;gt; BillingService нужен для накладывания ограничений на доступный функционал &amp;lt;/p&amp;gt; &amp;lt;p class=&amp;#34;text-warning&amp;#34;&amp;gt; Для просмотра логов откройте chrome devtools console и включили dev mode в мете. &amp;lt;/p&amp;gt; &amp;lt;a ng-click=&amp;#34;changeState(&amp;#39;test_in_js&amp;#39;, {})&amp;#34; href&amp;gt;Go To JS&amp;lt;/a&amp;gt; &amp;lt;/tpl&amp;gt; &amp;lt;/elem&amp;gt; &amp;lt;script type=&amp;#34;meta/js&amp;#34; id=&amp;#34;ex0&amp;#34; states=&amp;#34;test_in_js&amp;#34;&amp;gt; function main(log) { log.info(&amp;#39;ex0 выполняется в любом случае, так как он перед проверкой по биллингу&amp;#39;); } &amp;lt;/script&amp;gt; &amp;lt;script type=&amp;#34;meta/js&amp;#34; id=&amp;#34;ex1&amp;#34; states=&amp;#34;test_in_js&amp;#34;&amp;gt; function main(log, env, vm, pvm, BillingService) { log.</description>
    </item>
    
    <item>
      <title>ApiClientService</title>
      <link>https://developers.devision.io/meta/integrations/api_client/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://developers.devision.io/meta/integrations/api_client/</guid>
      <description>Если вы хотите работать со внутренними api Прямо из META
&amp;lt;script id=&amp;#34;res&amp;#34; type=&amp;#34;meta/js&amp;#34;&amp;gt; function main(ApiClientService, vm) { var apiclient = ApiClientService.buildClient(&amp;#34;accountmanagement&amp;#34;, &amp;#34;v1beta1&amp;#34;, env.userId, [&amp;#34;meta.dev&amp;#34;]); vm.data = apiclient.request(&amp;#34;POST&amp;#34;, &amp;#34;budget-order/get&amp;#34;, { &amp;#34;access_scope&amp;#34;: { &amp;#34;client_id&amp;#34;: &amp;#34;28&amp;#34;, &amp;#34;agency_account&amp;#34;: &amp;#34;larisoll2323@gmail.com&amp;#34;, &amp;#34;operation_id&amp;#34;: MetaUtils.uuid.randomUUID() }, &amp;#34;engine&amp;#34;: &amp;#34;GOOGLE_ADS&amp;#34;, &amp;#34;account&amp;#34;: &amp;#34;9012273876&amp;#34; }).getMap(); // or .getObject() // or.getList() } &amp;lt;/script&amp;gt; &amp;lt;elem&amp;gt; &amp;lt;tpl&amp;gt; {{res|json}} &amp;lt;/tpl&amp;gt; &amp;lt;/elem&amp;gt; </description>
    </item>
    
    <item>
      <title>App</title>
      <link>https://developers.devision.io/meta/configs/capp/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://developers.devision.io/meta/configs/capp/</guid>
      <description>Конфигурация приложений Конфигурация приложений расположена в файле apps.yaml в корне app-content.
Файл содержит в себе структуру:
apps: - id: string # ID приложения name: string # Имя приложения. Выводится везде для всех alias: string # для тикетов и мета страницы и для фидов description: string # Для вывода разработчикам category: string # Название категории для разработчиков site_url: string # Для редиректа на логин, скачивание файлов и пр. favicon_url: string # Ссылка на favicon picture_url: string # Основная нормальная иконка приложения middle_picture_url: string # Если указано - выводится на иконке внутри приложения, если нет - то picture_url login_picture_url: string # Если указано - выводится на форме логина, если нет - то picture_url help_url: string # Ссылка на хелп в приложении is_join_user_enabled: string # Можно ли зарегистрироваться через это приложение is_fast_google_auth_enabled: string # Включена ли функция быстрого входа через Google - https://developers.</description>
    </item>
    
    <item>
      <title>DataDiffService</title>
      <link>https://developers.devision.io/meta/work_with_data/datadiff/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://developers.devision.io/meta/work_with_data/datadiff/</guid>
      <description>Мотивация Сервис по вычислению разницы между двумя DataResult. В 99% случаев работает сравнимо по скорости с вариантами сравнения сложных данных через запрос в БД, но при этом код сравнения на порядок проще, чем тоже самое на SQL.
Пример использования: https://samples-demo.devision.io/page?p=4363&amp;amp;a=35</description>
    </item>
    
    <item>
      <title>DataTransformService</title>
      <link>https://developers.devision.io/meta/work_with_data/datatransform/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://developers.devision.io/meta/work_with_data/datatransform/</guid>
      <description>Мотивация Когда надо выбрать много данных один раз и потом немного доагрегировать в разных плоскостях и пофильтровать, например для графиков или дашбордах данных из bigquery.
Пример использования: https://samples-demo.devision.io/page?p=4959&amp;amp;a=35
Принципиально все достаточно просто - у вас есть DataResult и вы хотите его перегруппировать. Для этого сперва получаем данные, например sql запросом в скрипте res, а потом в отдельном meta/js скрипте делаем вызов DataTransformService.pivot с необходимыми параметрами.
&amp;lt;script type=&amp;#34;meta/sql&amp;#34; db-alias=&amp;#34;meta_samples&amp;#34; id=&amp;#34;res&amp;#34; entity-id=&amp;#34;2629&amp;#34; label=&amp;#34;Исходные данные.</description>
    </item>
    
    <item>
      <title>Google Analytics</title>
      <link>https://developers.devision.io/meta/integrations/google_analytics/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://developers.devision.io/meta/integrations/google_analytics/</guid>
      <description>Google Analytics уже глубоко интегрирован в платформу и многие нужные вам события с интерфейса и backend зачастую автоматически будут поступать в GA.
Автоматически собираемые действия  Открытия страниц Открытие модальных окон (в т.ч. sidenav) Регистрация События ADD из ObjectLogService Клик на кнопку добавление объекта в me-select Выбор пункта меню в me-input type=menu-btn  Отправка событий через Measurement Protocol В скриптах meta/js или meta/sql (с помощью шаблонизатора) вы можете отправлять нужные вам события в GA.</description>
    </item>
    
    <item>
      <title>Google Sheets</title>
      <link>https://developers.devision.io/meta/work_with_data/google_sheets/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://developers.devision.io/meta/work_with_data/google_sheets/</guid>
      <description>Мотивация Иногда пользователи хотят управлять отчетами через интеграцию с Google Sheets
Документация по query language: https://developers.google.com/chart/interactive/docs/querylanguage#language-clauses
Административные настройки сервера Для того, чтобы это заработало в основном конфигурационном файле меты должен быть заполнен блок googleShareAccount, где нужно вписать google service account настройки из формата json в формате yaml. После указания ваши пользователи смогут расшаривать файлы на ваш сервисный аккаунт и мета будет получать к ним доступ.
например у нас это аккаунт - robot-valera@devision-io.</description>
    </item>
    
    <item>
      <title>Валидация</title>
      <link>https://developers.devision.io/meta/guides/validation/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://developers.devision.io/meta/guides/validation/</guid>
      <description>Простые валидаторы   min (number): для чисел - минимальное число, для строк - минимальная длина строки
  max (number): для чисел - максимальное число, для строк - максимальная длина строки
  required (boolean): для любых элементов, означает обязательность заполнения
  pattern (string): регулярное выражение для текстовых инпутов
  Пример:
{ id: &amp;#34;alias&amp;#34;, span: 6, label: &amp;#34;Альяс&amp;#34;, help: &amp;#34;Текстовая подпись&amp;#34;, name: &amp;#34;me-input&amp;#34;, attrs: { type: &amp;#34;text&amp;#34;, pattern: &amp;#34;[0-9a-z_]+&amp;#34;, min: 0, max: 100 }, } Серверные валидаторы Управляются через параметр refPvmValidator, который является полным аналогом refPvmData, только загружает результаты валидации</description>
    </item>
    
    <item>
      <title>Отслеживание изменений сущностей</title>
      <link>https://developers.devision.io/meta/guides/entity_listeners/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://developers.devision.io/meta/guides/entity_listeners/</guid>
      <description>Мотивация На случай, если при сохранении формы в модальном окне нужно обновить инпуты в родительской форме или обновить список объектов сущности, если вы изменили или добавили новую.
Случай 1 Бывают случаи, когда у вас есть форма создания/редактирования объекта и в ней есть инпут с выбором объекта другого типа. Например: вы добавляете товар и выбираете его категорию, а если категории нет, то вы хотите прямо здесь ее создать.
В этом случае у инпута выбора категории нужно добавить кнопку создания объекта через &amp;ldquo;addObjectButton&amp;rdquo; и добавить прослушку событий по объектам указаного типа через &amp;ldquo;listen&amp;rdquo; чтобы после создания объект появлвлся в выпадающем списке.</description>
    </item>
    
    <item>
      <title>Обработчики событий сущностей</title>
      <link>https://developers.devision.io/meta/guides/entity_handlers/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://developers.devision.io/meta/guides/entity_handlers/</guid>
      <description>Мотивация Часто хочется иметь middleware функцию проверки доступа к конкретному объекту на карточке объекта для того, чтобы не делать проверку доступа на каждой странице сущности.
Для одной entity может быть несколько страниц с Ролью &amp;ldquo;Обработчики событий сущностей&amp;rdquo;, но мета никак не проверяет, что на них есть только один скрипт с нужным вам state (например check_access)
Чтобы сделать обработчик вам нужно:
  Сделать страницы с ролью &amp;ldquo;Обработчики событий сущности&amp;rdquo;
  Сделать скрипт cо state и id равному типу обработчика.</description>
    </item>
    
    <item>
      <title>Типы данных</title>
      <link>https://developers.devision.io/meta/guides/data_types/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://developers.devision.io/meta/guides/data_types/</guid>
      <description>Основные    Тип Описание     UNKNOWN Неизвестный тип, часто бывает текстовым в действительности. Но иногда БД не может отдать тип и мы не рискуем предполагать. В этих случаях используйте type cast средствами БД   BOOLEAN Булев тип (true/false)   TEXT Текстовое поле без существенных ограничений длины.   INT 32х битное целое число. Диапазон от -2,147,483,648 до +2,147,483,647   LONG 64х битное целое число.</description>
    </item>
    
    <item>
      <title>OAuth</title>
      <link>https://developers.devision.io/meta/compoments/oauth/</link>
      <pubDate>Mon, 24 Apr 2017 18:36:24 +0200</pubDate>
      
      <guid>https://developers.devision.io/meta/compoments/oauth/</guid>
      <description>Области действия для API (Scopes) Придумывая скоупы для сервисов идитие от общего к частному и не создавайте больше необходимого. Скорее всего достаточно будет начать со скоупа полного доступа к сервису, потом, если и когда понадобится - до ьавить доступ только на чтение.</description>
    </item>
    
    <item>
      <title>Шина событий</title>
      <link>https://developers.devision.io/meta/compoments/event_bus/</link>
      <pubDate>Mon, 24 Apr 2017 18:36:24 +0200</pubDate>
      
      <guid>https://developers.devision.io/meta/compoments/event_bus/</guid>
      <description>Мотивация Нужно стремится делать компоненты системы масимально независимыми от бизнес-логики.
Идеально, если при сохранении чего-то смотреть изменившиеся поля и понимать что именно надо выполнить по бизнес-процессу, если, например изменился только статус объекта, однако пока что это невозможно. Однако мы хотели сделать возможность подписываться на изменения объектов, чтобы не добавлять логику оповещения внутренних подсистем предприятия прямо в код страниц META.
Пример: на карточке клиента при сохранении списка главных пользователей клиента надо записывать изменения в сторонюю CRM.</description>
    </item>
    
    <item>
      <title>Медиаданные</title>
      <link>https://developers.devision.io/meta/compoments/media/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://developers.devision.io/meta/compoments/media/</guid>
      <description>Что такое и где используются? Контент любых файлов как правило плохо хранить прямо в базе данных, так как это вызывает дополнительную нагрузку на хранение, репликацию, очистку, vacuum (для postgres), выборку данных (если у вас БД не с колоночным хранением).
Поэтому в мете есть специальное API для работы с файлами. По сути вся работа сводится к тому, чтобы на интерфейсе через форму или на сервере через metasdk загрузить данные, а потом на интерфейсе их показать или получить на бекенде.</description>
    </item>
    
    <item>
      <title>Шаблонизация</title>
      <link>https://developers.devision.io/meta/guides/template_engines/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://developers.devision.io/meta/guides/template_engines/</guid>
      <description>Для шаблонизации используется freemarker.org. Отсутствие переменных при шаблонизации сейчас не является фатальной ошибкой, переменная в такой случае будет заменяться пустой строкой.
Backend шаблонизация Условия do-if Используется для условной фильтрации скриптов и элементов на бекенде. Скрипты не будет исполняться и будет предотвращать отрисовку связанных элементов. Элементы, при установки do-if на них не будут приходить на фронтенд
Пример: https://samples-demo.devision.io/page?p=4551&amp;amp;a=35
&amp;lt;script type=&amp;#34;meta/sql&amp;#34; db-alias=&amp;#34;meta&amp;#34; id=&amp;#34;all_activity&amp;#34; do-if=&amp;#34;env.sp.activity_mode==&amp;#39;all&amp;#39;&amp;#34;&amp;gt; select now() &amp;lt;/script&amp;gt; Функции Пример вызова:
 ${get_bean(String)} - Получение инстанса Java сервиса ${to_json(Object)} - Конвертация объекта в json ${to_date(String)} - Приведение к дате ${pg_quote_literal(String)} - Экранирование строки для PostgreSQL ${pg_quote_ident(String)} - Экранирование идентификатора (имя столбца, таблицы, схемы) для PostgreSQL  Полезно знать!</description>
    </item>
    
    <item>
      <title>Графики</title>
      <link>https://developers.devision.io/meta/guides/charts/</link>
      <pubDate>Mon, 24 Apr 2017 18:36:24 +0200</pubDate>
      
      <guid>https://developers.devision.io/meta/guides/charts/</guid>
      <description>Являются элементами me-chart. Работают на основе google charts. Примеры тут: http://samples-demo.devision.io/page?a=35&amp;amp;p=3623
Ограничения  Поддерживаются не все типы графиков гугла, новый тип нужно прописывать и настраивать в ядре платформы мета. Но есть вариант нативного вывода. Поддерживаются не все параметры графиков. Мета старается выводить графики &amp;ldquo;по-умолчанию&amp;rdquo; более менее приемлимо как может для общего случая.  Однако есть вариант попытаться вывести график полу-нативно:
Нативный вывод &amp;lt;meu-native-google-charts chart=&amp;#39;{ &amp;#34;type&amp;#34;: &amp;#34;OrgChart&amp;#34;, &amp;#34;data&amp;#34;: pvm.data.acl_role1.rows[0].data, &amp;#34;options&amp;#34;: {&amp;#34;width&amp;#34;: &amp;#34;100%&amp;#34;,	&amp;#34;pieHole&amp;#34;: &amp;#34;4/9&amp;#34;, &amp;#34;explorer&amp;#34;:{}, &amp;#34;sliceVisibilityThreshold&amp;#34;: &amp;#34;.</description>
    </item>
    
    <item>
      <title>Кеширование</title>
      <link>https://developers.devision.io/meta/guides/cache/</link>
      <pubDate>Mon, 24 Apr 2017 18:36:24 +0200</pubDate>
      
      <guid>https://developers.devision.io/meta/guides/cache/</guid>
      <description>Многие системы имеют встроенные механизмы кеширование и META не исключение.
В META есть два вида кеша - пользовательский и глобальный.
У скрипта есть два атрибута:
 &amp;ldquo;cache&amp;rdquo; - время жизни кеша в формате 10s - секунды, 10m - минуты, 10h часы. &amp;ldquo;cache-company&amp;rdquo; - добавляется к настройке &amp;ldquo;cache&amp;rdquo; и говорит о том, что кеш не зависит от пользователя, но зависит от env.companyId. Без &amp;ldquo;cache&amp;rdquo; не работает. Не может принимать значения true/false &amp;ldquo;cache-global&amp;rdquo; - добавляется к настройке &amp;ldquo;cache&amp;rdquo; и говорит о том, что кеш глобальный и не зависит от пользователя.</description>
    </item>
    
    <item>
      <title>Вход через META</title>
      <link>https://developers.devision.io/meta/integrations/login_with_meta/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://developers.devision.io/meta/integrations/login_with_meta/</guid>
      <description>Приложение запрашивает код Получение токена в обмен на код, извлеченный из URL:
 Приложение направляет пользователя на страницу META.OAuth, где он может разрешить доступ к своим данным. Пользователь разрешает доступ приложению. META.OAuth перенаправляет пользователя на адрес, указанный в поле Callback URL при регистрации приложения. Код подтверждения (или описание ошибки) передается в параметре URL перенаправления. Приложение получает адрес перенаправления и извлекает код подтверждения. Приложение отправляет POST-запрос с кодом. META.OAuth возвращает токен или ошибку в теле ответа.</description>
    </item>
    
    <item>
      <title>Отладка и Логирование</title>
      <link>https://developers.devision.io/meta/guides/debug_and_logging/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://developers.devision.io/meta/guides/debug_and_logging/</guid>
      <description>Отладка асинхронных запросов Раздел касается низкоуровневой отладки любых http-запросов на бекенд:
 от refPvmData от refPvmValidators refPvmData + depends и т.д. По сути везде, где данные передаются на бекенд или принимаются с него  Для этого рекомендуется использовать отладчик браузера, например Chrome, смотреть вкладку с запросами по сети и фильтровать данные по нужной вам странице.
Более поробное описание процесса с примерами в этом видео:
  Логирование Логирование доступно в meta/js скриптах.</description>
    </item>
    
    <item>
      <title>Ссылки: Построение URL</title>
      <link>https://developers.devision.io/meta/guides/build_url/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://developers.devision.io/meta/guides/build_url/</guid>
      <description>При программировании в Мете во всех случаях стройте ссылки стандартными функциями, всегда стройте относительные ссылки (без имени домена).
Параметры URL  a - applicationId p - pageId e - entityId. ID типа сущности. o - objectId. PrimaryKey в таблице сущности env - environment params. JSON закодированный в base64 Тут все фильтры, сортировки и пр.  Стандартные механизмы В мете уже есть стандартные средства генерации url на карточку объекта или на обычную страницу.</description>
    </item>
    
    <item>
      <title>Простейший отчет с фильтрами</title>
      <link>https://developers.devision.io/meta/samples/pages/report_with_filters/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://developers.devision.io/meta/samples/pages/report_with_filters/</guid>
      <description>Типичная задача META - вывод списка объектов в виде отчета с фильтрами.
Обычно отчет представляет из себя одну таблицу с фильтрами. Script id такой основной таблицы рекомендуется называть &amp;ldquo;res&amp;rdquo;, чтобы другим разработчикам было привычнее читать ваш код.
Код примера &amp;lt;!-- Фильтрация Атрибут page-search объединяет эти фильтры в общий блок пресетов. Это позволяет пользователю быстрее находить фильтры и сохранять пресеты фильтров --&amp;gt; &amp;lt;script type=&amp;#34;meta/sql&amp;#34; db-alias=&amp;#34;meta_samples&amp;#34; label=&amp;#34;Организация&amp;#34; id=&amp;#34;org_ids&amp;#34; elem=&amp;#34;me-select&amp;#34; order=&amp;#34;1&amp;#34; span=&amp;#34;4&amp;#34; elem-attrs=&amp;#39;{&amp;#34;multiple&amp;#34;:true}&amp;#39; page-search&amp;gt; SELECT &amp;#34;organizationId&amp;#34; as id, name as name FROM &amp;#34;organization&amp;#34; order by name &amp;lt;/script&amp;gt; &amp;lt;script type=&amp;#34;meta/sql&amp;#34; db-alias=&amp;#34;meta_samples&amp;#34; label=&amp;#34;Статус&amp;#34; id=&amp;#34;active_mode&amp;#34; elem=&amp;#34;me-select&amp;#34; default=&amp;#34;all&amp;#34; order=&amp;#34;1&amp;#34; span=&amp;#34;4&amp;#34; page-search&amp;gt; SELECT t.</description>
    </item>
    
    <item>
      <title>Список и редактирование сущности</title>
      <link>https://developers.devision.io/meta/samples/pages/simple_entity/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://developers.devision.io/meta/samples/pages/simple_entity/</guid>
      <description>Смарт-формы Обратите внимание, что скорее всего вам будет достаточно функционала Смарт-форм.
Но если вам по какой-то причине не хватает их функционала, можно использовать более старый подход, с гораздо большим количеством кода, но и с большей функциональностью.
Общее Для начала ознакомьтесь со статьей Жизненный цикл запроса
Типичная задача META - вывод списка объектов и их редактирование
Регистрация Entity Чтобы начать работать с новой сущностью добавьте ее в репозиторий META AppContent. В списке полей обычно достаточно указать primary key и поле, которе будет считаться именем объекта сущности.</description>
    </item>
    
    <item>
      <title>Язык запросов META (METAQL)</title>
      <link>https://developers.devision.io/meta/work_with_data/metaql/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://developers.devision.io/meta/work_with_data/metaql/</guid>
      <description>METAQL - Это защищенный SQL для запросов к данным меты. Основан на синтаксисах Oracle + PostgreSQL. Призван дать хороший и безопасный API к данным таблиц или views ваших БД.
Особенности  SELECT * FROM ... не поддерживается Нельзя называть поля или алясы зарезарвированными именами: date Добавлен оператор ILIKE для регистронезависимного сравнения строк Поддерживаются только SELECT запросы JOIN не поддерживаются Работает ограниченный набор функций, описанных ниже OR в условиях не поддерживается. Используется AND с отицанием или IN ( &amp;hellip; )  Функции Работают функции агрегации:</description>
    </item>
    
    <item>
      <title>Тестирование</title>
      <link>https://developers.devision.io/meta/guides/testing/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://developers.devision.io/meta/guides/testing/</guid>
      <description>Для того, чтобы на локальной мете можно было войти из под какого-то юзера или запустить тестирование сделана возможность просто указать user_id из-под которого нужно далать авторизоваться&amp;amp;
http://localhost:9999/?local_auth_user_id=XXX где XXX - user_id Это работает только на тех сборках, где в глобальном конфиге указан isDevMode: true
isDevMode: true &amp;lt;------------- Это нелья устанавливать в Production окружении isFetchDbsFromApi: true name: dev ..... </description>
    </item>
    
    <item>
      <title>Интернационализация (i18n)</title>
      <link>https://developers.devision.io/meta/guides/i18n/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://developers.devision.io/meta/guides/i18n/</guid>
      <description>Для того, чтобы начать переводить нужно:
 добавить новые компоненты в таблицу meta.component, если текущих вам недостаточно. Не забудьте указать языки для перевода в поле i18n_langs разметить страницы копонентами в настройках старниц в app-content запустить i18n-app.py и собрать данные на перевод. если есть новые компоненты entity надо поместить в папку entity в компоненте  i18n-app.py отпарсит контент мета-страниц на наличие размерки перевода, а так же обойдет entity в app-content и соберет данные на перевод.</description>
    </item>
    
    <item>
      <title>Embedded Frames</title>
      <link>https://developers.devision.io/meta/integrations/embedded_frames/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://developers.devision.io/meta/integrations/embedded_frames/</guid>
      <description>Пример на основе интеграции старого Garpun в новое META-приложение
В Garpun мы разместили код
&amp;lt;script type=&amp;#34;text/javascript&amp;#34;&amp;gt; function inIframe() { try { return window.self !== window.top; } catch (e) { return true; } } document.addEventListener(&amp;#34;DOMContentLoaded&amp;#34;, function () { if (inIframe()) { // Это мы использовали чтобы убрать ненужные кнопки  document.body.classList.add(&amp;#34;garpunEmbedded&amp;#34;); } document.body.classList.remove(&amp;#34;garpunLoading&amp;#34;); }); //  (metaframewatcher = window.metaframewatcher || []).push({ height_classes: [&amp;#39;t_window&amp;#39;, &amp;#39;cover&amp;#39;, &amp;#39;stickyWrap&amp;#39;, &amp;#39;mainBox&amp;#39;] }); if (inIframe()) { // Это не относится к задаче встраивания напрямую, но наверняка будет полезно для GTM для отключения виджетов поддержки и пр  window[&amp;#39;IS_EMBED_MODE&amp;#39;] = true; // Размещаем загрузки интеграционного скрипта  (function() { var lt = document.</description>
    </item>
    
    <item>
      <title>Nginx Proxy Headers</title>
      <link>https://developers.devision.io/meta/integrations/nginx/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://developers.devision.io/meta/integrations/nginx/</guid>
      <description>Настраиваются на nginx при проксировании запосов в Java приложение, или через Chrome плагин ModHeader (https://chrome.google.com/webstore/detail/modheader/idgpnmonknjnojddfkpgkljpfnnfcklj) для разработки
X-META-AppID Говорит о том, что МЕТА должна отвечать пользователю как конкретное приложение с установленным лого, css и пр
server { listen *:80; server_name example.com; charset utf8; location / { proxy_set_header Host $host; proxy_set_header X-Real-IP $remote_addr; proxy_set_header X-META-AppID 3; proxy_pass http://127.0.0.1:8083; } } X-META-Allowed-Apps Говорит о том, что МЕТА должна отвечать пользователю как конкретное приложение с установленным лого, css и пр Отличается от HEADER_X_META_APP_ID тем, что это будет работать как просто meta.</description>
    </item>
    
    <item>
      <title>SDK</title>
      <link>https://developers.devision.io/meta/integrations/sdk/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://developers.devision.io/meta/integrations/sdk/</guid>
      <description>Существует официальная библиотека для работу с метой на Python3
Исходники
Документация</description>
    </item>
    
    <item>
      <title>Именование сущностей в БД</title>
      <link>https://developers.devision.io/meta/guides/db_naming/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://developers.devision.io/meta/guides/db_naming/</guid>
      <description>При разработке новой БД предлагается придерживаться следующих правил. При этом, если у вас есть готовая БД, то вы не должны хотеть полностью переделать ее соглашения, так как это бесполезная работа. Просто продолжайте использовать то, что у вас есть.
 Все таблицы должны иметь несоставной первичный ключ, который должен называться id Все таблицы, представления, функции, триггерные функции и типы должны иметь комментарий Поля таблиц и view должны иметь комментарий. Исключения: поля с внешними ключами, общепонятные поля (первичный ключ, views, clicks, name, title и т.</description>
    </item>
    
    <item>
      <title>Открытие модального окна</title>
      <link>https://developers.devision.io/meta/samples/pages/open_modal/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://developers.devision.io/meta/samples/pages/open_modal/</guid>
      <description>В таблице списке объектов сущности вывести страницу в контекстное меню Например у вас есть список пользователей и на карточке пользователя есть страница проектов, доступных пользователю.
 Включите режим разработчика, если он не ключен Зайдите на интресующую вас страницу Откройте меню радактирования настроек приложения в поле &amp;ldquo;Вид в контекстном меню&amp;rdquo; выберите &amp;ldquo;Модальное окно&amp;rdquo; или &amp;ldquo;Выезжающее справа окно&amp;rdquo; Сохраните Сбросьте кеш меты Обновите страницу через F5  Пример такой страницы: https://samples-demo.devision.io/card?e=example_entity&amp;amp;o=08f3395b-31f2-42c9-917e-a5f2b7bd4a95&amp;amp;p=5183&amp;amp;a=35
На карточке объекта сущности нужно вывести меню действия над объектом Например вы хотите сделать какое-то кастоное действие - выставить счет контагенту, по особенному удалить или что-то другое, не связанное просто с отображением таблиц и другой информации.</description>
    </item>
    
    <item>
      <title>Тикеты</title>
      <link>https://developers.devision.io/meta/compoments/ticket/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://developers.devision.io/meta/compoments/ticket/</guid>
      <description>Таблицы  issue: Непосредственно сами тикеты. Основная таблица issue_entity: Сущности, доступные для выбора &amp;ldquo;категории&amp;rdquo; тикета при создании. Тип объекта, в рамках которого делается тикет. Например тикет может быть по клиенту, медиаплану, сотруднику issue_field: Доп. поля, которые можно навешивать потом на типы тикетов issue_logwork: Трекинг времени по тикетам issue_msg: Комментарии к тикетам, приложенные файлы issue_priority: Справочник приоритетов тикетов issue_status: Справочник статусов тикетов issue_type: Справочник типов тикетов, Тут настраивается доступность типов тикетов для issue_entity, доступность основных или доп полей  Управляющие функции БД Пользовательские функции для изменения бизнес логики отмечены жирным шрифтом.</description>
    </item>
    
    <item>
      <title>Смарт-формы</title>
      <link>https://developers.devision.io/meta/compoments/smart_forms/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://developers.devision.io/meta/compoments/smart_forms/</guid>
      <description>Мотивация Довольно часто нужно нарисовать типовую форму для добавления или редактирования строки таблицы Логированиче через ObjectLogService будет выполнено автоматически, а значит и Шина сможет принять событие, если будет нужно.
Автоматическая генерация формы Форма генерируется по внутреннним правилам, но подвигать контролы можно через их позициии в списке fields в yaml файле или атрибут order, но даже это не гарантирует, что они выстроятся в нужном вам порядке - мета сортирует блоками в соответствии со внутренними правилами.</description>
    </item>
    
    <item>
      <title>header</title>
      <link>https://developers.devision.io/meta/_header/</link>
      <pubDate>Mon, 24 Apr 2017 18:36:24 +0200</pubDate>
      
      <guid>https://developers.devision.io/meta/_header/</guid>
      <description>META</description>
    </item>
    
    <item>
      <title>ApiClientService</title>
      <link>https://developers.devision.io/meta/reference/java_api/apiclientservice/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://developers.devision.io/meta/reference/java_api/apiclientservice/</guid>
      <description>   Метод и описание Возвращаемый тип     buildClient ( apiName: String, apiVersion: String, userId: long, scopes: List) ApiClient   buildClient ( schemaHostPostVersion: String, userId: long, scopes: List) ApiClient    </description>
    </item>
    
    <item>
      <title>BillingService</title>
      <link>https://developers.devision.io/meta/reference/java_api/billingservice/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://developers.devision.io/meta/reference/java_api/billingservice/</guid>
      <description>   Метод и описание Возвращаемый тип     checkAddSkuUsage ( productId: String, skuId: String, plannedAddUsageAmount: long) void   getSkuUsage ( productId: String, skuId: String) UsageRecordCheckResponse   init ( ) void    </description>
    </item>
    
    <item>
      <title>CryptService</title>
      <link>https://developers.devision.io/meta/reference/java_api/cryptservice/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://developers.devision.io/meta/reference/java_api/cryptservice/</guid>
      <description>   Метод и описание Возвращаемый тип     byteToHex ( num: byte) String   checkJWTExpire ( decodedJWT: DecodedJWT) void   decode ( str: String) String   decodeJSONObj ( str: String, clazz: Class) Object   encode ( str: String) String   encode ( str: String, expiresAt: Date) String   encodeHexString ( byteArray: byte[]) String   encodeJSONObj ( obj: Object) String   encodeJSONObj ( obj: Object, validTime: String) String   hMacSha512 ( data: String, secretKey: String) String    </description>
    </item>
    
    <item>
      <title>CurrentUserService</title>
      <link>https://developers.devision.io/meta/reference/java_api/currentuserservice/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://developers.devision.io/meta/reference/java_api/currentuserservice/</guid>
      <description>   Метод и описание Возвращаемый тип     get ( ) MetaUser   getAuthentication ( ) Authentication   getCompanyId ( ) long   getId ( ) long   getIp ( ) String   getLanguage ( ) String   getLanguageId ( ) Integer   hasAuthentication ( ) boolean   hasRole ( role: String) boolean   isAnonymous ( ) boolean   isDebugMode ( ) boolean   isDeveloper ( ) boolean   isNotDeveloper ( ) boolean   reload ( ) void   rememberMe ( ) void   rememberMeIfTokenExistsInUrl ( ) void   setAuthenticate ( user: MetaUser) UsernamePasswordAuthenticationToken   userHasRole ( role: String) boolean    </description>
    </item>
    
    <item>
      <title>DataDiffService</title>
      <link>https://developers.devision.io/meta/reference/java_api/datadiffservice/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://developers.devision.io/meta/reference/java_api/datadiffservice/</guid>
      <description>   Метод и описание Возвращаемый тип     diff ( a: DataResult, b: DataResult, config: ScriptObjectMirror) DataResult   diff ( oldV: DataResult, newV: DataResult, conf: DiffConfig) DataResult    </description>
    </item>
    
    <item>
      <title>DataTransformService</title>
      <link>https://developers.devision.io/meta/reference/java_api/datatransformservice/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://developers.devision.io/meta/reference/java_api/datatransformservice/</guid>
      <description>   Метод и описание Возвращаемый тип     pivot ( in: DataResult, conf: PivotConfig) DataResult   pivot ( in: DataResult, conf: ScriptObjectMirror) DataResult   sum ( o1: Object, o2: Object) Object    </description>
    </item>
    
    <item>
      <title>EntityService</title>
      <link>https://developers.devision.io/meta/reference/java_api/entityservice/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://developers.devision.io/meta/reference/java_api/entityservice/</guid>
      <description>   Метод и описание Возвращаемый тип     buildForm ( entityId: String, entityFields: List, formMode: FormMode, config: SmartFormConfig) LegoElem   getObject ( entityId: String, objectId: String) DataResult    </description>
    </item>
    
    <item>
      <title>GaService</title>
      <link>https://developers.devision.io/meta/reference/java_api/gaservice/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://developers.devision.io/meta/reference/java_api/gaservice/</guid>
      <description>   Метод и описание Возвращаемый тип     eventTrack ( category: String, action: String) void   eventTrack ( category: String, action: String, label: String) void   eventTrack ( category: String, action: String, label: String, value: Long) void   send ( parameters: Map) void    </description>
    </item>
    
    <item>
      <title>HtmlService</title>
      <link>https://developers.devision.io/meta/reference/java_api/htmlservice/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://developers.devision.io/meta/reference/java_api/htmlservice/</guid>
      <description>   Метод и описание Возвращаемый тип     html2text ( html: String) String    </description>
    </item>
    
    <item>
      <title>LegoToMarkdownService</title>
      <link>https://developers.devision.io/meta/reference/java_api/legotomarkdownservice/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://developers.devision.io/meta/reference/java_api/legotomarkdownservice/</guid>
      <description>   Метод и описание Возвращаемый тип     init ( ) void   toMarkdown ( legoForm: Object, formData: Object) String    </description>
    </item>
    
    <item>
      <title>LinkBuildService</title>
      <link>https://developers.devision.io/meta/reference/java_api/linkbuildservice/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://developers.devision.io/meta/reference/java_api/linkbuildservice/</guid>
      <description>   Метод и описание Возвращаемый тип     build ( href: String, content: String) String   getCardFullUrl ( config: CardFullUrlConfig) String   getCardFullUrl ( config: Object) String   getCardFullUrl ( entityId: String, objectId: String, pageId: String) String   getCardFullUrl ( entityId: String, objectId: String, pageId: String, sp: Map) String   getCardFullUrl ( entityId: String, objectId: String, pageId: String, sp: Map, search: Map) String   getFullUrl ( entityId: String, objectId: String, pageId: String) String   getHtmlLink ( content: String, entityId: String, objectId: String) String   getHtmlLink ( content: String, entityId: String, objectId: String, pageId: String) String   getPageFullUrl ( config: Object) String   getPageFullUrl ( config: PageFullUrlConfig) String   getPageFullUrl ( config: ScriptObjectMirror) String   getPageFullUrl ( pageId: String, sp: Map) String   getPageFullUrl ( pageId: String, sp: Map, search: Map) String   getPageFullUrl ( pageId: String, sp: Map, search: ScriptObjectMirror) String    </description>
    </item>
    
    <item>
      <title>MarkdownService</title>
      <link>https://developers.devision.io/meta/reference/java_api/markdownservice/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://developers.devision.io/meta/reference/java_api/markdownservice/</guid>
      <description>   Метод и описание Возвращаемый тип     render ( markdownText: Object) String   render ( markdownText: Object, siteUrl: String) String   render ( markdownText: String) String   render ( markdownText: String, siteUrl: String) String    </description>
    </item>
    
    <item>
      <title>MediaService</title>
      <link>https://developers.devision.io/meta/reference/java_api/mediaservice/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://developers.devision.io/meta/reference/java_api/mediaservice/</guid>
      <description>   Метод и описание Возвращаемый тип     deleteExpired ( env: Env, mediaId: String) void   get ( env: Env, mediaId: String) MediaFile   getDownloadUrlPart ( id: String) String   getFilesBase64ZipArchive ( files: List) String   getViewUrlPart ( id: String) String   persist ( env: Env, fileBase64Content: String, filename: String, extension: String, mime: String, isPrivate: boolean) MediaFile   persist ( env: Env, fileBase64Content: String, filename: String, extension: String, mime: String, isPrivate: boolean, origin: String) MediaFile   persist ( env: Env, fileBase64Content: String, filename: String, extension: String, mime: String, isPrivate: boolean, ttlInSec: long) MediaFile   persist ( env: Env, fileBase64Content: String, filename: String, extension: String, mime: String, isPrivate: boolean, ttlInSec: long, folderId: String) MediaFile   prepareFileName ( env: Env, filename: String) String   sendFileToResponse ( response: HttpServletResponse, media: MediaFile, fname: String, addHeadersForDownload: boolean) void   sendHeaders ( response: HttpServletResponse, contentType: String, fname: String, addHeadersForDownload: boolean) void   upsert ( req: UpsertRequest) MediaFile    </description>
    </item>
    
    <item>
      <title>MetaDatabaseService</title>
      <link>https://developers.devision.io/meta/reference/java_api/metadatabaseservice/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://developers.devision.io/meta/reference/java_api/metadatabaseservice/</guid>
      <description>   Метод и описание Возвращаемый тип     createMetaDataSourceInstance ( db: CDatabase) MetaDataSource   eraseDBPool ( ) void   getAppCacheRedis ( ) RedissonClient   getDatabaseType ( dbAlias: String) DatabaseType   getMDSource ( dbAlias: String) MetaDataSource   getMetaDS ( ) JdbcMetaDataSource   getMetaJdbcTemplate ( ) JdbcTemplate   getRedis ( ) RedissonClient    </description>
    </item>
    
    <item>
      <title>MutateTableService</title>
      <link>https://developers.devision.io/meta/reference/java_api/mutatetableservice/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://developers.devision.io/meta/reference/java_api/mutatetableservice/</guid>
      <description>   Метод и описание Возвращаемый тип     mutate ( mutateJob: MutateJob) void   mutate ( request: MutateJobRequest) MutateJobResponse   mutate ( request: ScriptObjectMirror) MutateJobResponse    </description>
    </item>
    
    <item>
      <title>ObjectLogService</title>
      <link>https://developers.devision.io/meta/reference/java_api/objectlogservice/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://developers.devision.io/meta/reference/java_api/objectlogservice/</guid>
      <description>   Метод и описание Возвращаемый тип     buildLog ( ) Log   coreErrorEventTrack ( action: String, label: String, value: Long) void   coreEventTrack ( action: String, label: String) void   coreEventTrack ( action: String, label: String, value: Long) void   log ( entityId: String, objectId: Object, code: Code) void   log ( entityId: String, objectId: Object, code: String) void   log ( objectLog: Log) void   logValue ( entityId: String, objectId: Object, code: Code, value: Object) void   logValue ( entityId: String, objectId: Object, code: Code, value: Object, form: String) void   logValue ( entityId: String, objectId: Object, code: String, value: Object) void   logValue ( entityId: String, objectId: Object, code: String, value: Object, form: String) void    </description>
    </item>
    
    <item>
      <title>RequestEnvironmentService</title>
      <link>https://developers.devision.io/meta/reference/java_api/requestenvironmentservice/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://developers.devision.io/meta/reference/java_api/requestenvironmentservice/</guid>
      <description>   Метод и описание Возвращаемый тип     canAuthByOAuth ( ) boolean   checkAllowAppForUser ( env: Env) void   currentUser ( ) CurrentUserService   encodeUrl ( url: String) String   encodeUrlPart ( url: String) String   fillRetPath ( ) void   getAllowedApps ( ) Set   getAppHost ( ) String   getAppRealDomainUrl ( appId: String, urlPartPath: String) String   getAppSchemaHost ( ) String   getAppSchemaPort ( ) String   getAppUrl ( urlPartPath: String) String   getCurrentApp ( ) CApp   getCurrentOAuthServer ( ) OAuthServer   getDefaultLanguage ( ) String   getDevRestrictRoles ( ) Set   getEnv ( ) Env   getFullRedirectUrl ( ) String   getFullRequestUrl ( ) String   getHttpMethod ( ) String   getHttpResponseCode ( ) int   getLoginAfterLogout ( ) String   getLoginWithErrorAndRetPathUrl ( error: String) String   getLoginWithRetPathUrl ( ) String   getPubEntityLogs ( ) List   getRemoteId ( ) String   getRequestDispatcher ( ) String   getRequestInfo ( ) RequestInfo   getRetPath ( ) String   getSelfAppId ( ) String   getStrSet ( headerName: String) Set   getTrueLogReferer ( ) String   getUrlWithGA ( path: String) String   getUserAgent ( ) String   getXRequestId ( ) String   hasAllowedApps ( ) boolean   isAjax ( ) boolean   isAjaxRequest ( request: HttpServletRequest) boolean   isAllowLanguage ( lang: String) boolean   isFastGoogleAuthEnabled ( ) boolean   publishLog ( log: PubEntityLog) void   setEnv ( env: Env) void    </description>
    </item>
    
    <item>
      <title>SmartFormService</title>
      <link>https://developers.devision.io/meta/reference/java_api/smartformservice/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://developers.devision.io/meta/reference/java_api/smartformservice/</guid>
      <description>   Метод и описание Возвращаемый тип     handle ( env: Map, originalEnv: Env, vm: ViewModel, pvm: ViewModel) void   handle ( env: Map, originalEnv: Env, vm: ViewModel, pvm: ViewModel, config: ScriptObjectMirror) void   handle ( env: Map, originalEnv: Env, vm: ViewModel, pvm: ViewModel, config: SmartFormConfig) void    </description>
    </item>
    
    <item>
      <title>SmartQueryService</title>
      <link>https://developers.devision.io/meta/reference/java_api/smartqueryservice/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://developers.devision.io/meta/reference/java_api/smartqueryservice/</guid>
      <description>   Метод и описание Возвращаемый тип     extractAndCheckMetrics ( reportConfig: SmartQueryConfig, entityKind: EntityKind) List   generateMetaQLRequest ( config: Config, queryConfig: SmartQueryConfig) String   replaceSqlPlaceholdersToEscapedValues ( queryConfig: SmartQueryConfig, sql: String) String   valueToStrValue ( value: Object) String    </description>
    </item>
    
    <item>
      <title>StarterService</title>
      <link>https://developers.devision.io/meta/reference/java_api/starterservice/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://developers.devision.io/meta/reference/java_api/starterservice/</guid>
      <description>   Метод и описание Возвращаемый тип     addAdvice ( ) void   addAdvice ( ) void   addAdvisor ( ) void   addAdvisor ( ) void   CGLIB$findMethodProxy ( ) MethodProxy   CGLIB$SET_STATIC_CALLBACKS ( ) void   CGLIB$SET_THREAD_CALLBACKS ( ) void   equals ( ) boolean   getAdvisors ( ) Advisor[]   getCallback ( ) Callback   getCallbacks ( ) Callback[]   getProxiedInterfaces ( ) Class[]   getTargetClass ( ) Class   getTargetSource ( ) TargetSource   hashCode ( ) int   indexOf ( ) int   indexOf ( ) int   isExposeProxy ( ) boolean   isFrozen ( ) boolean   isInterfaceProxied ( ) boolean   isPreFiltered ( ) boolean   isProxyTargetClass ( ) boolean   newInstance ( ) Object   newInstance ( ) Object   newInstance ( ) Object   removeAdvice ( ) boolean   removeAdvisor ( ) boolean   removeAdvisor ( ) void   replaceAdvisor ( ) boolean   setCallback ( ) void   setCallbacks ( ) void   setExposeProxy ( ) void   setPreFiltered ( ) void   setTargetSource ( ) void   submit ( ) void   toProxyConfigString ( ) String   toString ( ) String    </description>
    </item>
    
    <item>
      <title>TableColumnService</title>
      <link>https://developers.devision.io/meta/reference/java_api/tablecolumnservice/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://developers.devision.io/meta/reference/java_api/tablecolumnservice/</guid>
      <description>   Метод и описание Возвращаемый тип     buildAggFn ( aggFn: AggFn, expr: String) String   buildFilters ( outputPlaceholderVarName: String, columns: DataResult, data: AdvancedFilterData) GeneratedFilter   buildFilters ( outputPlaceholderVarName: String, columns: DataResult, data: AdvancedFilterData, databaseType: DatabaseType) GeneratedFilter   buildFilters ( outputPlaceholderVarName: String, columns: DataResult, data: Object) GeneratedFilter   buildFilters ( outputPlaceholderVarName: String, columns: DataResult, data: Object, databaseType: String) GeneratedFilter   escapeDivisionByZero ( text: String, escapePrefix: String, escapePostfix: String) String   extractTableParams ( columns: DataResult, dimensions: List, metrics: List) TableSettings   extractTableParams ( headers: List, dimensions: List, metrics: List, entityKind: EntityKind, strict: boolean) TableSettings   getMetricsFromExpr ( in: String) Set    </description>
    </item>
    
    <item>
      <title>TranslateService</title>
      <link>https://developers.devision.io/meta/reference/java_api/translateservice/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://developers.devision.io/meta/reference/java_api/translateservice/</guid>
      <description>   Метод и описание Возвращаемый тип     getAllPlaceholders ( language: String) Map   i18n ( language: String, text: String, args: Object[], defaultText: String) String   i18n ( placeholder: String) String   i18n ( placeholder: String, args: Object[]) String   i18n ( placeholder: String, args: Object[], defaultText: String) String   i18n ( placeholder: String, defaultText: String) String   i18nEntityFieldName ( entityId: String, fieldName: String) String   i18nEntityName ( entity: CEntity) String   i18nEntityName ( entityId: String) String   i18nPageName ( page: CPage, language: String) String   i18nSqlField ( placeholder: String) String   i18nSqlField ( tableAlias: String, placeholder: String) String   i18nSqlField ( tableAlias: String, placeholder: String, lang: String) String    </description>
    </item>
    
    <item>
      <title>UserRecoveryService</title>
      <link>https://developers.devision.io/meta/reference/java_api/userrecoveryservice/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://developers.devision.io/meta/reference/java_api/userrecoveryservice/</guid>
      <description>   Метод и описание Возвращаемый тип     getDoublePasswordHash ( login: String) String   sendNotice ( login: String, appAlias: String, state: String) SendNoticeResponse    </description>
    </item>
    
    <item>
      <title>Элемент me-chart</title>
      <link>https://developers.devision.io/meta/reference/ui_controls/me-chart/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://developers.devision.io/meta/reference/ui_controls/me-chart/</guid>
      <description>Основной и единственный элемент для вывода графиков Работает на Google Charts
@example https://apps.devision.io/page?p=3623&amp;amp;a=35
@link https://developers.google.com/chart/interactive/docs/gallery
Общее Обратите внимание на структуру всех классов
Структура { &amp;#34;__tid&amp;#34;: &amp;#34;(any)&amp;#34;, &amp;#34;align&amp;#34;: &amp;#34;(string)&amp;#34;, &amp;#34;attrs&amp;#34;: { &amp;#34;curved&amp;#34;: &amp;#34;(boolean)&amp;#34;, &amp;#34;dualY&amp;#34;: &amp;#34;(boolean)&amp;#34;, &amp;#34;hAxisMinValue&amp;#34;: &amp;#34;(number)&amp;#34;, &amp;#34;height&amp;#34;: &amp;#34;(string)&amp;#34;, &amp;#34;nativeOptions&amp;#34;: &amp;#34;(any)&amp;#34;, &amp;#34;pieHole&amp;#34;: &amp;#34;(number)&amp;#34;, &amp;#34;sliceVisibilityThreshold&amp;#34;: &amp;#34;(number)&amp;#34;, &amp;#34;stacked&amp;#34;: &amp;#34;(boolean)&amp;#34;, &amp;#34;stretched&amp;#34;: &amp;#34;(boolean)&amp;#34;, &amp;#34;vAxisMinValue&amp;#34;: &amp;#34;(number)&amp;#34;, &amp;#34;vAxisTextPosition&amp;#34;: &amp;#34;(string)&amp;#34;, &amp;#34;zoomButton&amp;#34;: &amp;#34;( none | left )&amp;#34; }, &amp;#34;bindAttrs&amp;#34;: [ { &amp;#34;source&amp;#34;: &amp;#34;(string)&amp;#34;, &amp;#34;target&amp;#34;: &amp;#34;(string)&amp;#34; } ], &amp;#34;defaultValue&amp;#34;: &amp;#34;(any)&amp;#34;, &amp;#34;depends&amp;#34;: [ &amp;#34;(string)&amp;#34; ], &amp;#34;entityId&amp;#34;: &amp;#34;(string)&amp;#34;, &amp;#34;errors&amp;#34;: [ { &amp;#34;id&amp;#34;: &amp;#34;(string)&amp;#34;, &amp;#34;name&amp;#34;: &amp;#34;(string)&amp;#34; } ], &amp;#34;exportable&amp;#34;: &amp;#34;(boolean)&amp;#34;, &amp;#34;formHorizontal&amp;#34;: &amp;#34;(boolean)&amp;#34;, &amp;#34;help&amp;#34;: &amp;#34;(string)&amp;#34;, &amp;#34;icon&amp;#34;: &amp;#34;(string)&amp;#34;, &amp;#34;id&amp;#34;: &amp;#34;(string)&amp;#34;, &amp;#34;inlineForm&amp;#34;: &amp;#34;(boolean)&amp;#34;, &amp;#34;label&amp;#34;: &amp;#34;(string)&amp;#34;, &amp;#34;listen&amp;#34;: [ { &amp;#34;$promise&amp;#34;: &amp;#34;(any)&amp;#34;, &amp;#34;code&amp;#34;: [ &amp;#34;( ADD | SET, REMOVE )&amp;#34; ], &amp;#34;entityId&amp;#34;: &amp;#34;(string)&amp;#34;, &amp;#34;objectId&amp;#34;: &amp;#34;(string)&amp;#34;, &amp;#34;pubSubChannel&amp;#34;: [ &amp;#34;(string)&amp;#34; ], &amp;#34;refreshRefPvmData&amp;#34;: &amp;#34;(any)&amp;#34;, &amp;#34;reload&amp;#34;: &amp;#34;(any)&amp;#34;, &amp;#34;selectAfterAdd&amp;#34;: &amp;#34;(boolean)&amp;#34; } ], &amp;#34;name&amp;#34;: &amp;#34;me-chart&amp;#34;, &amp;#34;offset&amp;#34;: &amp;#34;(number)&amp;#34;, &amp;#34;order&amp;#34;: &amp;#34;(number)&amp;#34;, &amp;#34;persistValueView&amp;#34;: &amp;#34;(boolean)&amp;#34;, &amp;#34;refPvmData&amp;#34;: { &amp;#34;additionalPartialLoad&amp;#34;: [ &amp;#34;(string)&amp;#34; ], &amp;#34;dataId&amp;#34;: &amp;#34;(string)&amp;#34;, &amp;#34;id&amp;#34;: &amp;#34;(string)&amp;#34;, &amp;#34;spQueryDepends&amp;#34;: [ &amp;#34;(string)&amp;#34; ], &amp;#34;waitingId&amp;#34;: &amp;#34;(string)&amp;#34; }, &amp;#34;refPvmValidator&amp;#34;: { &amp;#34;additionalPartialLoad&amp;#34;: [ &amp;#34;(string)&amp;#34; ], &amp;#34;dataId&amp;#34;: &amp;#34;(string)&amp;#34;, &amp;#34;id&amp;#34;: &amp;#34;(string)&amp;#34;, &amp;#34;spQueryDepends&amp;#34;: [ &amp;#34;(string)&amp;#34; ], &amp;#34;waitingId&amp;#34;: &amp;#34;(string)&amp;#34; }, &amp;#34;selectedValueView&amp;#34;: &amp;#34;(any)&amp;#34;, &amp;#34;selfDepends&amp;#34;: &amp;#34;(boolean)&amp;#34;, &amp;#34;span&amp;#34;: &amp;#34;(number)&amp;#34;, &amp;#34;tooltip&amp;#34;: { &amp;#34;content&amp;#34;: &amp;#34;(string)&amp;#34;, &amp;#34;label&amp;#34;: &amp;#34;(string)&amp;#34; }, &amp;#34;valid&amp;#34;: &amp;#34;(boolean)&amp;#34;, &amp;#34;validateInProgress&amp;#34;: &amp;#34;(boolean)&amp;#34;, &amp;#34;value&amp;#34;: &amp;#34;(string)&amp;#34;, &amp;#34;visible&amp;#34;: &amp;#34;(boolean)&amp;#34; } @default &amp;ldquo;left&amp;rdquo;</description>
    </item>
    
    <item>
      <title>Элемент me-input</title>
      <link>https://developers.devision.io/meta/reference/ui_controls/me-input/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://developers.devision.io/meta/reference/ui_controls/me-input/</guid>
      <description>Основной элемент для ввода данных Использует attrs.type для уточнения внешнего вида элемента. Может принимать вид текстового поля ввода, выпадающего списка, checkbox, radio и пр.
@returns any - тип результируещего значения зависит от [[IMeInputAttrs.type]] элемента и от значения multiple
Общее Обратите внимание на структуру всех классов
Структура { &amp;#34;__tid&amp;#34;: &amp;#34;(any)&amp;#34;, &amp;#34;align&amp;#34;: &amp;#34;(string)&amp;#34;, &amp;#34;attrs&amp;#34;: { &amp;#34;addObjectButton&amp;#34;: { &amp;#34;cssClass&amp;#34;: &amp;#34;(string)&amp;#34;, &amp;#34;cssProperties&amp;#34;: &amp;#34;(string)&amp;#34;, &amp;#34;disabled&amp;#34;: &amp;#34;(boolean)&amp;#34;, &amp;#34;drawAsMainElementOnParentElemIsEmpty&amp;#34;: &amp;#34;(boolean)&amp;#34;, &amp;#34;env&amp;#34;: { &amp;#34;state&amp;#34;: &amp;#34;(string)&amp;#34; }, &amp;#34;icon&amp;#34;: &amp;#34;(string)&amp;#34;, &amp;#34;icon_image&amp;#34;: &amp;#34;(string)&amp;#34;, &amp;#34;pageId&amp;#34;: &amp;#34;(string)&amp;#34;, &amp;#34;title&amp;#34;: &amp;#34;(string)&amp;#34;, &amp;#34;tooltip&amp;#34;: { &amp;#34;content&amp;#34;: &amp;#34;(string)&amp;#34;, &amp;#34;label&amp;#34;: &amp;#34;(string)&amp;#34; } }, &amp;#34;align&amp;#34;: &amp;#34;( left | right )&amp;#34;, &amp;#34;applyValueOnSelectInMultiple&amp;#34;: &amp;#34;(boolean)&amp;#34;, &amp;#34;authParams&amp;#34;: &amp;#34;(string)&amp;#34;, &amp;#34;autoFocus&amp;#34;: &amp;#34;(boolean)&amp;#34;, &amp;#34;autoSelect&amp;#34;: &amp;#34;( none | first | if_only_one )&amp;#34;, &amp;#34;clearable&amp;#34;: &amp;#34;( auto | yes | no )&amp;#34;, &amp;#34;contextualClass&amp;#34;: &amp;#34;(string)&amp;#34;, &amp;#34;copyBtn&amp;#34;: &amp;#34;(any)&amp;#34;, &amp;#34;create&amp;#34;: &amp;#34;(boolean)&amp;#34;, &amp;#34;disabled&amp;#34;: &amp;#34;(boolean)&amp;#34;, &amp;#34;engine&amp;#34;: &amp;#34;(string)&amp;#34;, &amp;#34;enterSubmit&amp;#34;: &amp;#34;(boolean)&amp;#34;, &amp;#34;entityId&amp;#34;: &amp;#34;(string)&amp;#34;, &amp;#34;exposeSelectedOptionKeys&amp;#34;: [ { &amp;#34;source&amp;#34;: &amp;#34;(string)&amp;#34;, &amp;#34;target&amp;#34;: &amp;#34;(string)&amp;#34; } ], &amp;#34;fastViewObjectButton&amp;#34;: { &amp;#34;drawActorList&amp;#34;: &amp;#34;(boolean)&amp;#34;, &amp;#34;drawTopMenu&amp;#34;: &amp;#34;(boolean)&amp;#34;, &amp;#34;env&amp;#34;: { &amp;#34;state&amp;#34;: &amp;#34;(string)&amp;#34; }, &amp;#34;modalSize&amp;#34;: &amp;#34;( xs, sm, md, lg, fullscreen, max )&amp;#34;, &amp;#34;modalTitle&amp;#34;: &amp;#34;(string)&amp;#34;, &amp;#34;mode&amp;#34;: &amp;#34;( modal, sidenav, hidden )&amp;#34;, &amp;#34;pageId&amp;#34;: &amp;#34;(string)&amp;#34; }, &amp;#34;folderId&amp;#34;: &amp;#34;(string)&amp;#34;, &amp;#34;formInputName&amp;#34;: &amp;#34;(string)&amp;#34;, &amp;#34;groupAddon&amp;#34;: { &amp;#34;text&amp;#34;: &amp;#34;(string)&amp;#34; }, &amp;#34;icon&amp;#34;: &amp;#34;(string)&amp;#34;, &amp;#34;info&amp;#34;: &amp;#34;(object)&amp;#34;, &amp;#34;inlineElements&amp;#34;: &amp;#34;(boolean)&amp;#34;, &amp;#34;inlineLabel&amp;#34;: &amp;#34;(boolean)&amp;#34;, &amp;#34;isPrivate&amp;#34;: &amp;#34;(boolean)&amp;#34;, &amp;#34;max&amp;#34;: &amp;#34;(number)&amp;#34;, &amp;#34;maxHeight&amp;#34;: &amp;#34;(string)&amp;#34;, &amp;#34;maxSizeMB&amp;#34;: &amp;#34;(number)&amp;#34;, &amp;#34;maxTotalSizeMB&amp;#34;: &amp;#34;(number)&amp;#34;, &amp;#34;min&amp;#34;: &amp;#34;(number)&amp;#34;, &amp;#34;minSizeMB&amp;#34;: &amp;#34;(number)&amp;#34;, &amp;#34;mode&amp;#34;: &amp;#34;( JSON | JSON_OBJECT | HTML | SQL )&amp;#34;, &amp;#34;multiple&amp;#34;: &amp;#34;(boolean)&amp;#34;, &amp;#34;native&amp;#34;: &amp;#34;(any)&amp;#34;, &amp;#34;objectId&amp;#34;: &amp;#34;(string)&amp;#34;, &amp;#34;onBlur&amp;#34;: &amp;#34;(Function)&amp;#34;, &amp;#34;onChange&amp;#34;: &amp;#34;(Function)&amp;#34;, &amp;#34;onDataLoad&amp;#34;: &amp;#34;(Function)&amp;#34;, &amp;#34;onFocus&amp;#34;: &amp;#34;(Function)&amp;#34;, &amp;#34;onInitialize&amp;#34;: &amp;#34;(Function)&amp;#34;, &amp;#34;options&amp;#34;: [ { &amp;#34;date&amp;#34;: &amp;#34;(string)&amp;#34;, &amp;#34;description&amp;#34;: &amp;#34;(string)&amp;#34;, &amp;#34;disabled&amp;#34;: &amp;#34;(boolean)&amp;#34;, &amp;#34;fast_select&amp;#34;: &amp;#34;(boolean)&amp;#34;, &amp;#34;icon&amp;#34;: &amp;#34;(string)&amp;#34;, &amp;#34;icon_image&amp;#34;: &amp;#34;(string)&amp;#34;, &amp;#34;image&amp;#34;: &amp;#34;(string)&amp;#34;, &amp;#34;link&amp;#34;: { &amp;#34;modalSize&amp;#34;: &amp;#34;( xs, sm, lg, normal, max )&amp;#34;, &amp;#34;target&amp;#34;: &amp;#34;( _modal, _blank )&amp;#34;, &amp;#34;type&amp;#34;: &amp;#34;( href, meta )&amp;#34;, &amp;#34;value&amp;#34;: { &amp;#34;entityId&amp;#34;: &amp;#34;(string)&amp;#34;, &amp;#34;env&amp;#34;: { &amp;#34;state&amp;#34;: &amp;#34;(string)&amp;#34; }, &amp;#34;mode&amp;#34;: &amp;#34;( modal, sidenav, hidden )&amp;#34;, &amp;#34;objectId&amp;#34;: &amp;#34;(string)&amp;#34;, &amp;#34;pageId&amp;#34;: &amp;#34;(string)&amp;#34;, &amp;#34;url&amp;#34;: &amp;#34;(string)&amp;#34; } }, &amp;#34;mentio&amp;#34;: [ { &amp;#34;date&amp;#34;: &amp;#34;(string)&amp;#34;, &amp;#34;description&amp;#34;: &amp;#34;(string)&amp;#34;, &amp;#34;disabled&amp;#34;: &amp;#34;(boolean)&amp;#34;, &amp;#34;items&amp;#34;: [ { &amp;#34;date&amp;#34;: &amp;#34;(string)&amp;#34;, &amp;#34;description&amp;#34;: &amp;#34;(string)&amp;#34;, &amp;#34;disabled&amp;#34;: &amp;#34;(boolean)&amp;#34;, &amp;#34;name&amp;#34;: &amp;#34;(string)&amp;#34;, &amp;#34;search_text&amp;#34;: &amp;#34;(string)&amp;#34;, &amp;#34;section&amp;#34;: &amp;#34;(string)&amp;#34;, &amp;#34;title&amp;#34;: &amp;#34;(string)&amp;#34; } ], &amp;#34;name&amp;#34;: &amp;#34;(string)&amp;#34;, &amp;#34;search_text&amp;#34;: &amp;#34;(string)&amp;#34;, &amp;#34;section&amp;#34;: &amp;#34;(string)&amp;#34;, &amp;#34;title&amp;#34;: &amp;#34;(string)&amp;#34;, &amp;#34;triggerChar&amp;#34;: &amp;#34;(string)&amp;#34; } ], &amp;#34;name&amp;#34;: &amp;#34;(string)&amp;#34;, &amp;#34;search_text&amp;#34;: &amp;#34;(string)&amp;#34;, &amp;#34;section&amp;#34;: &amp;#34;(string)&amp;#34;, &amp;#34;style&amp;#34;: &amp;#34;(string)&amp;#34;, &amp;#34;title&amp;#34;: &amp;#34;(string)&amp;#34;, &amp;#34;tooltip&amp;#34;: { &amp;#34;content&amp;#34;: &amp;#34;(string)&amp;#34;, &amp;#34;label&amp;#34;: &amp;#34;(string)&amp;#34; }, &amp;#34;value&amp;#34;: { &amp;#34;unit&amp;#34;: { &amp;#34;value&amp;#34;: &amp;#34;(string)&amp;#34; }, &amp;#34;value&amp;#34;: &amp;#34;(any)&amp;#34; } } ], &amp;#34;pattern&amp;#34;: &amp;#34;(string)&amp;#34;, &amp;#34;placeholder&amp;#34;: &amp;#34;(string)&amp;#34;, &amp;#34;popupWindowParams&amp;#34;: { &amp;#34;height&amp;#34;: &amp;#34;(number)&amp;#34;, &amp;#34;width&amp;#34;: &amp;#34;(number)&amp;#34; }, &amp;#34;prepLegoForm&amp;#34;: { &amp;#34;__tid&amp;#34;: &amp;#34;(any)&amp;#34;, &amp;#34;align&amp;#34;: &amp;#34;(string)&amp;#34;, &amp;#34;bindAttrs&amp;#34;: [ { &amp;#34;source&amp;#34;: &amp;#34;(string)&amp;#34;, &amp;#34;target&amp;#34;: &amp;#34;(string)&amp;#34; } ], &amp;#34;defaultValue&amp;#34;: &amp;#34;(any)&amp;#34;, &amp;#34;depends&amp;#34;: [ &amp;#34;(string)&amp;#34; ], &amp;#34;elems&amp;#34;: [ { &amp;#34;__tid&amp;#34;: &amp;#34;(any)&amp;#34;, &amp;#34;align&amp;#34;: &amp;#34;(string)&amp;#34;, &amp;#34;bindAttrs&amp;#34;: [ { &amp;#34;source&amp;#34;: &amp;#34;(string)&amp;#34;, &amp;#34;target&amp;#34;: &amp;#34;(string)&amp;#34; } ], &amp;#34;defaultValue&amp;#34;: &amp;#34;(any)&amp;#34;, &amp;#34;depends&amp;#34;: [ &amp;#34;(string)&amp;#34; ], &amp;#34;entityId&amp;#34;: &amp;#34;(string)&amp;#34;, &amp;#34;errors&amp;#34;: [ { &amp;#34;id&amp;#34;: &amp;#34;(string)&amp;#34;, &amp;#34;name&amp;#34;: &amp;#34;(string)&amp;#34; } ], &amp;#34;exportable&amp;#34;: &amp;#34;(boolean)&amp;#34;, &amp;#34;formHorizontal&amp;#34;: &amp;#34;(boolean)&amp;#34;, &amp;#34;help&amp;#34;: &amp;#34;(string)&amp;#34;, &amp;#34;icon&amp;#34;: &amp;#34;(string)&amp;#34;, &amp;#34;id&amp;#34;: &amp;#34;(string)&amp;#34;, &amp;#34;inlineForm&amp;#34;: &amp;#34;(boolean)&amp;#34;, &amp;#34;label&amp;#34;: &amp;#34;(string)&amp;#34;, &amp;#34;listen&amp;#34;: [ { &amp;#34;$promise&amp;#34;: &amp;#34;(any)&amp;#34;, &amp;#34;code&amp;#34;: [ &amp;#34;( ADD | SET, REMOVE )&amp;#34; ], &amp;#34;entityId&amp;#34;: &amp;#34;(string)&amp;#34;, &amp;#34;objectId&amp;#34;: &amp;#34;(string)&amp;#34;, &amp;#34;pubSubChannel&amp;#34;: [ &amp;#34;(string)&amp;#34; ], &amp;#34;refreshRefPvmData&amp;#34;: &amp;#34;(any)&amp;#34;, &amp;#34;reload&amp;#34;: &amp;#34;(any)&amp;#34;, &amp;#34;selectAfterAdd&amp;#34;: &amp;#34;(boolean)&amp;#34; } ], &amp;#34;name&amp;#34;: &amp;#34;(string)&amp;#34;, &amp;#34;offset&amp;#34;: &amp;#34;(number)&amp;#34;, &amp;#34;order&amp;#34;: &amp;#34;(number)&amp;#34;, &amp;#34;persistValueView&amp;#34;: &amp;#34;(boolean)&amp;#34;, &amp;#34;refPvmData&amp;#34;: { &amp;#34;additionalPartialLoad&amp;#34;: [ &amp;#34;(string)&amp;#34; ], &amp;#34;dataId&amp;#34;: &amp;#34;(string)&amp;#34;, &amp;#34;id&amp;#34;: &amp;#34;(string)&amp;#34;, &amp;#34;spQueryDepends&amp;#34;: [ &amp;#34;(string)&amp;#34; ], &amp;#34;waitingId&amp;#34;: &amp;#34;(string)&amp;#34; }, &amp;#34;refPvmValidator&amp;#34;: { &amp;#34;additionalPartialLoad&amp;#34;: [ &amp;#34;(string)&amp;#34; ], &amp;#34;dataId&amp;#34;: &amp;#34;(string)&amp;#34;, &amp;#34;id&amp;#34;: &amp;#34;(string)&amp;#34;, &amp;#34;spQueryDepends&amp;#34;: [ &amp;#34;(string)&amp;#34; ], &amp;#34;waitingId&amp;#34;: &amp;#34;(string)&amp;#34; }, &amp;#34;selectedValueView&amp;#34;: &amp;#34;(any)&amp;#34;, &amp;#34;selfDepends&amp;#34;: &amp;#34;(boolean)&amp;#34;, &amp;#34;span&amp;#34;: &amp;#34;(number)&amp;#34;, &amp;#34;tooltip&amp;#34;: { &amp;#34;content&amp;#34;: &amp;#34;(string)&amp;#34;, &amp;#34;label&amp;#34;: &amp;#34;(string)&amp;#34; }, &amp;#34;valid&amp;#34;: &amp;#34;(boolean)&amp;#34;, &amp;#34;validateInProgress&amp;#34;: &amp;#34;(boolean)&amp;#34;, &amp;#34;value&amp;#34;: &amp;#34;(string)&amp;#34;, &amp;#34;visible&amp;#34;: &amp;#34;(boolean)&amp;#34; } ], &amp;#34;entityId&amp;#34;: &amp;#34;(string)&amp;#34;, &amp;#34;errors&amp;#34;: [ { &amp;#34;id&amp;#34;: &amp;#34;(string)&amp;#34;, &amp;#34;name&amp;#34;: &amp;#34;(string)&amp;#34; } ], &amp;#34;exportable&amp;#34;: &amp;#34;(boolean)&amp;#34;, &amp;#34;formHorizontal&amp;#34;: &amp;#34;(boolean)&amp;#34;, &amp;#34;help&amp;#34;: &amp;#34;(string)&amp;#34;, &amp;#34;icon&amp;#34;: &amp;#34;(string)&amp;#34;, &amp;#34;id&amp;#34;: &amp;#34;(string)&amp;#34;, &amp;#34;inlineForm&amp;#34;: &amp;#34;(boolean)&amp;#34;, &amp;#34;label&amp;#34;: &amp;#34;(string)&amp;#34;, &amp;#34;listen&amp;#34;: [ { &amp;#34;$promise&amp;#34;: &amp;#34;(any)&amp;#34;, &amp;#34;code&amp;#34;: [ &amp;#34;( ADD | SET, REMOVE )&amp;#34; ], &amp;#34;entityId&amp;#34;: &amp;#34;(string)&amp;#34;, &amp;#34;objectId&amp;#34;: &amp;#34;(string)&amp;#34;, &amp;#34;pubSubChannel&amp;#34;: [ &amp;#34;(string)&amp;#34; ], &amp;#34;refreshRefPvmData&amp;#34;: &amp;#34;(any)&amp;#34;, &amp;#34;reload&amp;#34;: &amp;#34;(any)&amp;#34;, &amp;#34;selectAfterAdd&amp;#34;: &amp;#34;(boolean)&amp;#34; } ], &amp;#34;name&amp;#34;: &amp;#34;(string)&amp;#34;, &amp;#34;offset&amp;#34;: &amp;#34;(number)&amp;#34;, &amp;#34;order&amp;#34;: &amp;#34;(number)&amp;#34;, &amp;#34;persistValueView&amp;#34;: &amp;#34;(boolean)&amp;#34;, &amp;#34;refPvmData&amp;#34;: { &amp;#34;additionalPartialLoad&amp;#34;: [ &amp;#34;(string)&amp;#34; ], &amp;#34;dataId&amp;#34;: &amp;#34;(string)&amp;#34;, &amp;#34;id&amp;#34;: &amp;#34;(string)&amp;#34;, &amp;#34;spQueryDepends&amp;#34;: [ &amp;#34;(string)&amp;#34; ], &amp;#34;waitingId&amp;#34;: &amp;#34;(string)&amp;#34; }, &amp;#34;refPvmValidator&amp;#34;: { &amp;#34;additionalPartialLoad&amp;#34;: [ &amp;#34;(string)&amp;#34; ], &amp;#34;dataId&amp;#34;: &amp;#34;(string)&amp;#34;, &amp;#34;id&amp;#34;: &amp;#34;(string)&amp;#34;, &amp;#34;spQueryDepends&amp;#34;: [ &amp;#34;(string)&amp;#34; ], &amp;#34;waitingId&amp;#34;: &amp;#34;(string)&amp;#34; }, &amp;#34;selectedValueView&amp;#34;: &amp;#34;(any)&amp;#34;, &amp;#34;selfDepends&amp;#34;: &amp;#34;(boolean)&amp;#34;, &amp;#34;span&amp;#34;: &amp;#34;(number)&amp;#34;, &amp;#34;tooltip&amp;#34;: { &amp;#34;content&amp;#34;: &amp;#34;(string)&amp;#34;, &amp;#34;label&amp;#34;: &amp;#34;(string)&amp;#34; }, &amp;#34;valid&amp;#34;: &amp;#34;(boolean)&amp;#34;, &amp;#34;validateInProgress&amp;#34;: &amp;#34;(boolean)&amp;#34;, &amp;#34;value&amp;#34;: &amp;#34;(string)&amp;#34;, &amp;#34;visible&amp;#34;: &amp;#34;(boolean)&amp;#34; }, &amp;#34;readonly&amp;#34;: &amp;#34;(boolean)&amp;#34;, &amp;#34;refreshOptionsButton&amp;#34;: { &amp;#34;refPvmBeforeRefresh&amp;#34;: { &amp;#34;additionalPartialLoad&amp;#34;: [ &amp;#34;(string)&amp;#34; ], &amp;#34;dataId&amp;#34;: &amp;#34;(string)&amp;#34;, &amp;#34;id&amp;#34;: &amp;#34;(string)&amp;#34;, &amp;#34;spQueryDepends&amp;#34;: [ &amp;#34;(string)&amp;#34; ], &amp;#34;waitingId&amp;#34;: &amp;#34;(string)&amp;#34; } }, &amp;#34;required&amp;#34;: &amp;#34;(boolean)&amp;#34;, &amp;#34;rows&amp;#34;: &amp;#34;(number)&amp;#34;, &amp;#34;scaleByContent&amp;#34;: &amp;#34;(boolean)&amp;#34;, &amp;#34;searchText&amp;#34;: &amp;#34;(string)&amp;#34;, &amp;#34;step&amp;#34;: &amp;#34;(number)&amp;#34;, &amp;#34;style&amp;#34;: &amp;#34;(string)&amp;#34;, &amp;#34;timePicker&amp;#34;: &amp;#34;(boolean)&amp;#34;, &amp;#34;tooltip&amp;#34;: { &amp;#34;content&amp;#34;: &amp;#34;(string)&amp;#34;, &amp;#34;label&amp;#34;: &amp;#34;(string)&amp;#34; }, &amp;#34;ttlInSec&amp;#34;: &amp;#34;(number)&amp;#34;, &amp;#34;type&amp;#34;: &amp;#34;( text | select | duallist | submit | textarea | checkbox | radio | me-summary-btn | me-tabs | filecontent | url | tel | email | percent )&amp;#34;, &amp;#34;value&amp;#34;: &amp;#34;(string)&amp;#34;, &amp;#34;valueMultiplier&amp;#34;: &amp;#34;(number)&amp;#34;, &amp;#34;verticalColumns&amp;#34;: &amp;#34;(boolean)&amp;#34;, &amp;#34;viewSize&amp;#34;: &amp;#34;( xs | sm | lg )&amp;#34; }, &amp;#34;bindAttrs&amp;#34;: [ { &amp;#34;source&amp;#34;: &amp;#34;(string)&amp;#34;, &amp;#34;target&amp;#34;: &amp;#34;(string)&amp;#34; } ], &amp;#34;defaultValue&amp;#34;: &amp;#34;(any)&amp;#34;, &amp;#34;depends&amp;#34;: [ &amp;#34;(string)&amp;#34; ], &amp;#34;entityId&amp;#34;: &amp;#34;(string)&amp;#34;, &amp;#34;errors&amp;#34;: [ { &amp;#34;id&amp;#34;: &amp;#34;(string)&amp;#34;, &amp;#34;name&amp;#34;: &amp;#34;(string)&amp;#34; } ], &amp;#34;exportable&amp;#34;: &amp;#34;(boolean)&amp;#34;, &amp;#34;formHorizontal&amp;#34;: &amp;#34;(boolean)&amp;#34;, &amp;#34;help&amp;#34;: &amp;#34;(string)&amp;#34;, &amp;#34;icon&amp;#34;: &amp;#34;(string)&amp;#34;, &amp;#34;id&amp;#34;: &amp;#34;(string)&amp;#34;, &amp;#34;inlineForm&amp;#34;: &amp;#34;(boolean)&amp;#34;, &amp;#34;label&amp;#34;: &amp;#34;(string)&amp;#34;, &amp;#34;listen&amp;#34;: [ { &amp;#34;$promise&amp;#34;: &amp;#34;(any)&amp;#34;, &amp;#34;code&amp;#34;: [ &amp;#34;( ADD | SET, REMOVE )&amp;#34; ], &amp;#34;entityId&amp;#34;: &amp;#34;(string)&amp;#34;, &amp;#34;objectId&amp;#34;: &amp;#34;(string)&amp;#34;, &amp;#34;pubSubChannel&amp;#34;: [ &amp;#34;(string)&amp;#34; ], &amp;#34;refreshRefPvmData&amp;#34;: &amp;#34;(any)&amp;#34;, &amp;#34;reload&amp;#34;: &amp;#34;(any)&amp;#34;, &amp;#34;selectAfterAdd&amp;#34;: &amp;#34;(boolean)&amp;#34; } ], &amp;#34;name&amp;#34;: &amp;#34;me-input&amp;#34;, &amp;#34;offset&amp;#34;: &amp;#34;(number)&amp;#34;, &amp;#34;order&amp;#34;: &amp;#34;(number)&amp;#34;, &amp;#34;persistValueView&amp;#34;: &amp;#34;(boolean)&amp;#34;, &amp;#34;refPvmData&amp;#34;: { &amp;#34;additionalPartialLoad&amp;#34;: [ &amp;#34;(string)&amp;#34; ], &amp;#34;dataId&amp;#34;: &amp;#34;(string)&amp;#34;, &amp;#34;id&amp;#34;: &amp;#34;(string)&amp;#34;, &amp;#34;spQueryDepends&amp;#34;: [ &amp;#34;(string)&amp;#34; ], &amp;#34;waitingId&amp;#34;: &amp;#34;(string)&amp;#34; }, &amp;#34;refPvmValidator&amp;#34;: { &amp;#34;additionalPartialLoad&amp;#34;: [ &amp;#34;(string)&amp;#34; ], &amp;#34;dataId&amp;#34;: &amp;#34;(string)&amp;#34;, &amp;#34;id&amp;#34;: &amp;#34;(string)&amp;#34;, &amp;#34;spQueryDepends&amp;#34;: [ &amp;#34;(string)&amp;#34; ], &amp;#34;waitingId&amp;#34;: &amp;#34;(string)&amp;#34; }, &amp;#34;selectedValueView&amp;#34;: &amp;#34;(any)&amp;#34;, &amp;#34;selfDepends&amp;#34;: &amp;#34;(boolean)&amp;#34;, &amp;#34;span&amp;#34;: &amp;#34;(number)&amp;#34;, &amp;#34;tooltip&amp;#34;: { &amp;#34;content&amp;#34;: &amp;#34;(string)&amp;#34;, &amp;#34;label&amp;#34;: &amp;#34;(string)&amp;#34; }, &amp;#34;valid&amp;#34;: &amp;#34;(boolean)&amp;#34;, &amp;#34;validateInProgress&amp;#34;: &amp;#34;(boolean)&amp;#34;, &amp;#34;value&amp;#34;: &amp;#34;(string)&amp;#34;, &amp;#34;visible&amp;#34;: &amp;#34;(boolean)&amp;#34; } @default &amp;ldquo;left&amp;rdquo;</description>
    </item>
    
    <item>
      <title>Элемент me-lego</title>
      <link>https://developers.devision.io/meta/reference/ui_controls/me-lego/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://developers.devision.io/meta/reference/ui_controls/me-lego/</guid>
      <description>Основной элемент-контейнер для рендеринга элементов. Рендерится в me-page как основной контейнер, а так же может быть использован внутри себя и себе подобных контейнеров: me-lego, me-lego-list, me-wizard
Общее Обратите внимание на структуру всех классов
Структура { &amp;#34;__tid&amp;#34;: &amp;#34;(any)&amp;#34;, &amp;#34;align&amp;#34;: &amp;#34;(string)&amp;#34;, &amp;#34;attrs&amp;#34;: { &amp;#34;background&amp;#34;: &amp;#34;(boolean)&amp;#34;, &amp;#34;collapsable&amp;#34;: &amp;#34;(boolean)&amp;#34;, &amp;#34;defaultBlockEnabled&amp;#34;: &amp;#34;(boolean)&amp;#34;, &amp;#34;formHorizontal&amp;#34;: { &amp;#34;elemLabelGridSize&amp;#34;: &amp;#34;(number)&amp;#34; }, &amp;#34;hideLabelsAttr&amp;#34;: &amp;#34;(boolean)&amp;#34;, &amp;#34;logo&amp;#34;: &amp;#34;(string)&amp;#34;, &amp;#34;openContent&amp;#34;: &amp;#34;(boolean)&amp;#34;, &amp;#34;optional&amp;#34;: &amp;#34;(boolean)&amp;#34;, &amp;#34;style&amp;#34;: &amp;#34;( default | card )&amp;#34;, &amp;#34;viewSize&amp;#34;: &amp;#34;( sm )&amp;#34; }, &amp;#34;bindAttrs&amp;#34;: [ { &amp;#34;source&amp;#34;: &amp;#34;(string)&amp;#34;, &amp;#34;target&amp;#34;: &amp;#34;(string)&amp;#34; } ], &amp;#34;defaultValue&amp;#34;: &amp;#34;(any)&amp;#34;, &amp;#34;depends&amp;#34;: [ &amp;#34;(string)&amp;#34; ], &amp;#34;elems&amp;#34;: [ { &amp;#34;__tid&amp;#34;: &amp;#34;(any)&amp;#34;, &amp;#34;align&amp;#34;: &amp;#34;(string)&amp;#34;, &amp;#34;bindAttrs&amp;#34;: [ { &amp;#34;source&amp;#34;: &amp;#34;(string)&amp;#34;, &amp;#34;target&amp;#34;: &amp;#34;(string)&amp;#34; } ], &amp;#34;defaultValue&amp;#34;: &amp;#34;(any)&amp;#34;, &amp;#34;depends&amp;#34;: [ &amp;#34;(string)&amp;#34; ], &amp;#34;entityId&amp;#34;: &amp;#34;(string)&amp;#34;, &amp;#34;errors&amp;#34;: [ { &amp;#34;id&amp;#34;: &amp;#34;(string)&amp;#34;, &amp;#34;name&amp;#34;: &amp;#34;(string)&amp;#34; } ], &amp;#34;exportable&amp;#34;: &amp;#34;(boolean)&amp;#34;, &amp;#34;formHorizontal&amp;#34;: &amp;#34;(boolean)&amp;#34;, &amp;#34;help&amp;#34;: &amp;#34;(string)&amp;#34;, &amp;#34;icon&amp;#34;: &amp;#34;(string)&amp;#34;, &amp;#34;id&amp;#34;: &amp;#34;(string)&amp;#34;, &amp;#34;inlineForm&amp;#34;: &amp;#34;(boolean)&amp;#34;, &amp;#34;label&amp;#34;: &amp;#34;(string)&amp;#34;, &amp;#34;listen&amp;#34;: [ { &amp;#34;$promise&amp;#34;: &amp;#34;(any)&amp;#34;, &amp;#34;code&amp;#34;: [ &amp;#34;( ADD | SET, REMOVE )&amp;#34; ], &amp;#34;entityId&amp;#34;: &amp;#34;(string)&amp;#34;, &amp;#34;objectId&amp;#34;: &amp;#34;(string)&amp;#34;, &amp;#34;pubSubChannel&amp;#34;: [ &amp;#34;(string)&amp;#34; ], &amp;#34;refreshRefPvmData&amp;#34;: &amp;#34;(any)&amp;#34;, &amp;#34;reload&amp;#34;: &amp;#34;(any)&amp;#34;, &amp;#34;selectAfterAdd&amp;#34;: &amp;#34;(boolean)&amp;#34; } ], &amp;#34;name&amp;#34;: &amp;#34;(string)&amp;#34;, &amp;#34;offset&amp;#34;: &amp;#34;(number)&amp;#34;, &amp;#34;order&amp;#34;: &amp;#34;(number)&amp;#34;, &amp;#34;persistValueView&amp;#34;: &amp;#34;(boolean)&amp;#34;, &amp;#34;refPvmData&amp;#34;: { &amp;#34;additionalPartialLoad&amp;#34;: [ &amp;#34;(string)&amp;#34; ], &amp;#34;dataId&amp;#34;: &amp;#34;(string)&amp;#34;, &amp;#34;id&amp;#34;: &amp;#34;(string)&amp;#34;, &amp;#34;spQueryDepends&amp;#34;: [ &amp;#34;(string)&amp;#34; ], &amp;#34;waitingId&amp;#34;: &amp;#34;(string)&amp;#34; }, &amp;#34;refPvmValidator&amp;#34;: { &amp;#34;additionalPartialLoad&amp;#34;: [ &amp;#34;(string)&amp;#34; ], &amp;#34;dataId&amp;#34;: &amp;#34;(string)&amp;#34;, &amp;#34;id&amp;#34;: &amp;#34;(string)&amp;#34;, &amp;#34;spQueryDepends&amp;#34;: [ &amp;#34;(string)&amp;#34; ], &amp;#34;waitingId&amp;#34;: &amp;#34;(string)&amp;#34; }, &amp;#34;selectedValueView&amp;#34;: &amp;#34;(any)&amp;#34;, &amp;#34;selfDepends&amp;#34;: &amp;#34;(boolean)&amp;#34;, &amp;#34;span&amp;#34;: &amp;#34;(number)&amp;#34;, &amp;#34;tooltip&amp;#34;: { &amp;#34;content&amp;#34;: &amp;#34;(string)&amp;#34;, &amp;#34;label&amp;#34;: &amp;#34;(string)&amp;#34; }, &amp;#34;valid&amp;#34;: &amp;#34;(boolean)&amp;#34;, &amp;#34;validateInProgress&amp;#34;: &amp;#34;(boolean)&amp;#34;, &amp;#34;value&amp;#34;: &amp;#34;(string)&amp;#34;, &amp;#34;visible&amp;#34;: &amp;#34;(boolean)&amp;#34; } ], &amp;#34;entityId&amp;#34;: &amp;#34;(string)&amp;#34;, &amp;#34;errors&amp;#34;: [ { &amp;#34;id&amp;#34;: &amp;#34;(string)&amp;#34;, &amp;#34;name&amp;#34;: &amp;#34;(string)&amp;#34; } ], &amp;#34;exportable&amp;#34;: &amp;#34;(boolean)&amp;#34;, &amp;#34;formHorizontal&amp;#34;: &amp;#34;(boolean)&amp;#34;, &amp;#34;help&amp;#34;: &amp;#34;(string)&amp;#34;, &amp;#34;icon&amp;#34;: &amp;#34;(string)&amp;#34;, &amp;#34;id&amp;#34;: &amp;#34;(string)&amp;#34;, &amp;#34;inlineForm&amp;#34;: &amp;#34;(boolean)&amp;#34;, &amp;#34;label&amp;#34;: &amp;#34;(string)&amp;#34;, &amp;#34;listen&amp;#34;: [ { &amp;#34;$promise&amp;#34;: &amp;#34;(any)&amp;#34;, &amp;#34;code&amp;#34;: [ &amp;#34;( ADD | SET, REMOVE )&amp;#34; ], &amp;#34;entityId&amp;#34;: &amp;#34;(string)&amp;#34;, &amp;#34;objectId&amp;#34;: &amp;#34;(string)&amp;#34;, &amp;#34;pubSubChannel&amp;#34;: [ &amp;#34;(string)&amp;#34; ], &amp;#34;refreshRefPvmData&amp;#34;: &amp;#34;(any)&amp;#34;, &amp;#34;reload&amp;#34;: &amp;#34;(any)&amp;#34;, &amp;#34;selectAfterAdd&amp;#34;: &amp;#34;(boolean)&amp;#34; } ], &amp;#34;name&amp;#34;: &amp;#34;me-lego&amp;#34;, &amp;#34;offset&amp;#34;: &amp;#34;(number)&amp;#34;, &amp;#34;order&amp;#34;: &amp;#34;(number)&amp;#34;, &amp;#34;persistValueView&amp;#34;: &amp;#34;(boolean)&amp;#34;, &amp;#34;refPvmData&amp;#34;: { &amp;#34;additionalPartialLoad&amp;#34;: [ &amp;#34;(string)&amp;#34; ], &amp;#34;dataId&amp;#34;: &amp;#34;(string)&amp;#34;, &amp;#34;id&amp;#34;: &amp;#34;(string)&amp;#34;, &amp;#34;spQueryDepends&amp;#34;: [ &amp;#34;(string)&amp;#34; ], &amp;#34;waitingId&amp;#34;: &amp;#34;(string)&amp;#34; }, &amp;#34;refPvmValidator&amp;#34;: { &amp;#34;additionalPartialLoad&amp;#34;: [ &amp;#34;(string)&amp;#34; ], &amp;#34;dataId&amp;#34;: &amp;#34;(string)&amp;#34;, &amp;#34;id&amp;#34;: &amp;#34;(string)&amp;#34;, &amp;#34;spQueryDepends&amp;#34;: [ &amp;#34;(string)&amp;#34; ], &amp;#34;waitingId&amp;#34;: &amp;#34;(string)&amp;#34; }, &amp;#34;selectedValueView&amp;#34;: &amp;#34;(any)&amp;#34;, &amp;#34;selfDepends&amp;#34;: &amp;#34;(boolean)&amp;#34;, &amp;#34;span&amp;#34;: &amp;#34;(number)&amp;#34;, &amp;#34;tooltip&amp;#34;: { &amp;#34;content&amp;#34;: &amp;#34;(string)&amp;#34;, &amp;#34;label&amp;#34;: &amp;#34;(string)&amp;#34; }, &amp;#34;valid&amp;#34;: &amp;#34;(boolean)&amp;#34;, &amp;#34;validateInProgress&amp;#34;: &amp;#34;(boolean)&amp;#34;, &amp;#34;value&amp;#34;: &amp;#34;(string)&amp;#34;, &amp;#34;visible&amp;#34;: &amp;#34;(boolean)&amp;#34; } @default &amp;ldquo;left&amp;rdquo;</description>
    </item>
    
    <item>
      <title>Элемент me-lego-list</title>
      <link>https://developers.devision.io/meta/reference/ui_controls/me-lego-list/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://developers.devision.io/meta/reference/ui_controls/me-lego-list/</guid>
      <description>Основной элемент-контейнер для рендеринга элементов. Рендерится в me-page как основной контейнер, а так же может быть использован внутри себя и себе подобных контейнеров: me-lego, me-wizard, me-lego-list
@example https://apps.devision.io/page?p=3723&amp;amp;a=35
Общее Обратите внимание на структуру всех классов
Структура { &amp;#34;__tid&amp;#34;: &amp;#34;(any)&amp;#34;, &amp;#34;align&amp;#34;: &amp;#34;(string)&amp;#34;, &amp;#34;attrs&amp;#34;: { &amp;#34;addBtnText&amp;#34;: &amp;#34;(string)&amp;#34;, &amp;#34;asJson&amp;#34;: &amp;#34;(boolean)&amp;#34;, &amp;#34;hideNonFirstLabels&amp;#34;: &amp;#34;(boolean)&amp;#34;, &amp;#34;markDelete&amp;#34;: &amp;#34;(boolean)&amp;#34;, &amp;#34;sortable&amp;#34;: &amp;#34;(boolean)&amp;#34;, &amp;#34;style&amp;#34;: &amp;#34;(string)&amp;#34; }, &amp;#34;bindAttrs&amp;#34;: [ { &amp;#34;source&amp;#34;: &amp;#34;(string)&amp;#34;, &amp;#34;target&amp;#34;: &amp;#34;(string)&amp;#34; } ], &amp;#34;defaultValue&amp;#34;: &amp;#34;(any)&amp;#34;, &amp;#34;depends&amp;#34;: [ &amp;#34;(string)&amp;#34; ], &amp;#34;elems&amp;#34;: [ { &amp;#34;__tid&amp;#34;: &amp;#34;(any)&amp;#34;, &amp;#34;align&amp;#34;: &amp;#34;(string)&amp;#34;, &amp;#34;bindAttrs&amp;#34;: [ { &amp;#34;source&amp;#34;: &amp;#34;(string)&amp;#34;, &amp;#34;target&amp;#34;: &amp;#34;(string)&amp;#34; } ], &amp;#34;defaultValue&amp;#34;: &amp;#34;(any)&amp;#34;, &amp;#34;depends&amp;#34;: [ &amp;#34;(string)&amp;#34; ], &amp;#34;entityId&amp;#34;: &amp;#34;(string)&amp;#34;, &amp;#34;errors&amp;#34;: [ { &amp;#34;id&amp;#34;: &amp;#34;(string)&amp;#34;, &amp;#34;name&amp;#34;: &amp;#34;(string)&amp;#34; } ], &amp;#34;exportable&amp;#34;: &amp;#34;(boolean)&amp;#34;, &amp;#34;formHorizontal&amp;#34;: &amp;#34;(boolean)&amp;#34;, &amp;#34;help&amp;#34;: &amp;#34;(string)&amp;#34;, &amp;#34;icon&amp;#34;: &amp;#34;(string)&amp;#34;, &amp;#34;id&amp;#34;: &amp;#34;(string)&amp;#34;, &amp;#34;inlineForm&amp;#34;: &amp;#34;(boolean)&amp;#34;, &amp;#34;label&amp;#34;: &amp;#34;(string)&amp;#34;, &amp;#34;listen&amp;#34;: [ { &amp;#34;$promise&amp;#34;: &amp;#34;(any)&amp;#34;, &amp;#34;code&amp;#34;: [ &amp;#34;( ADD | SET, REMOVE )&amp;#34; ], &amp;#34;entityId&amp;#34;: &amp;#34;(string)&amp;#34;, &amp;#34;objectId&amp;#34;: &amp;#34;(string)&amp;#34;, &amp;#34;pubSubChannel&amp;#34;: [ &amp;#34;(string)&amp;#34; ], &amp;#34;refreshRefPvmData&amp;#34;: &amp;#34;(any)&amp;#34;, &amp;#34;reload&amp;#34;: &amp;#34;(any)&amp;#34;, &amp;#34;selectAfterAdd&amp;#34;: &amp;#34;(boolean)&amp;#34; } ], &amp;#34;name&amp;#34;: &amp;#34;(string)&amp;#34;, &amp;#34;offset&amp;#34;: &amp;#34;(number)&amp;#34;, &amp;#34;order&amp;#34;: &amp;#34;(number)&amp;#34;, &amp;#34;persistValueView&amp;#34;: &amp;#34;(boolean)&amp;#34;, &amp;#34;refPvmData&amp;#34;: { &amp;#34;additionalPartialLoad&amp;#34;: [ &amp;#34;(string)&amp;#34; ], &amp;#34;dataId&amp;#34;: &amp;#34;(string)&amp;#34;, &amp;#34;id&amp;#34;: &amp;#34;(string)&amp;#34;, &amp;#34;spQueryDepends&amp;#34;: [ &amp;#34;(string)&amp;#34; ], &amp;#34;waitingId&amp;#34;: &amp;#34;(string)&amp;#34; }, &amp;#34;refPvmValidator&amp;#34;: { &amp;#34;additionalPartialLoad&amp;#34;: [ &amp;#34;(string)&amp;#34; ], &amp;#34;dataId&amp;#34;: &amp;#34;(string)&amp;#34;, &amp;#34;id&amp;#34;: &amp;#34;(string)&amp;#34;, &amp;#34;spQueryDepends&amp;#34;: [ &amp;#34;(string)&amp;#34; ], &amp;#34;waitingId&amp;#34;: &amp;#34;(string)&amp;#34; }, &amp;#34;selectedValueView&amp;#34;: &amp;#34;(any)&amp;#34;, &amp;#34;selfDepends&amp;#34;: &amp;#34;(boolean)&amp;#34;, &amp;#34;span&amp;#34;: &amp;#34;(number)&amp;#34;, &amp;#34;tooltip&amp;#34;: { &amp;#34;content&amp;#34;: &amp;#34;(string)&amp;#34;, &amp;#34;label&amp;#34;: &amp;#34;(string)&amp;#34; }, &amp;#34;valid&amp;#34;: &amp;#34;(boolean)&amp;#34;, &amp;#34;validateInProgress&amp;#34;: &amp;#34;(boolean)&amp;#34;, &amp;#34;value&amp;#34;: &amp;#34;(string)&amp;#34;, &amp;#34;visible&amp;#34;: &amp;#34;(boolean)&amp;#34; } ], &amp;#34;entityId&amp;#34;: &amp;#34;(string)&amp;#34;, &amp;#34;errors&amp;#34;: [ { &amp;#34;id&amp;#34;: &amp;#34;(string)&amp;#34;, &amp;#34;name&amp;#34;: &amp;#34;(string)&amp;#34; } ], &amp;#34;exportable&amp;#34;: &amp;#34;(boolean)&amp;#34;, &amp;#34;formHorizontal&amp;#34;: &amp;#34;(boolean)&amp;#34;, &amp;#34;help&amp;#34;: &amp;#34;(string)&amp;#34;, &amp;#34;icon&amp;#34;: &amp;#34;(string)&amp;#34;, &amp;#34;id&amp;#34;: &amp;#34;(string)&amp;#34;, &amp;#34;inlineForm&amp;#34;: &amp;#34;(boolean)&amp;#34;, &amp;#34;label&amp;#34;: &amp;#34;(string)&amp;#34;, &amp;#34;listen&amp;#34;: [ { &amp;#34;$promise&amp;#34;: &amp;#34;(any)&amp;#34;, &amp;#34;code&amp;#34;: [ &amp;#34;( ADD | SET, REMOVE )&amp;#34; ], &amp;#34;entityId&amp;#34;: &amp;#34;(string)&amp;#34;, &amp;#34;objectId&amp;#34;: &amp;#34;(string)&amp;#34;, &amp;#34;pubSubChannel&amp;#34;: [ &amp;#34;(string)&amp;#34; ], &amp;#34;refreshRefPvmData&amp;#34;: &amp;#34;(any)&amp;#34;, &amp;#34;reload&amp;#34;: &amp;#34;(any)&amp;#34;, &amp;#34;selectAfterAdd&amp;#34;: &amp;#34;(boolean)&amp;#34; } ], &amp;#34;name&amp;#34;: &amp;#34;me-lego-list&amp;#34;, &amp;#34;offset&amp;#34;: &amp;#34;(number)&amp;#34;, &amp;#34;order&amp;#34;: &amp;#34;(number)&amp;#34;, &amp;#34;persistValueView&amp;#34;: &amp;#34;(boolean)&amp;#34;, &amp;#34;refPvmData&amp;#34;: { &amp;#34;additionalPartialLoad&amp;#34;: [ &amp;#34;(string)&amp;#34; ], &amp;#34;dataId&amp;#34;: &amp;#34;(string)&amp;#34;, &amp;#34;id&amp;#34;: &amp;#34;(string)&amp;#34;, &amp;#34;spQueryDepends&amp;#34;: [ &amp;#34;(string)&amp;#34; ], &amp;#34;waitingId&amp;#34;: &amp;#34;(string)&amp;#34; }, &amp;#34;refPvmValidator&amp;#34;: { &amp;#34;additionalPartialLoad&amp;#34;: [ &amp;#34;(string)&amp;#34; ], &amp;#34;dataId&amp;#34;: &amp;#34;(string)&amp;#34;, &amp;#34;id&amp;#34;: &amp;#34;(string)&amp;#34;, &amp;#34;spQueryDepends&amp;#34;: [ &amp;#34;(string)&amp;#34; ], &amp;#34;waitingId&amp;#34;: &amp;#34;(string)&amp;#34; }, &amp;#34;selectedValueView&amp;#34;: &amp;#34;(any)&amp;#34;, &amp;#34;selfDepends&amp;#34;: &amp;#34;(boolean)&amp;#34;, &amp;#34;span&amp;#34;: &amp;#34;(number)&amp;#34;, &amp;#34;tooltip&amp;#34;: { &amp;#34;content&amp;#34;: &amp;#34;(string)&amp;#34;, &amp;#34;label&amp;#34;: &amp;#34;(string)&amp;#34; }, &amp;#34;valid&amp;#34;: &amp;#34;(boolean)&amp;#34;, &amp;#34;validateInProgress&amp;#34;: &amp;#34;(boolean)&amp;#34;, &amp;#34;value&amp;#34;: &amp;#34;(string)&amp;#34;, &amp;#34;visible&amp;#34;: &amp;#34;(boolean)&amp;#34; } @default &amp;ldquo;left&amp;rdquo;</description>
    </item>
    
    <item>
      <title>Элемент me-pivot</title>
      <link>https://developers.devision.io/meta/reference/ui_controls/me-pivot/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://developers.devision.io/meta/reference/ui_controls/me-pivot/</guid>
      <description>Сводная таблица (Pivot Table) на JS Загружает все даныые для себя на клиента и крутит и считает все на JavaScript Не рекомендуется вгружать в контрол более 10 000 строк Используется в инструменте &amp;ldquo;Анализ данных&amp;rdquo; для [[IMeTable]]
@link https://pivottable.js.org
@example https://apps.devision.io/page?p=4230&amp;amp;a=35
Общее Обратите внимание на структуру всех классов
Структура { &amp;#34;__tid&amp;#34;: &amp;#34;(any)&amp;#34;, &amp;#34;align&amp;#34;: &amp;#34;(string)&amp;#34;, &amp;#34;attrs&amp;#34;: { &amp;#34;datatype&amp;#34;: &amp;#34;(string)&amp;#34;, &amp;#34;native&amp;#34;: &amp;#34;(any)&amp;#34;, &amp;#34;skipColGrandTotals&amp;#34;: &amp;#34;(boolean)&amp;#34;, &amp;#34;skipEditControls&amp;#34;: &amp;#34;(boolean)&amp;#34;, &amp;#34;skipRowGrandTotals&amp;#34;: &amp;#34;(boolean)&amp;#34; }, &amp;#34;bindAttrs&amp;#34;: [ { &amp;#34;source&amp;#34;: &amp;#34;(string)&amp;#34;, &amp;#34;target&amp;#34;: &amp;#34;(string)&amp;#34; } ], &amp;#34;defaultValue&amp;#34;: &amp;#34;(any)&amp;#34;, &amp;#34;depends&amp;#34;: [ &amp;#34;(string)&amp;#34; ], &amp;#34;entityId&amp;#34;: &amp;#34;(string)&amp;#34;, &amp;#34;errors&amp;#34;: [ { &amp;#34;id&amp;#34;: &amp;#34;(string)&amp;#34;, &amp;#34;name&amp;#34;: &amp;#34;(string)&amp;#34; } ], &amp;#34;exportable&amp;#34;: &amp;#34;(boolean)&amp;#34;, &amp;#34;formHorizontal&amp;#34;: &amp;#34;(boolean)&amp;#34;, &amp;#34;help&amp;#34;: &amp;#34;(string)&amp;#34;, &amp;#34;icon&amp;#34;: &amp;#34;(string)&amp;#34;, &amp;#34;id&amp;#34;: &amp;#34;(string)&amp;#34;, &amp;#34;inlineForm&amp;#34;: &amp;#34;(boolean)&amp;#34;, &amp;#34;label&amp;#34;: &amp;#34;(string)&amp;#34;, &amp;#34;listen&amp;#34;: [ { &amp;#34;$promise&amp;#34;: &amp;#34;(any)&amp;#34;, &amp;#34;code&amp;#34;: [ &amp;#34;( ADD | SET, REMOVE )&amp;#34; ], &amp;#34;entityId&amp;#34;: &amp;#34;(string)&amp;#34;, &amp;#34;objectId&amp;#34;: &amp;#34;(string)&amp;#34;, &amp;#34;pubSubChannel&amp;#34;: [ &amp;#34;(string)&amp;#34; ], &amp;#34;refreshRefPvmData&amp;#34;: &amp;#34;(any)&amp;#34;, &amp;#34;reload&amp;#34;: &amp;#34;(any)&amp;#34;, &amp;#34;selectAfterAdd&amp;#34;: &amp;#34;(boolean)&amp;#34; } ], &amp;#34;name&amp;#34;: &amp;#34;me-pivot&amp;#34;, &amp;#34;offset&amp;#34;: &amp;#34;(number)&amp;#34;, &amp;#34;order&amp;#34;: &amp;#34;(number)&amp;#34;, &amp;#34;persistValueView&amp;#34;: &amp;#34;(boolean)&amp;#34;, &amp;#34;refPvmData&amp;#34;: { &amp;#34;additionalPartialLoad&amp;#34;: [ &amp;#34;(string)&amp;#34; ], &amp;#34;dataId&amp;#34;: &amp;#34;(string)&amp;#34;, &amp;#34;id&amp;#34;: &amp;#34;(string)&amp;#34;, &amp;#34;spQueryDepends&amp;#34;: [ &amp;#34;(string)&amp;#34; ], &amp;#34;waitingId&amp;#34;: &amp;#34;(string)&amp;#34; }, &amp;#34;refPvmValidator&amp;#34;: { &amp;#34;additionalPartialLoad&amp;#34;: [ &amp;#34;(string)&amp;#34; ], &amp;#34;dataId&amp;#34;: &amp;#34;(string)&amp;#34;, &amp;#34;id&amp;#34;: &amp;#34;(string)&amp;#34;, &amp;#34;spQueryDepends&amp;#34;: [ &amp;#34;(string)&amp;#34; ], &amp;#34;waitingId&amp;#34;: &amp;#34;(string)&amp;#34; }, &amp;#34;selectedValueView&amp;#34;: &amp;#34;(any)&amp;#34;, &amp;#34;selfDepends&amp;#34;: &amp;#34;(boolean)&amp;#34;, &amp;#34;span&amp;#34;: &amp;#34;(number)&amp;#34;, &amp;#34;tooltip&amp;#34;: { &amp;#34;content&amp;#34;: &amp;#34;(string)&amp;#34;, &amp;#34;label&amp;#34;: &amp;#34;(string)&amp;#34; }, &amp;#34;valid&amp;#34;: &amp;#34;(boolean)&amp;#34;, &amp;#34;validateInProgress&amp;#34;: &amp;#34;(boolean)&amp;#34;, &amp;#34;value&amp;#34;: &amp;#34;(string)&amp;#34;, &amp;#34;visible&amp;#34;: &amp;#34;(boolean)&amp;#34; } @default &amp;ldquo;left&amp;rdquo;</description>
    </item>
    
    <item>
      <title>Элемент me-submit</title>
      <link>https://developers.devision.io/meta/reference/ui_controls/me-submit/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://developers.devision.io/meta/reference/ui_controls/me-submit/</guid>
      <description>Использует все от [[IMeInput]] и просто рефрешит форму при нажатии
Общее Обратите внимание на структуру всех классов
Структура { &amp;#34;__tid&amp;#34;: &amp;#34;(any)&amp;#34;, &amp;#34;align&amp;#34;: &amp;#34;(string)&amp;#34;, &amp;#34;attrs&amp;#34;: { &amp;#34;addObjectButton&amp;#34;: { &amp;#34;cssClass&amp;#34;: &amp;#34;(string)&amp;#34;, &amp;#34;cssProperties&amp;#34;: &amp;#34;(string)&amp;#34;, &amp;#34;disabled&amp;#34;: &amp;#34;(boolean)&amp;#34;, &amp;#34;drawAsMainElementOnParentElemIsEmpty&amp;#34;: &amp;#34;(boolean)&amp;#34;, &amp;#34;env&amp;#34;: { &amp;#34;state&amp;#34;: &amp;#34;(string)&amp;#34; }, &amp;#34;icon&amp;#34;: &amp;#34;(string)&amp;#34;, &amp;#34;icon_image&amp;#34;: &amp;#34;(string)&amp;#34;, &amp;#34;pageId&amp;#34;: &amp;#34;(string)&amp;#34;, &amp;#34;title&amp;#34;: &amp;#34;(string)&amp;#34;, &amp;#34;tooltip&amp;#34;: { &amp;#34;content&amp;#34;: &amp;#34;(string)&amp;#34;, &amp;#34;label&amp;#34;: &amp;#34;(string)&amp;#34; } }, &amp;#34;align&amp;#34;: &amp;#34;( left | right )&amp;#34;, &amp;#34;applyValueOnSelectInMultiple&amp;#34;: &amp;#34;(boolean)&amp;#34;, &amp;#34;authParams&amp;#34;: &amp;#34;(string)&amp;#34;, &amp;#34;autoFocus&amp;#34;: &amp;#34;(boolean)&amp;#34;, &amp;#34;autoSelect&amp;#34;: &amp;#34;( none | first | if_only_one )&amp;#34;, &amp;#34;clearable&amp;#34;: &amp;#34;( auto | yes | no )&amp;#34;, &amp;#34;contextualClass&amp;#34;: &amp;#34;(string)&amp;#34;, &amp;#34;copyBtn&amp;#34;: &amp;#34;(any)&amp;#34;, &amp;#34;create&amp;#34;: &amp;#34;(boolean)&amp;#34;, &amp;#34;disabled&amp;#34;: &amp;#34;(boolean)&amp;#34;, &amp;#34;engine&amp;#34;: &amp;#34;(string)&amp;#34;, &amp;#34;enterSubmit&amp;#34;: &amp;#34;(boolean)&amp;#34;, &amp;#34;entityId&amp;#34;: &amp;#34;(string)&amp;#34;, &amp;#34;exposeSelectedOptionKeys&amp;#34;: [ { &amp;#34;source&amp;#34;: &amp;#34;(string)&amp;#34;, &amp;#34;target&amp;#34;: &amp;#34;(string)&amp;#34; } ], &amp;#34;fastViewObjectButton&amp;#34;: { &amp;#34;drawActorList&amp;#34;: &amp;#34;(boolean)&amp;#34;, &amp;#34;drawTopMenu&amp;#34;: &amp;#34;(boolean)&amp;#34;, &amp;#34;env&amp;#34;: { &amp;#34;state&amp;#34;: &amp;#34;(string)&amp;#34; }, &amp;#34;modalSize&amp;#34;: &amp;#34;( xs, sm, md, lg, fullscreen, max )&amp;#34;, &amp;#34;modalTitle&amp;#34;: &amp;#34;(string)&amp;#34;, &amp;#34;mode&amp;#34;: &amp;#34;( modal, sidenav, hidden )&amp;#34;, &amp;#34;pageId&amp;#34;: &amp;#34;(string)&amp;#34; }, &amp;#34;folderId&amp;#34;: &amp;#34;(string)&amp;#34;, &amp;#34;formInputName&amp;#34;: &amp;#34;(string)&amp;#34;, &amp;#34;groupAddon&amp;#34;: { &amp;#34;text&amp;#34;: &amp;#34;(string)&amp;#34; }, &amp;#34;icon&amp;#34;: &amp;#34;(string)&amp;#34;, &amp;#34;info&amp;#34;: &amp;#34;(object)&amp;#34;, &amp;#34;inlineElements&amp;#34;: &amp;#34;(boolean)&amp;#34;, &amp;#34;inlineLabel&amp;#34;: &amp;#34;(boolean)&amp;#34;, &amp;#34;isPrivate&amp;#34;: &amp;#34;(boolean)&amp;#34;, &amp;#34;max&amp;#34;: &amp;#34;(number)&amp;#34;, &amp;#34;maxHeight&amp;#34;: &amp;#34;(string)&amp;#34;, &amp;#34;maxSizeMB&amp;#34;: &amp;#34;(number)&amp;#34;, &amp;#34;maxTotalSizeMB&amp;#34;: &amp;#34;(number)&amp;#34;, &amp;#34;min&amp;#34;: &amp;#34;(number)&amp;#34;, &amp;#34;minSizeMB&amp;#34;: &amp;#34;(number)&amp;#34;, &amp;#34;mode&amp;#34;: &amp;#34;( JSON | JSON_OBJECT | HTML | SQL )&amp;#34;, &amp;#34;multiple&amp;#34;: &amp;#34;(boolean)&amp;#34;, &amp;#34;native&amp;#34;: &amp;#34;(any)&amp;#34;, &amp;#34;objectId&amp;#34;: &amp;#34;(string)&amp;#34;, &amp;#34;onBlur&amp;#34;: &amp;#34;(Function)&amp;#34;, &amp;#34;onChange&amp;#34;: &amp;#34;(Function)&amp;#34;, &amp;#34;onDataLoad&amp;#34;: &amp;#34;(Function)&amp;#34;, &amp;#34;onFocus&amp;#34;: &amp;#34;(Function)&amp;#34;, &amp;#34;onInitialize&amp;#34;: &amp;#34;(Function)&amp;#34;, &amp;#34;options&amp;#34;: [ { &amp;#34;date&amp;#34;: &amp;#34;(string)&amp;#34;, &amp;#34;description&amp;#34;: &amp;#34;(string)&amp;#34;, &amp;#34;disabled&amp;#34;: &amp;#34;(boolean)&amp;#34;, &amp;#34;fast_select&amp;#34;: &amp;#34;(boolean)&amp;#34;, &amp;#34;icon&amp;#34;: &amp;#34;(string)&amp;#34;, &amp;#34;icon_image&amp;#34;: &amp;#34;(string)&amp;#34;, &amp;#34;image&amp;#34;: &amp;#34;(string)&amp;#34;, &amp;#34;link&amp;#34;: { &amp;#34;modalSize&amp;#34;: &amp;#34;( xs, sm, lg, normal, max )&amp;#34;, &amp;#34;target&amp;#34;: &amp;#34;( _modal, _blank )&amp;#34;, &amp;#34;type&amp;#34;: &amp;#34;( href, meta )&amp;#34;, &amp;#34;value&amp;#34;: { &amp;#34;entityId&amp;#34;: &amp;#34;(string)&amp;#34;, &amp;#34;env&amp;#34;: { &amp;#34;state&amp;#34;: &amp;#34;(string)&amp;#34; }, &amp;#34;mode&amp;#34;: &amp;#34;( modal, sidenav, hidden )&amp;#34;, &amp;#34;objectId&amp;#34;: &amp;#34;(string)&amp;#34;, &amp;#34;pageId&amp;#34;: &amp;#34;(string)&amp;#34;, &amp;#34;url&amp;#34;: &amp;#34;(string)&amp;#34; } }, &amp;#34;mentio&amp;#34;: [ { &amp;#34;date&amp;#34;: &amp;#34;(string)&amp;#34;, &amp;#34;description&amp;#34;: &amp;#34;(string)&amp;#34;, &amp;#34;disabled&amp;#34;: &amp;#34;(boolean)&amp;#34;, &amp;#34;items&amp;#34;: [ { &amp;#34;date&amp;#34;: &amp;#34;(string)&amp;#34;, &amp;#34;description&amp;#34;: &amp;#34;(string)&amp;#34;, &amp;#34;disabled&amp;#34;: &amp;#34;(boolean)&amp;#34;, &amp;#34;name&amp;#34;: &amp;#34;(string)&amp;#34;, &amp;#34;search_text&amp;#34;: &amp;#34;(string)&amp;#34;, &amp;#34;section&amp;#34;: &amp;#34;(string)&amp;#34;, &amp;#34;title&amp;#34;: &amp;#34;(string)&amp;#34; } ], &amp;#34;name&amp;#34;: &amp;#34;(string)&amp;#34;, &amp;#34;search_text&amp;#34;: &amp;#34;(string)&amp;#34;, &amp;#34;section&amp;#34;: &amp;#34;(string)&amp;#34;, &amp;#34;title&amp;#34;: &amp;#34;(string)&amp;#34;, &amp;#34;triggerChar&amp;#34;: &amp;#34;(string)&amp;#34; } ], &amp;#34;name&amp;#34;: &amp;#34;(string)&amp;#34;, &amp;#34;search_text&amp;#34;: &amp;#34;(string)&amp;#34;, &amp;#34;section&amp;#34;: &amp;#34;(string)&amp;#34;, &amp;#34;style&amp;#34;: &amp;#34;(string)&amp;#34;, &amp;#34;title&amp;#34;: &amp;#34;(string)&amp;#34;, &amp;#34;tooltip&amp;#34;: { &amp;#34;content&amp;#34;: &amp;#34;(string)&amp;#34;, &amp;#34;label&amp;#34;: &amp;#34;(string)&amp;#34; }, &amp;#34;value&amp;#34;: { &amp;#34;unit&amp;#34;: { &amp;#34;value&amp;#34;: &amp;#34;(string)&amp;#34; }, &amp;#34;value&amp;#34;: &amp;#34;(any)&amp;#34; } } ], &amp;#34;pattern&amp;#34;: &amp;#34;(string)&amp;#34;, &amp;#34;placeholder&amp;#34;: &amp;#34;(string)&amp;#34;, &amp;#34;popupWindowParams&amp;#34;: { &amp;#34;height&amp;#34;: &amp;#34;(number)&amp;#34;, &amp;#34;width&amp;#34;: &amp;#34;(number)&amp;#34; }, &amp;#34;prepLegoForm&amp;#34;: { &amp;#34;__tid&amp;#34;: &amp;#34;(any)&amp;#34;, &amp;#34;align&amp;#34;: &amp;#34;(string)&amp;#34;, &amp;#34;bindAttrs&amp;#34;: [ { &amp;#34;source&amp;#34;: &amp;#34;(string)&amp;#34;, &amp;#34;target&amp;#34;: &amp;#34;(string)&amp;#34; } ], &amp;#34;defaultValue&amp;#34;: &amp;#34;(any)&amp;#34;, &amp;#34;depends&amp;#34;: [ &amp;#34;(string)&amp;#34; ], &amp;#34;elems&amp;#34;: [ { &amp;#34;__tid&amp;#34;: &amp;#34;(any)&amp;#34;, &amp;#34;align&amp;#34;: &amp;#34;(string)&amp;#34;, &amp;#34;bindAttrs&amp;#34;: [ { &amp;#34;source&amp;#34;: &amp;#34;(string)&amp;#34;, &amp;#34;target&amp;#34;: &amp;#34;(string)&amp;#34; } ], &amp;#34;defaultValue&amp;#34;: &amp;#34;(any)&amp;#34;, &amp;#34;depends&amp;#34;: [ &amp;#34;(string)&amp;#34; ], &amp;#34;entityId&amp;#34;: &amp;#34;(string)&amp;#34;, &amp;#34;errors&amp;#34;: [ { &amp;#34;id&amp;#34;: &amp;#34;(string)&amp;#34;, &amp;#34;name&amp;#34;: &amp;#34;(string)&amp;#34; } ], &amp;#34;exportable&amp;#34;: &amp;#34;(boolean)&amp;#34;, &amp;#34;formHorizontal&amp;#34;: &amp;#34;(boolean)&amp;#34;, &amp;#34;help&amp;#34;: &amp;#34;(string)&amp;#34;, &amp;#34;icon&amp;#34;: &amp;#34;(string)&amp;#34;, &amp;#34;id&amp;#34;: &amp;#34;(string)&amp;#34;, &amp;#34;inlineForm&amp;#34;: &amp;#34;(boolean)&amp;#34;, &amp;#34;label&amp;#34;: &amp;#34;(string)&amp;#34;, &amp;#34;listen&amp;#34;: [ { &amp;#34;$promise&amp;#34;: &amp;#34;(any)&amp;#34;, &amp;#34;code&amp;#34;: [ &amp;#34;( ADD | SET, REMOVE )&amp;#34; ], &amp;#34;entityId&amp;#34;: &amp;#34;(string)&amp;#34;, &amp;#34;objectId&amp;#34;: &amp;#34;(string)&amp;#34;, &amp;#34;pubSubChannel&amp;#34;: [ &amp;#34;(string)&amp;#34; ], &amp;#34;refreshRefPvmData&amp;#34;: &amp;#34;(any)&amp;#34;, &amp;#34;reload&amp;#34;: &amp;#34;(any)&amp;#34;, &amp;#34;selectAfterAdd&amp;#34;: &amp;#34;(boolean)&amp;#34; } ], &amp;#34;name&amp;#34;: &amp;#34;(string)&amp;#34;, &amp;#34;offset&amp;#34;: &amp;#34;(number)&amp;#34;, &amp;#34;order&amp;#34;: &amp;#34;(number)&amp;#34;, &amp;#34;persistValueView&amp;#34;: &amp;#34;(boolean)&amp;#34;, &amp;#34;refPvmData&amp;#34;: { &amp;#34;additionalPartialLoad&amp;#34;: [ &amp;#34;(string)&amp;#34; ], &amp;#34;dataId&amp;#34;: &amp;#34;(string)&amp;#34;, &amp;#34;id&amp;#34;: &amp;#34;(string)&amp;#34;, &amp;#34;spQueryDepends&amp;#34;: [ &amp;#34;(string)&amp;#34; ], &amp;#34;waitingId&amp;#34;: &amp;#34;(string)&amp;#34; }, &amp;#34;refPvmValidator&amp;#34;: { &amp;#34;additionalPartialLoad&amp;#34;: [ &amp;#34;(string)&amp;#34; ], &amp;#34;dataId&amp;#34;: &amp;#34;(string)&amp;#34;, &amp;#34;id&amp;#34;: &amp;#34;(string)&amp;#34;, &amp;#34;spQueryDepends&amp;#34;: [ &amp;#34;(string)&amp;#34; ], &amp;#34;waitingId&amp;#34;: &amp;#34;(string)&amp;#34; }, &amp;#34;selectedValueView&amp;#34;: &amp;#34;(any)&amp;#34;, &amp;#34;selfDepends&amp;#34;: &amp;#34;(boolean)&amp;#34;, &amp;#34;span&amp;#34;: &amp;#34;(number)&amp;#34;, &amp;#34;tooltip&amp;#34;: { &amp;#34;content&amp;#34;: &amp;#34;(string)&amp;#34;, &amp;#34;label&amp;#34;: &amp;#34;(string)&amp;#34; }, &amp;#34;valid&amp;#34;: &amp;#34;(boolean)&amp;#34;, &amp;#34;validateInProgress&amp;#34;: &amp;#34;(boolean)&amp;#34;, &amp;#34;value&amp;#34;: &amp;#34;(string)&amp;#34;, &amp;#34;visible&amp;#34;: &amp;#34;(boolean)&amp;#34; } ], &amp;#34;entityId&amp;#34;: &amp;#34;(string)&amp;#34;, &amp;#34;errors&amp;#34;: [ { &amp;#34;id&amp;#34;: &amp;#34;(string)&amp;#34;, &amp;#34;name&amp;#34;: &amp;#34;(string)&amp;#34; } ], &amp;#34;exportable&amp;#34;: &amp;#34;(boolean)&amp;#34;, &amp;#34;formHorizontal&amp;#34;: &amp;#34;(boolean)&amp;#34;, &amp;#34;help&amp;#34;: &amp;#34;(string)&amp;#34;, &amp;#34;icon&amp;#34;: &amp;#34;(string)&amp;#34;, &amp;#34;id&amp;#34;: &amp;#34;(string)&amp;#34;, &amp;#34;inlineForm&amp;#34;: &amp;#34;(boolean)&amp;#34;, &amp;#34;label&amp;#34;: &amp;#34;(string)&amp;#34;, &amp;#34;listen&amp;#34;: [ { &amp;#34;$promise&amp;#34;: &amp;#34;(any)&amp;#34;, &amp;#34;code&amp;#34;: [ &amp;#34;( ADD | SET, REMOVE )&amp;#34; ], &amp;#34;entityId&amp;#34;: &amp;#34;(string)&amp;#34;, &amp;#34;objectId&amp;#34;: &amp;#34;(string)&amp;#34;, &amp;#34;pubSubChannel&amp;#34;: [ &amp;#34;(string)&amp;#34; ], &amp;#34;refreshRefPvmData&amp;#34;: &amp;#34;(any)&amp;#34;, &amp;#34;reload&amp;#34;: &amp;#34;(any)&amp;#34;, &amp;#34;selectAfterAdd&amp;#34;: &amp;#34;(boolean)&amp;#34; } ], &amp;#34;name&amp;#34;: &amp;#34;(string)&amp;#34;, &amp;#34;offset&amp;#34;: &amp;#34;(number)&amp;#34;, &amp;#34;order&amp;#34;: &amp;#34;(number)&amp;#34;, &amp;#34;persistValueView&amp;#34;: &amp;#34;(boolean)&amp;#34;, &amp;#34;refPvmData&amp;#34;: { &amp;#34;additionalPartialLoad&amp;#34;: [ &amp;#34;(string)&amp;#34; ], &amp;#34;dataId&amp;#34;: &amp;#34;(string)&amp;#34;, &amp;#34;id&amp;#34;: &amp;#34;(string)&amp;#34;, &amp;#34;spQueryDepends&amp;#34;: [ &amp;#34;(string)&amp;#34; ], &amp;#34;waitingId&amp;#34;: &amp;#34;(string)&amp;#34; }, &amp;#34;refPvmValidator&amp;#34;: { &amp;#34;additionalPartialLoad&amp;#34;: [ &amp;#34;(string)&amp;#34; ], &amp;#34;dataId&amp;#34;: &amp;#34;(string)&amp;#34;, &amp;#34;id&amp;#34;: &amp;#34;(string)&amp;#34;, &amp;#34;spQueryDepends&amp;#34;: [ &amp;#34;(string)&amp;#34; ], &amp;#34;waitingId&amp;#34;: &amp;#34;(string)&amp;#34; }, &amp;#34;selectedValueView&amp;#34;: &amp;#34;(any)&amp;#34;, &amp;#34;selfDepends&amp;#34;: &amp;#34;(boolean)&amp;#34;, &amp;#34;span&amp;#34;: &amp;#34;(number)&amp;#34;, &amp;#34;tooltip&amp;#34;: { &amp;#34;content&amp;#34;: &amp;#34;(string)&amp;#34;, &amp;#34;label&amp;#34;: &amp;#34;(string)&amp;#34; }, &amp;#34;valid&amp;#34;: &amp;#34;(boolean)&amp;#34;, &amp;#34;validateInProgress&amp;#34;: &amp;#34;(boolean)&amp;#34;, &amp;#34;value&amp;#34;: &amp;#34;(string)&amp;#34;, &amp;#34;visible&amp;#34;: &amp;#34;(boolean)&amp;#34; }, &amp;#34;readonly&amp;#34;: &amp;#34;(boolean)&amp;#34;, &amp;#34;refreshOptionsButton&amp;#34;: { &amp;#34;refPvmBeforeRefresh&amp;#34;: { &amp;#34;additionalPartialLoad&amp;#34;: [ &amp;#34;(string)&amp;#34; ], &amp;#34;dataId&amp;#34;: &amp;#34;(string)&amp;#34;, &amp;#34;id&amp;#34;: &amp;#34;(string)&amp;#34;, &amp;#34;spQueryDepends&amp;#34;: [ &amp;#34;(string)&amp;#34; ], &amp;#34;waitingId&amp;#34;: &amp;#34;(string)&amp;#34; } }, &amp;#34;required&amp;#34;: &amp;#34;(boolean)&amp;#34;, &amp;#34;rows&amp;#34;: &amp;#34;(number)&amp;#34;, &amp;#34;scaleByContent&amp;#34;: &amp;#34;(boolean)&amp;#34;, &amp;#34;searchText&amp;#34;: &amp;#34;(string)&amp;#34;, &amp;#34;step&amp;#34;: &amp;#34;(number)&amp;#34;, &amp;#34;style&amp;#34;: &amp;#34;(string)&amp;#34;, &amp;#34;timePicker&amp;#34;: &amp;#34;(boolean)&amp;#34;, &amp;#34;tooltip&amp;#34;: { &amp;#34;content&amp;#34;: &amp;#34;(string)&amp;#34;, &amp;#34;label&amp;#34;: &amp;#34;(string)&amp;#34; }, &amp;#34;ttlInSec&amp;#34;: &amp;#34;(number)&amp;#34;, &amp;#34;type&amp;#34;: &amp;#34;( text | select | duallist | submit | textarea | checkbox | radio | me-summary-btn | me-tabs | filecontent | url | tel | email | percent )&amp;#34;, &amp;#34;value&amp;#34;: &amp;#34;(string)&amp;#34;, &amp;#34;valueMultiplier&amp;#34;: &amp;#34;(number)&amp;#34;, &amp;#34;verticalColumns&amp;#34;: &amp;#34;(boolean)&amp;#34;, &amp;#34;viewSize&amp;#34;: &amp;#34;( xs | sm | lg )&amp;#34; }, &amp;#34;bindAttrs&amp;#34;: [ { &amp;#34;source&amp;#34;: &amp;#34;(string)&amp;#34;, &amp;#34;target&amp;#34;: &amp;#34;(string)&amp;#34; } ], &amp;#34;defaultValue&amp;#34;: &amp;#34;(any)&amp;#34;, &amp;#34;depends&amp;#34;: [ &amp;#34;(string)&amp;#34; ], &amp;#34;entityId&amp;#34;: &amp;#34;(string)&amp;#34;, &amp;#34;errors&amp;#34;: [ { &amp;#34;id&amp;#34;: &amp;#34;(string)&amp;#34;, &amp;#34;name&amp;#34;: &amp;#34;(string)&amp;#34; } ], &amp;#34;exportable&amp;#34;: &amp;#34;(boolean)&amp;#34;, &amp;#34;formHorizontal&amp;#34;: &amp;#34;(boolean)&amp;#34;, &amp;#34;help&amp;#34;: &amp;#34;(string)&amp;#34;, &amp;#34;icon&amp;#34;: &amp;#34;(string)&amp;#34;, &amp;#34;id&amp;#34;: &amp;#34;(string)&amp;#34;, &amp;#34;inlineForm&amp;#34;: &amp;#34;(boolean)&amp;#34;, &amp;#34;label&amp;#34;: &amp;#34;(string)&amp;#34;, &amp;#34;listen&amp;#34;: [ { &amp;#34;$promise&amp;#34;: &amp;#34;(any)&amp;#34;, &amp;#34;code&amp;#34;: [ &amp;#34;( ADD | SET, REMOVE )&amp;#34; ], &amp;#34;entityId&amp;#34;: &amp;#34;(string)&amp;#34;, &amp;#34;objectId&amp;#34;: &amp;#34;(string)&amp;#34;, &amp;#34;pubSubChannel&amp;#34;: [ &amp;#34;(string)&amp;#34; ], &amp;#34;refreshRefPvmData&amp;#34;: &amp;#34;(any)&amp;#34;, &amp;#34;reload&amp;#34;: &amp;#34;(any)&amp;#34;, &amp;#34;selectAfterAdd&amp;#34;: &amp;#34;(boolean)&amp;#34; } ], &amp;#34;name&amp;#34;: &amp;#34;me-submit&amp;#34;, &amp;#34;offset&amp;#34;: &amp;#34;(number)&amp;#34;, &amp;#34;order&amp;#34;: &amp;#34;(number)&amp;#34;, &amp;#34;persistValueView&amp;#34;: &amp;#34;(boolean)&amp;#34;, &amp;#34;refPvmData&amp;#34;: { &amp;#34;additionalPartialLoad&amp;#34;: [ &amp;#34;(string)&amp;#34; ], &amp;#34;dataId&amp;#34;: &amp;#34;(string)&amp;#34;, &amp;#34;id&amp;#34;: &amp;#34;(string)&amp;#34;, &amp;#34;spQueryDepends&amp;#34;: [ &amp;#34;(string)&amp;#34; ], &amp;#34;waitingId&amp;#34;: &amp;#34;(string)&amp;#34; }, &amp;#34;refPvmValidator&amp;#34;: { &amp;#34;additionalPartialLoad&amp;#34;: [ &amp;#34;(string)&amp;#34; ], &amp;#34;dataId&amp;#34;: &amp;#34;(string)&amp;#34;, &amp;#34;id&amp;#34;: &amp;#34;(string)&amp;#34;, &amp;#34;spQueryDepends&amp;#34;: [ &amp;#34;(string)&amp;#34; ], &amp;#34;waitingId&amp;#34;: &amp;#34;(string)&amp;#34; }, &amp;#34;selectedValueView&amp;#34;: &amp;#34;(any)&amp;#34;, &amp;#34;selfDepends&amp;#34;: &amp;#34;(boolean)&amp;#34;, &amp;#34;span&amp;#34;: &amp;#34;(number)&amp;#34;, &amp;#34;tooltip&amp;#34;: { &amp;#34;content&amp;#34;: &amp;#34;(string)&amp;#34;, &amp;#34;label&amp;#34;: &amp;#34;(string)&amp;#34; }, &amp;#34;valid&amp;#34;: &amp;#34;(boolean)&amp;#34;, &amp;#34;validateInProgress&amp;#34;: &amp;#34;(boolean)&amp;#34;, &amp;#34;value&amp;#34;: &amp;#34;(string)&amp;#34;, &amp;#34;visible&amp;#34;: &amp;#34;(boolean)&amp;#34; } @default &amp;ldquo;left&amp;rdquo;</description>
    </item>
    
    <item>
      <title>Элемент me-table</title>
      <link>https://developers.devision.io/meta/reference/ui_controls/me-table/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://developers.devision.io/meta/reference/ui_controls/me-table/</guid>
      <description>Основной и единственный элемент для вывода таблиц и редактируемых таблиц
Общее Обратите внимание на структуру всех классов
Структура { &amp;#34;__tid&amp;#34;: &amp;#34;(any)&amp;#34;, &amp;#34;align&amp;#34;: &amp;#34;(string)&amp;#34;, &amp;#34;analyzable&amp;#34;: &amp;#34;(boolean)&amp;#34;, &amp;#34;attrs&amp;#34;: { &amp;#34;addObjectButton&amp;#34;: { &amp;#34;cssClass&amp;#34;: &amp;#34;(string)&amp;#34;, &amp;#34;cssProperties&amp;#34;: &amp;#34;(string)&amp;#34;, &amp;#34;disabled&amp;#34;: &amp;#34;(boolean)&amp;#34;, &amp;#34;drawAsMainElementOnParentElemIsEmpty&amp;#34;: &amp;#34;(boolean)&amp;#34;, &amp;#34;env&amp;#34;: { &amp;#34;state&amp;#34;: &amp;#34;(string)&amp;#34; }, &amp;#34;icon&amp;#34;: &amp;#34;(string)&amp;#34;, &amp;#34;icon_image&amp;#34;: &amp;#34;(string)&amp;#34;, &amp;#34;pageId&amp;#34;: &amp;#34;(string)&amp;#34;, &amp;#34;title&amp;#34;: &amp;#34;(string)&amp;#34;, &amp;#34;tooltip&amp;#34;: { &amp;#34;content&amp;#34;: &amp;#34;(string)&amp;#34;, &amp;#34;label&amp;#34;: &amp;#34;(string)&amp;#34; } }, &amp;#34;childEntityId&amp;#34;: &amp;#34;(string)&amp;#34;, &amp;#34;editable&amp;#34;: { &amp;#34;hideAddRowButton&amp;#34;: &amp;#34;(true)&amp;#34; }, &amp;#34;entityCardLink&amp;#34;: &amp;#34;(any)&amp;#34;, &amp;#34;exportOptions&amp;#34;: { &amp;#34;dialog&amp;#34;: &amp;#34;(boolean)&amp;#34; }, &amp;#34;goalSeek&amp;#34;: { &amp;#34;variantsRefPvmData&amp;#34;: &amp;#34;(string)&amp;#34; }, &amp;#34;hiddenColumns&amp;#34;: { &amp;#34;allowedGroupIds&amp;#34;: [ &amp;#34;(string)&amp;#34; ], &amp;#34;columns&amp;#34;: [ &amp;#34;(string)&amp;#34; ] }, &amp;#34;menu&amp;#34;: { &amp;#34;entityId&amp;#34;: &amp;#34;(string)&amp;#34;, &amp;#34;env&amp;#34;: { &amp;#34;state&amp;#34;: &amp;#34;(string)&amp;#34; }, &amp;#34;icon&amp;#34;: &amp;#34;(string)&amp;#34;, &amp;#34;id&amp;#34;: &amp;#34;(string)&amp;#34;, &amp;#34;includeCellValues&amp;#34;: &amp;#34;(boolean)&amp;#34;, &amp;#34;includeColumnsMetadata&amp;#34;: &amp;#34;(boolean)&amp;#34;, &amp;#34;includeRowValues&amp;#34;: &amp;#34;(boolean)&amp;#34;, &amp;#34;modalSize&amp;#34;: &amp;#34;( xs, sm, md, lg, fullscreen, max )&amp;#34;, &amp;#34;modalTitle&amp;#34;: &amp;#34;(string)&amp;#34;, &amp;#34;mode&amp;#34;: &amp;#34;( modal, sidenav, hidden )&amp;#34;, &amp;#34;name&amp;#34;: &amp;#34;(string)&amp;#34;, &amp;#34;objectId&amp;#34;: &amp;#34;(string)&amp;#34;, &amp;#34;pageId&amp;#34;: &amp;#34;(string)&amp;#34; }, &amp;#34;options&amp;#34;: { &amp;#34;bodyCompile&amp;#34;: &amp;#34;(boolean)&amp;#34;, &amp;#34;entityCardLink&amp;#34;: &amp;#34;(boolean)&amp;#34;, &amp;#34;header&amp;#34;: &amp;#34;(boolean)&amp;#34;, &amp;#34;nowrapData&amp;#34;: &amp;#34;(boolean)&amp;#34;, &amp;#34;pinHeader&amp;#34;: &amp;#34;(boolean)&amp;#34;, &amp;#34;rowHeaders&amp;#34;: &amp;#34;(boolean)&amp;#34;, &amp;#34;rowsCounter&amp;#34;: &amp;#34;(boolean)&amp;#34;, &amp;#34;tableCssClass&amp;#34;: &amp;#34;(string)&amp;#34; }, &amp;#34;search&amp;#34;: { &amp;#34;placeholder&amp;#34;: &amp;#34;(string)&amp;#34;, &amp;#34;visible&amp;#34;: &amp;#34;(boolean)&amp;#34; } }, &amp;#34;bindAttrs&amp;#34;: [ { &amp;#34;source&amp;#34;: &amp;#34;(string)&amp;#34;, &amp;#34;target&amp;#34;: &amp;#34;(string)&amp;#34; } ], &amp;#34;cells&amp;#34;: [ &amp;#34;(any)&amp;#34; ], &amp;#34;changeState&amp;#34;: &amp;#34;(any)&amp;#34;, &amp;#34;defaultValue&amp;#34;: &amp;#34;(any)&amp;#34;, &amp;#34;depends&amp;#34;: [ &amp;#34;(string)&amp;#34; ], &amp;#34;entityId&amp;#34;: &amp;#34;(string)&amp;#34;, &amp;#34;errors&amp;#34;: [ { &amp;#34;id&amp;#34;: &amp;#34;(string)&amp;#34;, &amp;#34;name&amp;#34;: &amp;#34;(string)&amp;#34; } ], &amp;#34;exportable&amp;#34;: &amp;#34;(boolean)&amp;#34;, &amp;#34;filterable&amp;#34;: &amp;#34;(boolean)&amp;#34;, &amp;#34;formHorizontal&amp;#34;: &amp;#34;(boolean)&amp;#34;, &amp;#34;help&amp;#34;: &amp;#34;(string)&amp;#34;, &amp;#34;icon&amp;#34;: &amp;#34;(string)&amp;#34;, &amp;#34;id&amp;#34;: &amp;#34;(string)&amp;#34;, &amp;#34;inlineForm&amp;#34;: &amp;#34;(boolean)&amp;#34;, &amp;#34;label&amp;#34;: &amp;#34;(string)&amp;#34;, &amp;#34;listen&amp;#34;: [ { &amp;#34;$promise&amp;#34;: &amp;#34;(any)&amp;#34;, &amp;#34;code&amp;#34;: [ &amp;#34;( ADD | SET, REMOVE )&amp;#34; ], &amp;#34;entityId&amp;#34;: &amp;#34;(string)&amp;#34;, &amp;#34;objectId&amp;#34;: &amp;#34;(string)&amp;#34;, &amp;#34;pubSubChannel&amp;#34;: [ &amp;#34;(string)&amp;#34; ], &amp;#34;refreshRefPvmData&amp;#34;: &amp;#34;(any)&amp;#34;, &amp;#34;reload&amp;#34;: &amp;#34;(any)&amp;#34;, &amp;#34;selectAfterAdd&amp;#34;: &amp;#34;(boolean)&amp;#34; } ], &amp;#34;name&amp;#34;: &amp;#34;me-table&amp;#34;, &amp;#34;offset&amp;#34;: &amp;#34;(number)&amp;#34;, &amp;#34;order&amp;#34;: &amp;#34;(number)&amp;#34;, &amp;#34;persistValueView&amp;#34;: &amp;#34;(boolean)&amp;#34;, &amp;#34;refPvmData&amp;#34;: { &amp;#34;additionalPartialLoad&amp;#34;: [ &amp;#34;(string)&amp;#34; ], &amp;#34;dataId&amp;#34;: &amp;#34;(string)&amp;#34;, &amp;#34;id&amp;#34;: &amp;#34;(string)&amp;#34;, &amp;#34;spQueryDepends&amp;#34;: [ &amp;#34;(string)&amp;#34; ], &amp;#34;waitingId&amp;#34;: &amp;#34;(string)&amp;#34; }, &amp;#34;refPvmValidator&amp;#34;: { &amp;#34;additionalPartialLoad&amp;#34;: [ &amp;#34;(string)&amp;#34; ], &amp;#34;dataId&amp;#34;: &amp;#34;(string)&amp;#34;, &amp;#34;id&amp;#34;: &amp;#34;(string)&amp;#34;, &amp;#34;spQueryDepends&amp;#34;: [ &amp;#34;(string)&amp;#34; ], &amp;#34;waitingId&amp;#34;: &amp;#34;(string)&amp;#34; }, &amp;#34;selectedValueView&amp;#34;: &amp;#34;(any)&amp;#34;, &amp;#34;selfDepends&amp;#34;: &amp;#34;(boolean)&amp;#34;, &amp;#34;span&amp;#34;: &amp;#34;(number)&amp;#34;, &amp;#34;tooltip&amp;#34;: { &amp;#34;content&amp;#34;: &amp;#34;(string)&amp;#34;, &amp;#34;label&amp;#34;: &amp;#34;(string)&amp;#34; }, &amp;#34;valid&amp;#34;: &amp;#34;(boolean)&amp;#34;, &amp;#34;validateInProgress&amp;#34;: &amp;#34;(boolean)&amp;#34;, &amp;#34;value&amp;#34;: &amp;#34;(string)&amp;#34;, &amp;#34;visible&amp;#34;: &amp;#34;(boolean)&amp;#34; } @default &amp;ldquo;left&amp;rdquo;</description>
    </item>
    
    <item>
      <title>Элемент me-tabs</title>
      <link>https://developers.devision.io/meta/reference/ui_controls/me-tabs/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://developers.devision.io/meta/reference/ui_controls/me-tabs/</guid>
      <description>Элементы табсета ( [[IMeTabs.elems]] ) и есть набор табов
@example https://apps.devision.io/page?p=3708&amp;amp;a=35
@example https://apps.devision.io/page?p=4283&amp;amp;a=35
Общее Обратите внимание на структуру всех классов
Структура { &amp;#34;__tid&amp;#34;: &amp;#34;(any)&amp;#34;, &amp;#34;align&amp;#34;: &amp;#34;(string)&amp;#34;, &amp;#34;attrs&amp;#34;: { &amp;#34;entityCardLink&amp;#34;: { &amp;#34;drawActorList&amp;#34;: &amp;#34;(boolean)&amp;#34;, &amp;#34;drawTopMenu&amp;#34;: &amp;#34;(boolean)&amp;#34;, &amp;#34;env&amp;#34;: { &amp;#34;state&amp;#34;: &amp;#34;(string)&amp;#34; }, &amp;#34;modalSize&amp;#34;: &amp;#34;( xs, sm, md, lg, fullscreen, max )&amp;#34;, &amp;#34;modalTitle&amp;#34;: &amp;#34;(string)&amp;#34;, &amp;#34;mode&amp;#34;: &amp;#34;( modal, sidenav, hidden )&amp;#34;, &amp;#34;pageId&amp;#34;: &amp;#34;(string)&amp;#34; }, &amp;#34;loadAllOnInit&amp;#34;: &amp;#34;(boolean)&amp;#34;, &amp;#34;removable&amp;#34;: &amp;#34;(boolean)&amp;#34; }, &amp;#34;bindAttrs&amp;#34;: [ { &amp;#34;source&amp;#34;: &amp;#34;(string)&amp;#34;, &amp;#34;target&amp;#34;: &amp;#34;(string)&amp;#34; } ], &amp;#34;defaultValue&amp;#34;: &amp;#34;(any)&amp;#34;, &amp;#34;depends&amp;#34;: [ &amp;#34;(string)&amp;#34; ], &amp;#34;elems&amp;#34;: [ { &amp;#34;__tid&amp;#34;: &amp;#34;(any)&amp;#34;, &amp;#34;align&amp;#34;: &amp;#34;(string)&amp;#34;, &amp;#34;bindAttrs&amp;#34;: [ { &amp;#34;source&amp;#34;: &amp;#34;(string)&amp;#34;, &amp;#34;target&amp;#34;: &amp;#34;(string)&amp;#34; } ], &amp;#34;defaultValue&amp;#34;: &amp;#34;(any)&amp;#34;, &amp;#34;depends&amp;#34;: [ &amp;#34;(string)&amp;#34; ], &amp;#34;entityId&amp;#34;: &amp;#34;(string)&amp;#34;, &amp;#34;errors&amp;#34;: [ { &amp;#34;id&amp;#34;: &amp;#34;(string)&amp;#34;, &amp;#34;name&amp;#34;: &amp;#34;(string)&amp;#34; } ], &amp;#34;exportable&amp;#34;: &amp;#34;(boolean)&amp;#34;, &amp;#34;formHorizontal&amp;#34;: &amp;#34;(boolean)&amp;#34;, &amp;#34;help&amp;#34;: &amp;#34;(string)&amp;#34;, &amp;#34;icon&amp;#34;: &amp;#34;(string)&amp;#34;, &amp;#34;id&amp;#34;: &amp;#34;(string)&amp;#34;, &amp;#34;inlineForm&amp;#34;: &amp;#34;(boolean)&amp;#34;, &amp;#34;label&amp;#34;: &amp;#34;(string)&amp;#34;, &amp;#34;listen&amp;#34;: [ { &amp;#34;$promise&amp;#34;: &amp;#34;(any)&amp;#34;, &amp;#34;code&amp;#34;: [ &amp;#34;( ADD | SET, REMOVE )&amp;#34; ], &amp;#34;entityId&amp;#34;: &amp;#34;(string)&amp;#34;, &amp;#34;objectId&amp;#34;: &amp;#34;(string)&amp;#34;, &amp;#34;pubSubChannel&amp;#34;: [ &amp;#34;(string)&amp;#34; ], &amp;#34;refreshRefPvmData&amp;#34;: &amp;#34;(any)&amp;#34;, &amp;#34;reload&amp;#34;: &amp;#34;(any)&amp;#34;, &amp;#34;selectAfterAdd&amp;#34;: &amp;#34;(boolean)&amp;#34; } ], &amp;#34;name&amp;#34;: &amp;#34;(string)&amp;#34;, &amp;#34;offset&amp;#34;: &amp;#34;(number)&amp;#34;, &amp;#34;order&amp;#34;: &amp;#34;(number)&amp;#34;, &amp;#34;persistValueView&amp;#34;: &amp;#34;(boolean)&amp;#34;, &amp;#34;refPvmData&amp;#34;: { &amp;#34;additionalPartialLoad&amp;#34;: [ &amp;#34;(string)&amp;#34; ], &amp;#34;dataId&amp;#34;: &amp;#34;(string)&amp;#34;, &amp;#34;id&amp;#34;: &amp;#34;(string)&amp;#34;, &amp;#34;spQueryDepends&amp;#34;: [ &amp;#34;(string)&amp;#34; ], &amp;#34;waitingId&amp;#34;: &amp;#34;(string)&amp;#34; }, &amp;#34;refPvmValidator&amp;#34;: { &amp;#34;additionalPartialLoad&amp;#34;: [ &amp;#34;(string)&amp;#34; ], &amp;#34;dataId&amp;#34;: &amp;#34;(string)&amp;#34;, &amp;#34;id&amp;#34;: &amp;#34;(string)&amp;#34;, &amp;#34;spQueryDepends&amp;#34;: [ &amp;#34;(string)&amp;#34; ], &amp;#34;waitingId&amp;#34;: &amp;#34;(string)&amp;#34; }, &amp;#34;selectedValueView&amp;#34;: &amp;#34;(any)&amp;#34;, &amp;#34;selfDepends&amp;#34;: &amp;#34;(boolean)&amp;#34;, &amp;#34;span&amp;#34;: &amp;#34;(number)&amp;#34;, &amp;#34;tooltip&amp;#34;: { &amp;#34;content&amp;#34;: &amp;#34;(string)&amp;#34;, &amp;#34;label&amp;#34;: &amp;#34;(string)&amp;#34; }, &amp;#34;valid&amp;#34;: &amp;#34;(boolean)&amp;#34;, &amp;#34;validateInProgress&amp;#34;: &amp;#34;(boolean)&amp;#34;, &amp;#34;value&amp;#34;: &amp;#34;(string)&amp;#34;, &amp;#34;visible&amp;#34;: &amp;#34;(boolean)&amp;#34; } ], &amp;#34;entityId&amp;#34;: &amp;#34;(string)&amp;#34;, &amp;#34;errors&amp;#34;: [ { &amp;#34;id&amp;#34;: &amp;#34;(string)&amp;#34;, &amp;#34;name&amp;#34;: &amp;#34;(string)&amp;#34; } ], &amp;#34;exportable&amp;#34;: &amp;#34;(boolean)&amp;#34;, &amp;#34;formHorizontal&amp;#34;: &amp;#34;(boolean)&amp;#34;, &amp;#34;help&amp;#34;: &amp;#34;(string)&amp;#34;, &amp;#34;icon&amp;#34;: &amp;#34;(string)&amp;#34;, &amp;#34;id&amp;#34;: &amp;#34;(string)&amp;#34;, &amp;#34;inlineForm&amp;#34;: &amp;#34;(boolean)&amp;#34;, &amp;#34;label&amp;#34;: &amp;#34;(string)&amp;#34;, &amp;#34;listen&amp;#34;: [ { &amp;#34;$promise&amp;#34;: &amp;#34;(any)&amp;#34;, &amp;#34;code&amp;#34;: [ &amp;#34;( ADD | SET, REMOVE )&amp;#34; ], &amp;#34;entityId&amp;#34;: &amp;#34;(string)&amp;#34;, &amp;#34;objectId&amp;#34;: &amp;#34;(string)&amp;#34;, &amp;#34;pubSubChannel&amp;#34;: [ &amp;#34;(string)&amp;#34; ], &amp;#34;refreshRefPvmData&amp;#34;: &amp;#34;(any)&amp;#34;, &amp;#34;reload&amp;#34;: &amp;#34;(any)&amp;#34;, &amp;#34;selectAfterAdd&amp;#34;: &amp;#34;(boolean)&amp;#34; } ], &amp;#34;name&amp;#34;: &amp;#34;me-tabs&amp;#34;, &amp;#34;offset&amp;#34;: &amp;#34;(number)&amp;#34;, &amp;#34;order&amp;#34;: &amp;#34;(number)&amp;#34;, &amp;#34;persistValueView&amp;#34;: &amp;#34;(boolean)&amp;#34;, &amp;#34;refPvmData&amp;#34;: { &amp;#34;additionalPartialLoad&amp;#34;: [ &amp;#34;(string)&amp;#34; ], &amp;#34;dataId&amp;#34;: &amp;#34;(string)&amp;#34;, &amp;#34;id&amp;#34;: &amp;#34;(string)&amp;#34;, &amp;#34;spQueryDepends&amp;#34;: [ &amp;#34;(string)&amp;#34; ], &amp;#34;waitingId&amp;#34;: &amp;#34;(string)&amp;#34; }, &amp;#34;refPvmValidator&amp;#34;: { &amp;#34;additionalPartialLoad&amp;#34;: [ &amp;#34;(string)&amp;#34; ], &amp;#34;dataId&amp;#34;: &amp;#34;(string)&amp;#34;, &amp;#34;id&amp;#34;: &amp;#34;(string)&amp;#34;, &amp;#34;spQueryDepends&amp;#34;: [ &amp;#34;(string)&amp;#34; ], &amp;#34;waitingId&amp;#34;: &amp;#34;(string)&amp;#34; }, &amp;#34;selectedValueView&amp;#34;: &amp;#34;(any)&amp;#34;, &amp;#34;selfDepends&amp;#34;: &amp;#34;(boolean)&amp;#34;, &amp;#34;span&amp;#34;: &amp;#34;(number)&amp;#34;, &amp;#34;tooltip&amp;#34;: { &amp;#34;content&amp;#34;: &amp;#34;(string)&amp;#34;, &amp;#34;label&amp;#34;: &amp;#34;(string)&amp;#34; }, &amp;#34;valid&amp;#34;: &amp;#34;(boolean)&amp;#34;, &amp;#34;validateInProgress&amp;#34;: &amp;#34;(boolean)&amp;#34;, &amp;#34;value&amp;#34;: &amp;#34;(string)&amp;#34;, &amp;#34;visible&amp;#34;: &amp;#34;(boolean)&amp;#34; } @default &amp;ldquo;left&amp;rdquo;</description>
    </item>
    
    <item>
      <title>Элемент me-wizard</title>
      <link>https://developers.devision.io/meta/reference/ui_controls/me-wizard/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://developers.devision.io/meta/reference/ui_controls/me-wizard/</guid>
      <description>Элементы визарда ( [[IMeWizard.elems]] ) и есть набор шагов
@example https://apps.devision.io/page?p=3570&amp;amp;a=35
Общее Обратите внимание на структуру всех классов
Структура { &amp;#34;__tid&amp;#34;: &amp;#34;(any)&amp;#34;, &amp;#34;align&amp;#34;: &amp;#34;(string)&amp;#34;, &amp;#34;attrs&amp;#34;: { &amp;#34;loadAllOnInit&amp;#34;: &amp;#34;(boolean)&amp;#34; }, &amp;#34;bindAttrs&amp;#34;: [ { &amp;#34;source&amp;#34;: &amp;#34;(string)&amp;#34;, &amp;#34;target&amp;#34;: &amp;#34;(string)&amp;#34; } ], &amp;#34;defaultValue&amp;#34;: &amp;#34;(any)&amp;#34;, &amp;#34;depends&amp;#34;: [ &amp;#34;(string)&amp;#34; ], &amp;#34;elems&amp;#34;: [ { &amp;#34;__tid&amp;#34;: &amp;#34;(any)&amp;#34;, &amp;#34;align&amp;#34;: &amp;#34;(string)&amp;#34;, &amp;#34;bindAttrs&amp;#34;: [ { &amp;#34;source&amp;#34;: &amp;#34;(string)&amp;#34;, &amp;#34;target&amp;#34;: &amp;#34;(string)&amp;#34; } ], &amp;#34;defaultValue&amp;#34;: &amp;#34;(any)&amp;#34;, &amp;#34;depends&amp;#34;: [ &amp;#34;(string)&amp;#34; ], &amp;#34;entityId&amp;#34;: &amp;#34;(string)&amp;#34;, &amp;#34;errors&amp;#34;: [ { &amp;#34;id&amp;#34;: &amp;#34;(string)&amp;#34;, &amp;#34;name&amp;#34;: &amp;#34;(string)&amp;#34; } ], &amp;#34;exportable&amp;#34;: &amp;#34;(boolean)&amp;#34;, &amp;#34;formHorizontal&amp;#34;: &amp;#34;(boolean)&amp;#34;, &amp;#34;help&amp;#34;: &amp;#34;(string)&amp;#34;, &amp;#34;icon&amp;#34;: &amp;#34;(string)&amp;#34;, &amp;#34;id&amp;#34;: &amp;#34;(string)&amp;#34;, &amp;#34;inlineForm&amp;#34;: &amp;#34;(boolean)&amp;#34;, &amp;#34;label&amp;#34;: &amp;#34;(string)&amp;#34;, &amp;#34;listen&amp;#34;: [ { &amp;#34;$promise&amp;#34;: &amp;#34;(any)&amp;#34;, &amp;#34;code&amp;#34;: [ &amp;#34;( ADD | SET, REMOVE )&amp;#34; ], &amp;#34;entityId&amp;#34;: &amp;#34;(string)&amp;#34;, &amp;#34;objectId&amp;#34;: &amp;#34;(string)&amp;#34;, &amp;#34;pubSubChannel&amp;#34;: [ &amp;#34;(string)&amp;#34; ], &amp;#34;refreshRefPvmData&amp;#34;: &amp;#34;(any)&amp;#34;, &amp;#34;reload&amp;#34;: &amp;#34;(any)&amp;#34;, &amp;#34;selectAfterAdd&amp;#34;: &amp;#34;(boolean)&amp;#34; } ], &amp;#34;name&amp;#34;: &amp;#34;(string)&amp;#34;, &amp;#34;offset&amp;#34;: &amp;#34;(number)&amp;#34;, &amp;#34;order&amp;#34;: &amp;#34;(number)&amp;#34;, &amp;#34;persistValueView&amp;#34;: &amp;#34;(boolean)&amp;#34;, &amp;#34;refPvmData&amp;#34;: { &amp;#34;additionalPartialLoad&amp;#34;: [ &amp;#34;(string)&amp;#34; ], &amp;#34;dataId&amp;#34;: &amp;#34;(string)&amp;#34;, &amp;#34;id&amp;#34;: &amp;#34;(string)&amp;#34;, &amp;#34;spQueryDepends&amp;#34;: [ &amp;#34;(string)&amp;#34; ], &amp;#34;waitingId&amp;#34;: &amp;#34;(string)&amp;#34; }, &amp;#34;refPvmValidator&amp;#34;: { &amp;#34;additionalPartialLoad&amp;#34;: [ &amp;#34;(string)&amp;#34; ], &amp;#34;dataId&amp;#34;: &amp;#34;(string)&amp;#34;, &amp;#34;id&amp;#34;: &amp;#34;(string)&amp;#34;, &amp;#34;spQueryDepends&amp;#34;: [ &amp;#34;(string)&amp;#34; ], &amp;#34;waitingId&amp;#34;: &amp;#34;(string)&amp;#34; }, &amp;#34;selectedValueView&amp;#34;: &amp;#34;(any)&amp;#34;, &amp;#34;selfDepends&amp;#34;: &amp;#34;(boolean)&amp;#34;, &amp;#34;span&amp;#34;: &amp;#34;(number)&amp;#34;, &amp;#34;tooltip&amp;#34;: { &amp;#34;content&amp;#34;: &amp;#34;(string)&amp;#34;, &amp;#34;label&amp;#34;: &amp;#34;(string)&amp;#34; }, &amp;#34;valid&amp;#34;: &amp;#34;(boolean)&amp;#34;, &amp;#34;validateInProgress&amp;#34;: &amp;#34;(boolean)&amp;#34;, &amp;#34;value&amp;#34;: &amp;#34;(string)&amp;#34;, &amp;#34;visible&amp;#34;: &amp;#34;(boolean)&amp;#34; } ], &amp;#34;entityId&amp;#34;: &amp;#34;(string)&amp;#34;, &amp;#34;errors&amp;#34;: [ { &amp;#34;id&amp;#34;: &amp;#34;(string)&amp;#34;, &amp;#34;name&amp;#34;: &amp;#34;(string)&amp;#34; } ], &amp;#34;exportable&amp;#34;: &amp;#34;(boolean)&amp;#34;, &amp;#34;formHorizontal&amp;#34;: &amp;#34;(boolean)&amp;#34;, &amp;#34;help&amp;#34;: &amp;#34;(string)&amp;#34;, &amp;#34;icon&amp;#34;: &amp;#34;(string)&amp;#34;, &amp;#34;id&amp;#34;: &amp;#34;(string)&amp;#34;, &amp;#34;inlineForm&amp;#34;: &amp;#34;(boolean)&amp;#34;, &amp;#34;label&amp;#34;: &amp;#34;(string)&amp;#34;, &amp;#34;listen&amp;#34;: [ { &amp;#34;$promise&amp;#34;: &amp;#34;(any)&amp;#34;, &amp;#34;code&amp;#34;: [ &amp;#34;( ADD | SET, REMOVE )&amp;#34; ], &amp;#34;entityId&amp;#34;: &amp;#34;(string)&amp;#34;, &amp;#34;objectId&amp;#34;: &amp;#34;(string)&amp;#34;, &amp;#34;pubSubChannel&amp;#34;: [ &amp;#34;(string)&amp;#34; ], &amp;#34;refreshRefPvmData&amp;#34;: &amp;#34;(any)&amp;#34;, &amp;#34;reload&amp;#34;: &amp;#34;(any)&amp;#34;, &amp;#34;selectAfterAdd&amp;#34;: &amp;#34;(boolean)&amp;#34; } ], &amp;#34;name&amp;#34;: &amp;#34;me-wizard&amp;#34;, &amp;#34;offset&amp;#34;: &amp;#34;(number)&amp;#34;, &amp;#34;order&amp;#34;: &amp;#34;(number)&amp;#34;, &amp;#34;persistValueView&amp;#34;: &amp;#34;(boolean)&amp;#34;, &amp;#34;refPvmData&amp;#34;: { &amp;#34;additionalPartialLoad&amp;#34;: [ &amp;#34;(string)&amp;#34; ], &amp;#34;dataId&amp;#34;: &amp;#34;(string)&amp;#34;, &amp;#34;id&amp;#34;: &amp;#34;(string)&amp;#34;, &amp;#34;spQueryDepends&amp;#34;: [ &amp;#34;(string)&amp;#34; ], &amp;#34;waitingId&amp;#34;: &amp;#34;(string)&amp;#34; }, &amp;#34;refPvmValidator&amp;#34;: { &amp;#34;additionalPartialLoad&amp;#34;: [ &amp;#34;(string)&amp;#34; ], &amp;#34;dataId&amp;#34;: &amp;#34;(string)&amp;#34;, &amp;#34;id&amp;#34;: &amp;#34;(string)&amp;#34;, &amp;#34;spQueryDepends&amp;#34;: [ &amp;#34;(string)&amp;#34; ], &amp;#34;waitingId&amp;#34;: &amp;#34;(string)&amp;#34; }, &amp;#34;selectedValueView&amp;#34;: &amp;#34;(any)&amp;#34;, &amp;#34;selfDepends&amp;#34;: &amp;#34;(boolean)&amp;#34;, &amp;#34;span&amp;#34;: &amp;#34;(number)&amp;#34;, &amp;#34;tooltip&amp;#34;: { &amp;#34;content&amp;#34;: &amp;#34;(string)&amp;#34;, &amp;#34;label&amp;#34;: &amp;#34;(string)&amp;#34; }, &amp;#34;valid&amp;#34;: &amp;#34;(boolean)&amp;#34;, &amp;#34;validateInProgress&amp;#34;: &amp;#34;(boolean)&amp;#34;, &amp;#34;value&amp;#34;: &amp;#34;(string)&amp;#34;, &amp;#34;visible&amp;#34;: &amp;#34;(boolean)&amp;#34; } @default &amp;ldquo;left&amp;rdquo;</description>
    </item>
    
  </channel>
</rss>
