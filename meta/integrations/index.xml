<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Интеграции on META | Devision Developers</title>
    <link>https://developers.devision.io/meta/integrations/</link>
    <description>Recent content in Интеграции on META | Devision Developers</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ru-ru</language><atom:link href="https://developers.devision.io/meta/integrations/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Billing</title>
      <link>https://developers.devision.io/meta/integrations/billing/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://developers.devision.io/meta/integrations/billing/</guid>
      <description>Java API
Example
&amp;lt;elem states=&amp;#34;default&amp;#34;&amp;gt; &amp;lt;tpl&amp;gt; &amp;lt;p&amp;gt; BillingService нужен для накладывания ограничений на доступный функционал &amp;lt;/p&amp;gt; &amp;lt;p class=&amp;#34;text-warning&amp;#34;&amp;gt; Для просмотра логов откройте chrome devtools console и включили dev mode в мете. &amp;lt;/p&amp;gt; &amp;lt;a ng-click=&amp;#34;changeState(&amp;#39;test_in_js&amp;#39;, {})&amp;#34; href&amp;gt;Go To JS&amp;lt;/a&amp;gt; &amp;lt;/tpl&amp;gt; &amp;lt;/elem&amp;gt; &amp;lt;script type=&amp;#34;meta/js&amp;#34; id=&amp;#34;ex0&amp;#34; states=&amp;#34;test_in_js&amp;#34;&amp;gt; function main(log) { log.info(&amp;#39;ex0 выполняется в любом случае, так как он перед проверкой по биллингу&amp;#39;); } &amp;lt;/script&amp;gt; &amp;lt;script type=&amp;#34;meta/js&amp;#34; id=&amp;#34;ex1&amp;#34; states=&amp;#34;test_in_js&amp;#34;&amp;gt; function main(log, env, vm, pvm, BillingService) { log.</description>
    </item>
    
    <item>
      <title>ApiClientService</title>
      <link>https://developers.devision.io/meta/integrations/api_client/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://developers.devision.io/meta/integrations/api_client/</guid>
      <description>Если вы хотите работать со внутренними api Прямо из META
&amp;lt;script id=&amp;#34;res&amp;#34; type=&amp;#34;meta/js&amp;#34;&amp;gt; function main(ApiClientService, vm) { var apiclient = ApiClientService.buildClient(&amp;#34;accountmanagement&amp;#34;, &amp;#34;v1beta1&amp;#34;, env.userId, [&amp;#34;meta.dev&amp;#34;]); vm.data = apiclient.request(&amp;#34;POST&amp;#34;, &amp;#34;budget-order/get&amp;#34;, { &amp;#34;access_scope&amp;#34;: { &amp;#34;client_id&amp;#34;: &amp;#34;28&amp;#34;, &amp;#34;agency_account&amp;#34;: &amp;#34;larisoll2323@gmail.com&amp;#34;, &amp;#34;operation_id&amp;#34;: MetaUtils.uuid.randomUUID() }, &amp;#34;engine&amp;#34;: &amp;#34;GOOGLE_ADS&amp;#34;, &amp;#34;account&amp;#34;: &amp;#34;9012273876&amp;#34; }).getMap(); // or .getObject() // or.getList() } &amp;lt;/script&amp;gt; &amp;lt;elem&amp;gt; &amp;lt;tpl&amp;gt; {{res|json}} &amp;lt;/tpl&amp;gt; &amp;lt;/elem&amp;gt; </description>
    </item>
    
    <item>
      <title>Google Analytics</title>
      <link>https://developers.devision.io/meta/integrations/google_analytics/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://developers.devision.io/meta/integrations/google_analytics/</guid>
      <description>Google Analytics уже глубоко интегрирован в платформу и многие нужные вам события с интерфейса и backend зачастую автоматически будут поступать в GA.
Автоматически собираемые действия  Открытия страниц Открытие модальных окон (в т.ч. sidenav) Регистрация События ADD из ObjectLogService Клик на кнопку добавление объекта в me-select Выбор пункта меню в me-input type=menu-btn  Отправка событий через Measurement Protocol В скриптах meta/js или meta/sql (с помощью шаблонизатора) вы можете отправлять нужные вам события в GA.</description>
    </item>
    
    <item>
      <title>Вход через META</title>
      <link>https://developers.devision.io/meta/integrations/login_with_meta/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://developers.devision.io/meta/integrations/login_with_meta/</guid>
      <description>Приложение запрашивает код Получение токена в обмен на код, извлеченный из URL:
 Приложение направляет пользователя на страницу META.OAuth, где он может разрешить доступ к своим данным. Пользователь разрешает доступ приложению. META.OAuth перенаправляет пользователя на адрес, указанный в поле Callback URL при регистрации приложения. Код подтверждения (или описание ошибки) передается в параметре URL перенаправления. Приложение получает адрес перенаправления и извлекает код подтверждения. Приложение отправляет POST-запрос с кодом. META.OAuth возвращает токен или ошибку в теле ответа.</description>
    </item>
    
    <item>
      <title>Embedded Frames</title>
      <link>https://developers.devision.io/meta/integrations/embedded_frames/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://developers.devision.io/meta/integrations/embedded_frames/</guid>
      <description>Пример на основе интеграции старого Garpun в новое META-приложение
В Garpun мы разместили код
&amp;lt;script type=&amp;#34;text/javascript&amp;#34;&amp;gt; function inIframe() { try { return window.self !== window.top; } catch (e) { return true; } } document.addEventListener(&amp;#34;DOMContentLoaded&amp;#34;, function () { if (inIframe()) { // Это мы использовали чтобы убрать ненужные кнопки  document.body.classList.add(&amp;#34;garpunEmbedded&amp;#34;); } document.body.classList.remove(&amp;#34;garpunLoading&amp;#34;); }); //  (metaframewatcher = window.metaframewatcher || []).push({ height_classes: [&amp;#39;t_window&amp;#39;, &amp;#39;cover&amp;#39;, &amp;#39;stickyWrap&amp;#39;, &amp;#39;mainBox&amp;#39;] }); if (inIframe()) { // Это не относится к задаче встраивания напрямую, но наверняка будет полезно для GTM для отключения виджетов поддержки и пр  window[&amp;#39;IS_EMBED_MODE&amp;#39;] = true; // Размещаем загрузки интеграционного скрипта  (function() { var lt = document.</description>
    </item>
    
    <item>
      <title>Nginx Proxy Headers</title>
      <link>https://developers.devision.io/meta/integrations/nginx/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://developers.devision.io/meta/integrations/nginx/</guid>
      <description>Настраиваются на nginx при проксировании запосов в Java приложение, или через Chrome плагин ModHeader (https://chrome.google.com/webstore/detail/modheader/idgpnmonknjnojddfkpgkljpfnnfcklj) для разработки
X-META-AppID Говорит о том, что МЕТА должна отвечать пользователю как конкретное приложение с установленным лого, css и пр
server { listen *:80; server_name example.com; charset utf8; location / { proxy_set_header Host $host; proxy_set_header X-Real-IP $remote_addr; proxy_set_header X-META-AppID 3; proxy_pass http://127.0.0.1:8083; } } X-META-Allowed-Apps Говорит о том, что МЕТА должна отвечать пользователю как конкретное приложение с установленным лого, css и пр Отличается от HEADER_X_META_APP_ID тем, что это будет работать как просто meta.</description>
    </item>
    
    <item>
      <title>SDK</title>
      <link>https://developers.devision.io/meta/integrations/sdk/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://developers.devision.io/meta/integrations/sdk/</guid>
      <description>Существует официальная библиотека для работу с метой на Python3
Исходники
Документация</description>
    </item>
    
  </channel>
</rss>
