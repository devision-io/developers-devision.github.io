[
{
	"uri": "https://developers.devision.io/metasdk/services/introduction/",
	"title": "Введение",
	"tags": [],
	"description": "",
	"content": "Install Для metasdk и для локальной меты\nУстановите токен разработчика Получите файл токен разработчика. Установите developer_settings.json в домашнюю директорию в папку .rwmeta Например:\nMacOS: /Users/arturgspb/.rwmeta/developer_settings.json Windows: C:\\Users\\userXXXXXX\\.rwmeta\\developer_settings.json Linux: ~/.rwmeta/developer_settings.json Установите metasdk Для разработки скриптов на python. Для локальной меты это не надо.\nПоддерживается Python 3.6+\npip3 install metasdk --upgrade --no-cache Full Examples Полный список примеров\nUsage import logging from metasdk import MetaApp # Инициализация приложения # конфигурирует логирование и пр. META = MetaApp() # Проверьте работоспособность установки r = META.db(\u0026#34;meta\u0026#34;).one(\u0026#34;SELECT NOW() as now\u0026#34;) print(r) # работает стандартное логирование logging.info(\u0026#39;Hello, from Meta App Script!\u0026#39;) # Можно получить экземпляр для логирования с улучшенным интерфейсом для более удобного прикладывания контекста log = META.log log.warning(\u0026#39;Do warning log\u0026#39;, {\u0026#34;count\u0026#34;: 1, \u0026#34;mycontextParam\u0026#34;: [1, 3, 4]}) "
},
{
	"uri": "https://developers.devision.io/metasdk/services/",
	"title": "Сервисы",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://developers.devision.io/metasdk/services/lock_service/",
	"title": "LockService",
	"tags": [],
	"description": "",
	"content": "Используется для ограничения одновременно запущенных участков кода. Это бывает необходимо в ситуациях когда есть жесткие лимиты от внешнего апи на количество одновременных обращений, или в ситуациях когда мы работаем с объектом для которого чувствительны одновременные изменения, например бюджет аккаунта.\nОписание параметров key: Ключ, который определяет уникальность выполняемого участка кода.\nttl_in_sec: Сколько времени ключ будет жить в Redis. По истечении времени ключ удалится и начнется выполнение следующего участка кода. Если указать слишком маленькое значение, код не успеет выполниться за это время и начнется выполнение следующего скрипта.\ntimeout_in_sec: Сколько времени функция lock будет пытаться поставить участок кода на выполнение. По истечении времени вызовется исключение. Слишком большое значение может привести к зависанию кода.\nqueue_width: Максимально возможное количество одновременно запущенных участков кода\nfield_to_uniq: добавляет к ключу в редисе значение аргумента переданного в функции. Например, вы передали в функцию x=666, к ключу добавится 666.\nimport time import threading from metasdk import MetaApp Meta = MetaApp() lock = Meta.LockService.lock TIME_TO_SLEEP = 20 TIMEOUT = 50 TTL = 50 KEY = \u0026#34;gogo\u0026#34; WIDTH = 2 FIELD_TO_UNIQUE_DECORATOR = [\u0026#34;x\u0026#34;] def lock_via_with(name): with lock(timeout_in_sec=TIMEOUT, ttl_in_sec=TTL, key=KEY, queue_width=WIDTH): print(\u0026#34;%s is running\u0026#34; % name) time.sleep(TIME_TO_SLEEP) print(\u0026#34;%s is stop\u0026#34; % name) @Meta.LockService.lock_decorator(timeout_in_sec=TIMEOUT, ttl_in_sec=TTL, key=KEY, queue_width=WIDTH, field_to_uniq=FIELD_TO_UNIQUE_DECORATOR) def lock_via_decorator(name, x): print(\u0026#34;%s is running\u0026#34; % name) time.sleep(TIME_TO_SLEEP) print(\u0026#34;%s is stop\u0026#34; % name) # Меняем target, если нужно for i in range(1, 4): # t = threading.Thread(target=lock_via_with, kwargs={\u0026#34;name\u0026#34;: \u0026#34;go\u0026#34; + str(i)}) t = threading.Thread(target=lock_via_decorator, kwargs={\u0026#34;name\u0026#34;: \u0026#34;go\u0026#34; + str(i), \u0026#34;x\u0026#34;: 666}) t.start() "
},
{
	"uri": "https://developers.devision.io/metasdk/services/rpc/",
	"title": "Meta Services",
	"tags": [],
	"description": "",
	"content": "Это API внутренних функций Меты, все эти функции доступны вам через редактор в Web-интерфейсе\nПримеры Список примеров\nCacheService from metasdk import MetaApp META = MetaApp() log = META.log META.auth_user_id = 11790 # Пример прогрева кеша result = META.CacheService.warm_page_cache( \u0026#39;88\u0026#39;, \u0026#39;4993\u0026#39;, None, None, { \u0026#34;stateParams\u0026#34;: { \u0026#34;firstLoading\u0026#34;: True } } ) print(u\u0026#34;export_res = %s\u0026#34; % str(result)) MediaService import os from metasdk import MetaApp META = MetaApp() log = META.log os.chdir(os.path.dirname(os.path.abspath(__file__))) __DIR__ = os.getcwd() + \u0026#34;/\u0026#34; upload_file = open(__DIR__ + \u0026#39;../assets/load_data_sample.tsv\u0026#39;, \u0026#39;rb\u0026#39;) MediaService = META.MediaService result = MediaService.upload(upload_file, { \u0026#34;isPrivate\u0026#34;: True, # Файл будет доступен только для пользователя, работающего с апи \u0026#34;ttlInSec\u0026#34;: 9999, # Обязательно для временных файлов. Кол-во секунд через которые мета автоматически удалит файл \u0026#34;entityId\u0026#34;: 2770, \u0026#34;objectId\u0026#34;: \u0026#34;114aecf5-04f1-44fa-8ad1-842b7f31a2df\u0026#34;, \u0026#34;info\u0026#34;: {\u0026#34;test\u0026#34;: True} # Метаданные файла }) print(u\u0026#34;result = %s\u0026#34; % str(result)) # result = {\u0026#39;id\u0026#39;: \u0026#39;ae2ef57a-c948-4ba4-8b68-6598352a2eb8\u0026#39;, \u0026#39;name\u0026#39;: \u0026#39;load_data_sample.tsv\u0026#39;, \u0026#39;extension\u0026#39;: \u0026#39;tsv\u0026#39;, \u0026#39;mime\u0026#39;: \u0026#39;text\u0026#39;, \u0026#39;url\u0026#39;: None, \u0026#39;creationTime\u0026#39;: \u0026#39;2017-11-08T16:57:46Z\u0026#39;, \u0026#39;userId\u0026#39;: 4501, \u0026#39;fileSize\u0026#39;: 256, \u0026#39;info\u0026#39;: {\u0026#39;test\u0026#39;: True}, \u0026#39;private\u0026#39;: True, \u0026#39;downloadUrlPart\u0026#39;: \u0026#39;/api/meta/v1/media/d/ae2ef57a-c948-4ba4-8b68-6598352a2eb8\u0026#39;} # Скачать файл result = MediaService.download(\u0026#39;ae2ef57a-c948-4ba4-8b68-6598352a2eb8\u0026#39;,as_stream=False) print(u\u0026#34;result.content = %s\u0026#34; % str(result.content)) # Информация по файлу resp = MediaService.info(\u0026#39;5665d822-2edb-48b8-85a5-817043900a9a\u0026#39;) print(u\u0026#34;resp = %s\u0026#34; % str(resp)) # resp = {\u0026#39;id\u0026#39;: \u0026#39;5665d822-2edb-48b8-85a5-817043900a9a\u0026#39;, \u0026#39;name\u0026#39;: \u0026#39;load_data_sample.tsv\u0026#39;, \u0026#39;extension\u0026#39;: \u0026#39;tsv\u0026#39;, \u0026#39;mime\u0026#39;: \u0026#39;text\u0026#39;, \u0026#39;url\u0026#39;: None, \u0026#39;creationTime\u0026#39;: \u0026#39;2017-11-08T16:45:00Z\u0026#39;, \u0026#39;userId\u0026#39;: 4501, \u0026#39;fileSize\u0026#39;: 256, \u0026#39;info\u0026#39;: {\u0026#39;test\u0026#39;: True}, \u0026#39;private\u0026#39;: True, \u0026#39;downloadUrlPart\u0026#39;: \u0026#39;/api/meta/v1/media/d/5665d822-2edb-48b8-85a5-817043900a9a\u0026#39;} Это выведет вам что-то вроде такого:\n# 16:48:19:INFO: Читаем настройки разработчика из локального файла {\u0026#39;path\u0026#39;: \u0026#39;/Users/arturgspb/.rwmeta/developer_settings.json\u0026#39;} # 16:48:19:INFO: Инициализация службы {\u0026#39;debug\u0026#39;: True} # Empty stdin... # result[\u0026#39;rows\u0026#39;][0][\u0026#39;url\u0026#39;] = http://localhost:8080/media/d/c6509ac7-b410-4f77-8f0b-7c1dfd6a871b # first = {u\u0026#39;url\u0026#39;: u\u0026#39;http://localhost:8080/media/d/c6509ac7-b410-4f77-8f0b-7c1dfd6a871b\u0026#39;, u\u0026#39;id\u0026#39;: u\u0026#39;c6509ac7-b410-4f77-8f0b-7c1dfd6a871b\u0026#39;, u\u0026#39;full_path\u0026#39;: u\u0026#39;/mnt/static/public/74/reqtxt-2016-09-02_16-48-19-(4501).txt\u0026#39;} # result = { # \u0026#34;boxed\u0026#34;: false, # \u0026#34;columns\u0026#34;: [ # { # \u0026#34;displayName\u0026#34;: \u0026#34;Id\u0026#34;, # \u0026#34;fullDisplayName\u0026#34;: \u0026#34;Id\u0026#34;, # \u0026#34;isPrimary\u0026#34;: true, # \u0026#34;isStyled\u0026#34;: false, # \u0026#34;name\u0026#34;: \u0026#34;id\u0026#34;, # \u0026#34;role\u0026#34;: \u0026#34;dimension\u0026#34;, # \u0026#34;type\u0026#34;: \u0026#34;TEXT\u0026#34; # }, # { # \u0026#34;displayName\u0026#34;: \u0026#34;url\u0026#34;, # \u0026#34;fullDisplayName\u0026#34;: \u0026#34;url\u0026#34;, # \u0026#34;isStyled\u0026#34;: true, # \u0026#34;name\u0026#34;: \u0026#34;url\u0026#34;, # \u0026#34;role\u0026#34;: \u0026#34;dimension\u0026#34;, # \u0026#34;type\u0026#34;: \u0026#34;TEXT\u0026#34; # }, # { # \u0026#34;displayName\u0026#34;: \u0026#34;downloadUrlPart\u0026#34;, # \u0026#34;fullDisplayName\u0026#34;: \u0026#34;downloadUrlPart\u0026#34;, # \u0026#34;isStyled\u0026#34;: true, # \u0026#34;name\u0026#34;: \u0026#34;downloadUrlPart\u0026#34;, # \u0026#34;role\u0026#34;: \u0026#34;dimension\u0026#34;, # \u0026#34;type\u0026#34;: \u0026#34;TEXT\u0026#34; # }, # { # \u0026#34;displayName\u0026#34;: \u0026#34;fullPath\u0026#34;, # \u0026#34;fullDisplayName\u0026#34;: \u0026#34;fullPath\u0026#34;, # \u0026#34;isStyled\u0026#34;: true, # \u0026#34;name\u0026#34;: \u0026#34;fullPath\u0026#34;, # \u0026#34;role\u0026#34;: \u0026#34;dimension\u0026#34;, # \u0026#34;type\u0026#34;: \u0026#34;TEXT\u0026#34; # } # ], # \u0026#34;containsLego\u0026#34;: false, # \u0026#34;empty\u0026#34;: false, # \u0026#34;exportable\u0026#34;: true, # \u0026#34;frame\u0026#34;: false, # \u0026#34;hasTemplate\u0026#34;: false, # \u0026#34;legoProperties\u0026#34;: null, # \u0026#34;metaData\u0026#34;: { # \u0026#34;filtersAvailable\u0026#34;: true, # \u0026#34;orderByAvailable\u0026#34;: false, # \u0026#34;pagerAvailable\u0026#34;: false, # \u0026#34;searchTextAvailable\u0026#34;: false # }, # \u0026#34;name\u0026#34;: \u0026#34;\u0026#34;, # \u0026#34;pager\u0026#34;: { # \u0026#34;limit\u0026#34;: 20, # \u0026#34;maxPageLimit\u0026#34;: 1000, # \u0026#34;offset\u0026#34;: 0, # \u0026#34;total\u0026#34;: null # }, # \u0026#34;rows\u0026#34;: [ # { # \u0026#34;full_path\u0026#34;: \u0026#34;/mnt/static/public/74/reqtxt-2016-09-02_16-48-19-(4501).txt\u0026#34;, # \u0026#34;id\u0026#34;: \u0026#34;c6509ac7-b410-4f77-8f0b-7c1dfd6a871b\u0026#34;, # \u0026#34;url\u0026#34;: \u0026#34;http://localhost:8080/media/d/c6509ac7-b410-4f77-8f0b-7c1dfd6a871b\u0026#34; # } # ], # \u0026#34;template\u0026#34;: null # } DbQueryService Делайте запросы к БД к вашим подключениям\n# Важно знать, что эти методы: # - НЕ парсят и НЕ меняют запросы к БД (кроме подстановки prepared statements) # - НЕ являются каким-то отдельным обобщенным SQL-диалектом. Т.е. запросы в этом виде будут переданы напрямую в БД # - Обобщают получение данных и их типов db_adplatform = META.db(\u0026#34;adplatform\u0026#34;) # Методы query, all, one ОБЯЗАТЕЛЬНО должны возвращать ResultSet (может быть и пустой) # Т.е. нельзя делать UPDATE, INSET, DELETE, TRUNCATE, исключение - если в PostgreSQL вы делаете RETURNING # Вернет стандартный data_result Меты, где есть rows, columns, meta_data и пр data_result = db_adplatform.query(\u0026#34;SELECT * FROM users LIMIT 10\u0026#34;) # Вернет rows из data result users = db_adplatform.all(\u0026#34;SELECT * FROM users LIMIT 10\u0026#34;) # Вернет первый элемент из rows или None, если нет первого элемента users = db_adplatform.one(\u0026#34;SELECT * FROM users WHERE id=4501 LIMIT 1\u0026#34;) # Метод update используется для запросов, которые НЕ ВОЗВРАЩАЮТ результат в виде ResultSet (в БД) db_meta_samples = META.db(\u0026#34;meta_samples\u0026#34;) dr = db_meta_samples.update(\u0026#34;\u0026#34;\u0026#34; UPDATE counters SET inc = inc + 1 WHERE name = :name \u0026#34;\u0026#34;\u0026#34;, {\u0026#34;name\u0026#34;: \u0026#34;md_source_update\u0026#34;}) print(u\u0026#34;dr = %s\u0026#34; % pretty_json(dr)) # Для случаев, когда вам надо сделать массовую вставку группы строк # Эта запись не приведет к циклу добавления записей по одной, это реально групповая удобная вставка. # Является хорошей альтернативой к генерации списка VALUES или INSERT FROM SELECT с размапливанием json в таблицу dr = db_meta_samples.batch_update(\u0026#34;\u0026#34;\u0026#34; INSERT INTO test_batch_update VALUES (:id, :mytime::timestamp) ON CONFLICT(id) DO UPDATE SET mod_time=NOW() \u0026#34;\u0026#34;\u0026#34;, [ {\u0026#34;id\u0026#34;: \u0026#34;py_1\u0026#34;, \u0026#34;mytime\u0026#34;: \u0026#34;2014-01-01\u0026#34;}, {\u0026#34;id\u0026#34;: \u0026#34;py_2\u0026#34;, \u0026#34;mytime\u0026#34;: \u0026#34;2014-01-01\u0026#34;}, ]) print(u\u0026#34;dr = %s\u0026#34; % pretty_json(dr)) Отдельно стоит упомянуть про LoadData Api\nЭтот API позволяет как в BigQuery создавать таблицу у казанной БД и потоково загружать в нее данные из файла формата TSV\nЭто позволяет ускорять вставку данных в таблицу от 2 до 4-5 раз.\nВАЖНО! Данные всегда добавляются в указанную таблицу и никакой очистки старых данных нет - вы должны почистить таблицу сами, если вам это нужно\nimport os from metasdk import MetaApp META = MetaApp() os.chdir(os.path.dirname(__file__)) __DIR__ = os.getcwd() + \u0026#34;/\u0026#34; upload_file = open(__DIR__ + \u0026#39;assets/load_data_sample.tsv\u0026#39;, \u0026#39;rb\u0026#39;) configuration = { \u0026#34;load\u0026#34;: { \u0026#34;destinationTable\u0026#34;: { \u0026#34;schema\u0026#34;: \u0026#34;public\u0026#34;, \u0026#34;table\u0026#34;: \u0026#34;xxx_ya_stat\u0026#34; }, \u0026#34;schema\u0026#34;: { \u0026#34;fields\u0026#34;: [ {\u0026#34;name\u0026#34;: \u0026#34;Date\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;DATE\u0026#34;}, {\u0026#34;name\u0026#34;: \u0026#34;Clicks\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;LONG\u0026#34;}, {\u0026#34;name\u0026#34;: \u0026#34;Cost\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;DECIMAL\u0026#34;}, {\u0026#34;name\u0026#34;: \u0026#34;AdNetworkType\u0026#34;, \u0026#34;type\u0026#34;: \u0026#34;TEXT\u0026#34;}, ] } } } db = META.db(\u0026#34;meta_samples\u0026#34;) db.upload_data(upload_file, configuration) SettingsService Рассчитан на чтение параметров из конфигурации Меты\nЭто удобно когда вы хотите хранить ссылки/токены для вшешних api, какие-то глобальные или частные настройки.\nПри этом вы хотите дать некоторым пользователям вохможность это редактировать через интерфейс\nsettings = META.SettingsService # Вернуть только данные rwapp_conf = settings.data_get(\u0026#34;rwapp\u0026#34;) # Полная информация о данных + данные full_rwapp_conf = settings.data_get(\u0026#34;rwapp\u0026#34;, data_only=False) onec_url = settings.config_param(\u0026#34;rwapp\u0026#34;, \u0026#34;app.onec.url\u0026#34;) IssueService Управляйте тикетами через стандартные методы\nfrom metasdk import MetaApp META = MetaApp() IssueService = META.IssueService test_issue_id = 12067 IssueService.add_issue_msg(test_issue_id, \u0026#34;robo test\u0026#34;) IssueService.done_issue(test_issue_id) UserManagementService Управляйте пользователями\nfrom metasdk import MetaApp META = MetaApp() UserManagementService = META.UserManagementService resp = UserManagementService.send_recovery_notice(\u0026#34;login\u0026#34;, \u0026#34;meta\u0026#34;) print(u\u0026#34;resp = %s\u0026#34; % str(resp)) # resp = {\u0026#39;error\u0026#39;: None, \u0026#39;error_details\u0026#39;: None, \u0026#39;success_details\u0026#39;: \u0026#39;Вам отправлено уведомление о сбросе пароля на email art@realweb.ru. Следуйте инструкциям из письма.\u0026#39;} resp = UserManagementService.send_recovery_notice(\u0026#34;unknown_login_123123123\u0026#34;, \u0026#34;meta\u0026#34;) print(u\u0026#34;resp = %s\u0026#34; % str(resp)) # resp = {\u0026#39;error\u0026#39;: \u0026#39;user_not_found\u0026#39;, \u0026#39;error_details\u0026#39;: \u0026#39;Пользователь с таким логином не найден\u0026#39;, \u0026#39;success_details\u0026#39;: None} StarterService Для работы с апи запускатора\nMailService Для работы с почтовым клиентом\nfrom metasdk import MetaApp META = MetaApp() # Рекомендуется выдумывать unique_id для КАЖДОГО письма, чтобы избежать спама при ошибках или повторных запусках ваших скриптов gen_id = \u0026#34;HJljkasdlkjasd\u0026#34; META.MailService.submit_mail(\u0026#34;meta@realweb.ru\u0026#34;, \u0026#34;art@realweb.ru\u0026#34;, \u0026#34;TTT\u0026#34;, \u0026#34;ttt pong\u0026#34;, unique_id=\u0026#34;my_mail_category__\u0026#34; + gen_id) # Без уникализации письма. Не рекомендуется, так как если ваш код будет приводить к ошибкам и бесконечно добавлять письма - то, вы можете заспамить адресатов META.MailService.submit_mail(\u0026#34;meta@realweb.ru\u0026#34;, \u0026#34;art@realweb.ru\u0026#34;, \u0026#34;TTT\u0026#34;, \u0026#34;ttt pong\u0026#34;) "
},
{
	"uri": "https://developers.devision.io/metasdk/services/metaql/",
	"title": "METAQL",
	"tags": [],
	"description": "",
	"content": "Основан на синтаксисе Oracle METAQL - Это защищенный SQL для запросов к данным меты.\nОсобенности Нельзя называть поля или синонимы зарезервированными именами: date Добавлен оператор ILIKE для регистр-независимым сравнения строк Пока нет преобразований типов Поддерживаются только SELECT запросы JOIN пока не поддерживаются Функции Работают функции агрегации:\nMIN, MAX, SUM, AGV COUNT(*), COUNT(DISTINCT поле) Функции преобразований:\nROUND CONCAT NULLIF COALESCE Примеры Полный список metaql примеров\nСписок отчетов\nimport os from metasdk import MetaApp META = MetaApp() log = META.log os.chdir(os.path.dirname(os.path.abspath(__file__))) __DIR__ = os.getcwd() + \u0026#34;/\u0026#34; q = \u0026#34;\u0026#34;\u0026#34; SELECT engine as platform, campaign_remote_id, SUM(impressions) as impressions, SUM(clicks) as clicks, ROUND(SUM(cost), 3) as cost FROM adplatform.campaign_stats_report WHERE stat_date BETWEEN \u0026#39;2017-02-01\u0026#39; AND \u0026#39;2017-03-31\u0026#39; AND engine = \u0026#39;banner\u0026#39; GROUP BY platform, campaign_remote_id ORDER BY platform, campaign_remote_id \u0026#34;\u0026#34;\u0026#34; configuration = { \u0026#34;download\u0026#34;: { # \u0026#34;skipHeaders\u0026#34;: True, \u0026#34;dbQuery\u0026#34;: { \u0026#34;command\u0026#34;: q, } } } metaql = META.MetaqlService resp = metaql.download_data(configuration, output_file=__DIR__ + \u0026#39;assets/stat.tsv\u0026#39;) log.info(\u0026#34;end\u0026#34;) "
},
{
	"uri": "https://developers.devision.io/metasdk/services/exceptions/",
	"title": "Исключения",
	"tags": [],
	"description": "",
	"content": "Описание исключений в какой момент их использовать.\nОшибки могут приходить не только в статус коде ответа, но и внутри корректного ответа, в зависимости от документации самого сервиса, либо определены самостоятельно по каким другим признакам\nSDKError Корневая ошибка для SDK, создана для ветвления дерева исключений. В коде не используется.\nAuthError Ошибка авторизации, используется если нам пришел 401 HTTP ответ, или были выявлены проблемы с авторизацией\nServerError Ошибка сервера, используется если пришел любой 500 HTTP ответ, кроме 502 и 503, или были выявлены проблемы работы с сервером\nNoContentError Ошибка отсутствия контента, используется если пришел 204 HTTP ответ, или были выявлены проблемы с отсутствием данных в ответе\nRequestError Ошибка исполнения запроса, используется если пришел любой 400 HTTP ответ, или были выявлены проблемы работы запроса\nRetryHttpRequestError Ошибка исполнения запроса, используется если пришел 502, 503, 504 HTTP ответ, или были выявлены проблемы к переподключения к серверу\nDbQueryError Ошибка работы с базой данных, используется если были выявлены любые проблемы работы с базой данных\nApiProxyError Ошибка работы с прокси, используется если были выявлены любые проблемы работы с прокси\nEndOfTriesError Ошибка лимита количества повторных попыток, используется если был достигнут лимит количества повторных запросов на получениях данных, которые не привели к положительному исходу\nUnexpectedError Непредвиденная ошибка, используется если пришел любой HTTP ответ кроме 200 и описанных выше, или были выявлены проблемы которые невозможно описать другими исключениями\nLockServiceError Ошибка возникает если место в очереди блокировки не освобождается за отведенное время.\nBadParametersError Ошибка возникает при неправильной настройке запросов API или фидов\n"
},
{
	"uri": "https://developers.devision.io/metasdk/services/logging/",
	"title": "Логирование",
	"tags": [],
	"description": "",
	"content": "Тут мы рассмотрим обычный logger и Bulk-logger, который нужен, чтобы не нагружать большим кол-вом логов, при обработке больших массивов данных с неизвестным временем на обработку одного элемента\nLogger log = META.log # Объявите глобальный контекст, чтобы не писать это каждый раз log.set_entity(\u0026#39;campaign_id\u0026#39;, -1) # По сути это просто хранилище глобальных переменных контекста log.set_entity(\u0026#39;test\u0026#39;, True) log.warning(\u0026#39;Do warning log\u0026#39;, {\u0026#34;count\u0026#34;: 1, \u0026#34;mycontextParam\u0026#34;: [1, 3, 4]}) log.info(\u0026#39;Info log\u0026#39;) logging.info(\u0026#39;Default logging\u0026#39;) # удалите глобальный контекст, когда он вам больше не нужен log.remove_entity(\u0026#39;test\u0026#39;) log.info(\u0026#39;Info log2\u0026#39;) Это выведет вам что-то вроде такого:\n# 00:03:11:WARNING: Do warning log {\u0026#39;count\u0026#39;: 1, \u0026#39;mycontextParam\u0026#39;: [1, 3, 4], \u0026#39;test\u0026#39;: True, \u0026#39;campaign_id\u0026#39;: -1} # 00:03:11:INFO: Info log {\u0026#39;test\u0026#39;: True, \u0026#39;campaign_id\u0026#39;: -1} # 00:03:11:INFO: Default logging {\u0026#39;test\u0026#39;: True, \u0026#39;campaign_id\u0026#39;: -1} # 00:03:11:INFO: Info log2 {\u0026#39;campaign_id\u0026#39;: -1} Bulk Logger Используется для логирования пачек из обрабатываемого списка.\nДелает запись в лог только если прошло определенное кол-во времени\ntotal = 125 # Получаете экземпляр bulk-logger через объект приложения # Список параметров вам подскажет IDE bulk_log = META.bulk_log(u\u0026#39;Моя пачка\u0026#39;, total, 1) for idx in xrange(total): # Первый вызов всегда try_log_part, чтобы ознаменовать начало выполнения цикла bulk_log.try_log_part() # На ЧАСТЫХ, но возможно БЫСТРЫХ процессах можете использовать параметр with_start_message=False # Это исключит запись надписи о начале работы над пачкой и, если пачка сделается до # мин. время логирования, то записи не произойдет вообще # bulk_log.try_log_part(with_start_message=False) # далее ваша бизнес-логика time.sleep(1) # finish вызывать необязательно, но часто нужно, # чтобы точно сказать, что обработка выполнена bulk_log.finish() Это выведет вам что-то вроде такого:\n# 23:55:31:INFO: Начали цикл: Моя пачка {} # 23:56:31:INFO: Моя пачка {\u0026#39;counter\u0026#39;: 61, \u0026#39;percentDone\u0026#39;: 48, \u0026#39;maxCount\u0026#39;: 125} # 23:57:31:INFO: Моя пачка {\u0026#39;counter\u0026#39;: 121, \u0026#39;percentDone\u0026#39;: 96, \u0026#39;maxCount\u0026#39;: 125} # 23:57:36:INFO: Закончили цикл: Моя пачка {} Bulk Logger Thread Pool Используется для логирования пачек из обрабатываемого списка. Делает запись в лог только если прошло определенное кол-во времени\nimport time from functools import partial from multiprocessing.pool import ThreadPool from metasdk import MetaApp META = MetaApp() def my_thread_fn(bulk_log, job_item): bulk_log.try_log_part() # Бизнес логика # работа с job_item time.sleep(1) def my_main_fn(): total = 125 * 2 thread_cnt = 2 bulk_log = META.bulk_log(u\u0026#39;Моя пачка\u0026#39;, total, 1) bulk_log.try_log_part() all_data = range(1, total) pool = ThreadPool(thread_cnt) # Чтобы работать в многопоточном режиме с bulk_log вы # должны передать его как аргумент вызываемой функции таким образом func = partial(my_thread_fn, bulk_log) results = pool.map(func, all_data) bulk_log.finish() pool.close() pool.join() #print(results) my_main_fn() Это выведет вам что-то вроде такого:\n# 16:25:08:INFO: Начали цикл: Моя пачка {} # 16:26:08:INFO: Моя пачка {\u0026#39;counter\u0026#39;: 122, \u0026#39;percentDone\u0026#39;: 48, \u0026#39;maxCount\u0026#39;: 250} # 16:27:09:INFO: Моя пачка {\u0026#39;counter\u0026#39;: 242, \u0026#39;percentDone\u0026#39;: 96, \u0026#39;maxCount\u0026#39;: 250} # 16:27:17:INFO: Закончили цикл: Моя пачка {} "
},
{
	"uri": "https://developers.devision.io/metasdk/",
	"title": "META SDK",
	"tags": [],
	"description": "META SDK - доступ к сервисам Меты",
	"content": "META SDK Интерфейс к сервисам Меты\nУстановка pip install metasdk --upgrade --no-cache Первый вызов from metasdk import MetaApp META = MetaApp() log = META.log log.info(\u0026#34;Hello, from Meta App Script!\u0026#34;, {\u0026#34;param\u0026#34;: \u0026#34;🙂\u0026#34;}) "
},
{
	"uri": "https://developers.devision.io/metasdk/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://developers.devision.io/metasdk/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]